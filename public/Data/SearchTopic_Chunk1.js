define({"68":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/data-driven-ranking.htm",a:"When a query returns hundreds or thousands of results, it is absolutely crucial that the products at the top of the search result page are the ones that are most relevant to the user. Getting this right will lead to a higher conversion probability and increase customer happiness. Implementing proper ...",t:"Data-Driven Ranking"},"69":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/full-text-search.htm",a:"Full-text search is a feature where a user enters arbitrary text into a search field and then gets documents that are relevant for that query. It is normally combined with faceted navigation. In the example below, a user searched for “hammer” and then further filtered for hammer weights of 2000 gram ...",t:"Full-Text Search"},"70":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/generic-faceted-search.htm",a:"Faceted search (sometimes also called faceted navigation) allows users to navigate through a web site by applying filters for categories, attributes, price ranges and so on. It’s probably the most basic feature of a search and users expect this to work. Unfortunately, we observed that this is also ...",t:"Generic Faceted Search"},"71":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/multi-term-auto-completion.htm",a:"Term completion is a feature where a user gets suggestions for search terms and matching search results as he types the query. We call a completion multi-term when it is able to combine terms from different attributes in an open-ended fashion. In the below example, a user entered “fortis” (a brand) ...",t:"Multi-Term Auto Completion"},"72":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/naive-product-centric-approach.htm",a:"A Naive Product Centric Approach Finding products on e-commerce website can be tricky, even when you know exactly what you are looking for. Throughout this document, we will assume a customer wants to buy a hammer that weighs 2kg. A product that would meet his needs might be this “Fäustel” by ...",t:"A Naive Product-Centric Approach"},"73":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/other-best-practices.htm",a:"Finally, we want to provide you with a list of some additional and potentially useful principles regarding the setup of an on-site search experience.\n \nIndex Pages, Not Products\n\n Each document we put in Elasticsearch corresponds to an URL  The mapping type in our schema is called page, not product ...",t:"Other Best Practices"},"74":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/personalization-dymanic-pricing.htm",a:"Especially in businesses with a B2B focus, customers expect to get discounts after they have been using the service/website for a longer period of time. The search infrastructure should be able to handle such use cases and customers should be able to see their own discounted prices while browsing ...",t:"Personalization: Dynamic Pricing"},"75":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/simple-spelling-suggestions.htm",a:"Spelling suggestions provide the users with alternative search terms when the search query does not return any results:\n Translation: Unfortunately there were 0 results for your exact search term “hammer holk”. Did you possibly mean hammer holz? This is one of the simplest features you can build ...",t:"Simple Spelling Suggestions"},"76":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/search_design/usage-driven-schema-structure.htm",a:"Both the schema and the query generator should not need to know that there is such a thing as as the weight of a hammer. We will argue for a document structure and schema design that is not built around the original data but around the usage of attributes in search operations.\n\n At Contorion, this ...",t:"Usage-Driven Schema \u0026 Document Structure"},"77":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/state_machine_cookbook/state-machine-cookbook.htm",a:"State machines are a model of computation used to automate processes. In Spryker you can use the OMS (Undefined variable: General.bundle/module) to automate the management of orders or the StateMachine (Undefined variable: General.bundle/module) to automate other processes you define in your shop. ...",t:"State Machine Cookbook - Part I - State Machine Fundamentals"},"78":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/state_machine_cookbook/state-machine-cookbook-2.htm",a:"\nThis chapter will help you model a state machine using Spryker to manage your sale orders.\n First of all, it’s important to know which tasks must be executed after an order is submitted and in which order. Keep in mind that you can define more than one state machine in your system to cover the use ...",t:"State Machine Cookbook - Part 2 -Building a State Machine"},"79":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/yves/yves.htm",a:"Front-End Yves In this section you will find the following content: Client Controllers and Actions Frontend Translations Using Redis as a KV Storage Implementing URL Routing in Yves",t:"Front-End Yves"},"80":{i:0.000848705547273984,u:"../content/about_spryker/resources_and_developer_tools/yves/client.htm",a:"Yves is divided into two:\n\n The part with controllers, forms, templates etc\n Client part which provides access to the search and storage engine and the Zed application.\n The purpose of the client is to encapsulate the logic which runs the shop independent from the overlying application. So in case ...",t:"Client"},"81":{i:0.000674912043689485,u:"../content/about_spryker/resources_and_developer_tools/yves/controllers-actions.htm",a:"Controllers are placed inside the Controllers folder in Yves; they provide an entry point to the system for requests submitted by the front-end users.\n The methods inside of a controller are called actions. Usually an action reads the incoming request-data, maybe validates it with a form, delegates ...",t:"Controllers and Actions"},"82":{i:0.000674912043689485,u:"../content/about_spryker/resources_and_developer_tools/yves/frontend-translations.htm",a:"Textual translations are handled by the Glossary-(Undefined variable: General.bundle/module). You can use the GlossaryFacade in Zed to add entries to Glossary (or you can use the Zed UI).\n\n \u003c?php\nclass GlossaryFacade extends AbstractFacade\n{\n    public function createTranslation($keyName, ...",t:"Frontend Translations"},"83":{i:0.000848705547273984,u:"../content/about_spryker/resources_and_developer_tools/yves/redis-as-kv.htm",a:"This article describes how Redis is used within Spryker; the current functionality can be extended according to your needs.\n About Redis is a key-value data store and for the values it supports a large collection of data structures, such as strings, hashes, lists or sets.\n\n The following table shows ...",t:"Using Redis as a KV Storage"},"84":{i:0.00124858979222961,u:"../content/about_spryker/resources_and_developer_tools/yves/yves-url-routing.htm",a:"Implementing URL Routing in Yves The words contained in an URL play a major factor for search engine to determine if the page is relevant for a specific search query. The URL routing is a mechanism used to map URLs to the code that gets executed when a specific request is being submitted. URL ...",t:"URL Routing"},"85":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/zed/zed.htm",a:"In this section you will find the following content: Business Layer: Business Layer Business Models Custom Exceptions   Communication Layer: Controllers and Actions Persistence Layer Database Schema Definition Entity Persistence Layer Entity Manager Repository Query Container Query Objects",t:"Back-End Zed"},"86":{i:0.000621422317445735,u:"../content/about_spryker/resources_and_developer_tools/zed/business_layer/business-layer.htm",a:"Zed’s business layer is responsible for the entire business logic.  Most classes exist in this layer and this is the primary area for development.  The business layer is used by the communication layer and by other bundles. Here you know how to save data objects, but you do not care about data ...",t:"Business Layer"},"87":{i:0.000750641049160443,u:"../content/about_spryker/resources_and_developer_tools/zed/business_layer/facade/facade.htm",a:"The facade acts as an internal API. The main responsibility of the facade is to hide the internal implementation. The simply only delegates the calls to internal business models. Similar to a remote web service, the client should not care about how a specific task is done. This is also important for ...",t:"Facade"},"88":{i:0.000789530291033893,u:"../content/about_spryker/resources_and_developer_tools/zed/business_layer/facade/zed-facade-design-by-contract.htm",a:"Every method in a facade contains an implicit promise. So a client expects that the behavior does not change in a minor update. Basically there are two types of possible changes. First there can be changes in the method’s signature for instance, when the name of the method or the order of the ...",t:"Design by Contract (DBC) - Facade"},"89":{i:0.000789530291033893,u:"../content/about_spryker/resources_and_developer_tools/zed/business_layer/facade/zed-facade-how-to-implement.htm",a:"AbstractFacade Every facade extends Spryker\\Zed\\Kernel\\Business\\AbstractFacade which provides an important method: Methods Inside a facade, the methods tell a story about the (Undefined variable: General.bundle/module). They expose  the (Undefined variable: General.bundle/module)\u0027s functions and ...",t:"How to Implement a Facade"},"90":{i:0.000789530291033893,u:"../content/about_spryker/resources_and_developer_tools/zed/business_layer/facade/zed-facade-how-to-use.htm",a:"1. How to use the facade from a controller or a plugin? In Zed’s communication layer the facade of the same (Undefined variable: General.bundle/module) is available with the getFacade() method from all controllers and plugins. A typical usage from a controller looks like this. The controller ...",t:"How to Use a Facade"},"91":{i:0.000621422317445735,u:"../content/about_spryker/resources_and_developer_tools/zed/business_layer/business-models.htm",a:"Business models are classes where you program the business logic of your system. With business logic we mean all kinds of algorithms (e.g. cart calculation), storage procedures (e.g. checkout save workflow) and interactions with external providers (e.g. payment). Business models are not visible from ...",t:"Business Models"},"92":{i:0.000621422317445735,u:"../content/about_spryker/resources_and_developer_tools/zed/business_layer/custom-exceptions.htm",a:"Custom Exceptions",t:"custom-exceptions"},"93":{i:0.000621422317445735,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence-layer.htm",a:"Zed’s persistence layer is the owner of the schema, entities and queries. This layer knows the database structure and holds the connection to it.\n Integrated Technologies\n Propel\tFast and simple ORM Framework\nMySQL or PostgreSQL\tBoth databases are supported\n Persistence Layer Elements:\n The ...",t:"Persistence Layer"},"94":{i:0.0039606688377762,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence_layer/database_overview.htm",a:"ORM Directory The ORM directory contains two folders: Propel and Zed. The src/Orm/Propel is for: Configuration in Propel format (generated propel.json - don’t touch). Copy of merged schema files (don’t touch). Migration files (can be on gitignore or can be committed, the decision is made on the ...",t:"Database Overview"},"95":{i:0.00490711846080972,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence_layer/database_schema_definition.htm",a:"With Propel, a database schema is defined in an XML-file. Each (Undefined variable: General.bundle/module) carries it’s own part of the big schema that is collected and merged. Propel’s documentation on defining the database schema:  Database schema Example Schema XML File This file can be copied ...",t:"Database Schema Definition"},"96":{i:0.00414596832672925,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence_layer/entity-manager.htm",a:"\n    Since Kernel version 3.2, it is possible to create an entity manager class in your persistence layer.\nIt will be responsible for saving, updating and deleting data. Using the class, you can separate data from persistence details (Propel). \nIt is important to not overuse the entity manager or ...",t:"Entity Manager"},"97":{i:0.00414596832672925,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence_layer/entity.htm",a:"In Spryker an entity represents one entry from a table in the database. Entities are an implementation of the  Active record design pattern , so their usage is very simple.\nFor a full documentation see  Propel’s Active Record Reference .  Spryker’s entities are called Active Record classes or just ...",t:"Entity"},"98":{i:0.00437576561222843,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence_layer/query_container.htm",a:"A query container holds all the database queries of the current (Undefined variable: General.bundle/module). Each (Undefined variable: General.bundle/module) has exactly one query container, which also acts as an entry point to the persistence layer. Internally it uses  query objects  and returns ...",t:"Query Container"},"99":{i:0.00473332495722522,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence_layer/query_objects.htm",a:"Query objects provide an object-oriented API for writing database queries which are used in  query containers .\n Please check the official  Propel Query Reference  for a complete documentation.\n\n How to Create a New Query Object\n Query object are created by Propel during the build model step. See ...",t:"Query Objects"},"100":{i:0.00473332495722522,u:"../content/about_spryker/resources_and_developer_tools/zed/persistence_layer/repository.htm",a:"\n    Since Kernel version 3.2 it\u0027s possible to use a Repository class in your persistence layer.\n    The repository implements the  repository pattern , which means you have clear separation between business and persistence layers. \n    Propel entities are not allowed outside the persistence layer. ...",t:"Repository"},"101":{i:0.000795215821030234,u:"../content/about_spryker/resources_and_developer_tools/zed/controllers-actions.htm",a:"Controllers and Actions",t:"controllers-actions"},"102":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/code-generator.htm",a:"The CodeGenerator (Undefined variable: General.bundle/module) can generate your project code.  Out of the box it provides generators for Yves, Zed, Client, Service and Shared application layers.\n\n This is a pre-release.\n Installation\n Install it as\n\n composer require --dev spryker/code-generator You ...",t:"Code Generator"},"103":{i:0.000750641049160443,u:"../content/about_spryker/resources_and_developer_tools/configuration-management.htm",a:"Default and Local Configuration Files\n Under config/Shared you’ll find several files that are used for the system’s configuration, that can be used by both Yves and Zed.\n The files are merged in a fixed order if they exist. So the entries of config_default.php are overwritten by the entries in ...",t:"Configuration Management"},"104":{i:0.00249220871043553,u:"../content/about_spryker/resources_and_developer_tools/console-commands.htm",a:"We provide an integrated mechanism to add command line calls. Technically this is based on Symfony’s Console Component.\n\t\t \n\t\t\tGet a list of all available commands\n\t\t You can see the list of all of the commands by running: vendor/bin/console. vagrant@spryker-vagrant ➜  current git:(develop) ✗ ...",t:"Console Commands"},"105":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/container-globals.htm",a:"The ContainerGlobals is a way to inject dependencies which are available inside your  Factories . Every dependency added to the ContainerGlobals is available by using getProvidedDependency() in your factory.\n \nTo add something globally you need to create a service provider and add it to the ...",t:"Container Globals"},"106":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/core-extension.htm",a:"We offer several ways like plugins to hook into the core’s behavior and extend this without modifications. But sometimes this is not enough, so you need to replace a method which is deep in the core.\n\n Before your proceed, double check if there is no other way to solve your requirement, maybe there ...",t:"Core Extension"},"107":{i:0.00129825103992221,u:"../content/about_spryker/resources_and_developer_tools/cronjob-scheduling.htm",a:"We use  Jenkins  for cronjob scheduling. Compared to Crontab, there are several benefits: Jobs are queued and can be manually executed Job definitions are under version control and can be changed by any developer Console output available for debugging Add a new job and run it Jobs are defined in ...",t:"Cronjob Scheduling"},"108":{i:0.000817315377024699,u:"../content/about_spryker/resources_and_developer_tools/dependency-provider.htm",a:"Each (Undefined variable: General.bundles/modules) ships with a DependencyProvider class which explicitly defines services and external dependencies to other (Undefined variable: General.bundles/modules). For instance when the Cms (Undefined variable: General.bundle/module) requires the Glossary ...",t:"Dependency Provider"},"109":{i:0.0030240346754203,u:"../content/about_spryker/resources_and_developer_tools/factory.htm",a:"All (Undefined variable: General.bundles/modules) are shipped with a dedicated factory for each layer. The responsibility of the factory is to create new instances of the classes from the same layer and (Undefined variable: General.bundle/module).\n\n The following example shows a typical method from ...",t:"Factory"},"110":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/flash-messenger.htm",a:"This tutorial describes how to show a message in the Zed GUI.\n In the controller you can use these shortcut methods to show a user message in the GUI. The messages will be translated later when they are rendered.\n\n \u003c?php\nclass IndexController extends AbstractController\n{\n    public function ...",t:"Flash Messenger"},"111":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/internal-server-error-handling.htm",a:"This document describes how to configure the behavior when an internal server error occurs. Whether you need to show the details of the error or render a static page for any internal error, this is done through configuration.\n\n Configure Internal Server Error  Page\nDepending on the environment on ...",t:"Internal Server Error Handling"},"112":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/performance-scalability.htm",a:"Spryker Commerce OS was built to enable the development of high performance e-commerce applications that are able to support an extremely high number of unique visitors. However, no application can be both, light and heavy, at the same time.\n\n Therefore, we have two applications: Yves and Zed. Both ...",t:"Performance and Scalability"},"113":{i:0.000864120609234236,u:"../content/about_spryker/resources_and_developer_tools/plugin.htm",a:"Plugins are small classes that are used to connect bundles in a flexible and configurable way. In contrast to a direct call to a facade of another (Undefined variable: General.bundle/module), there can be an array of provided (Undefined variable: General.bundles/modules).\n\n According to our ...",t:"Plugin"},"114":{i:0.00146719765292914,u:"../content/about_spryker/resources_and_developer_tools/publish-and-synchronization-reference.htm",a:" To implement Publish and Synchronize in your code, you need to perform the following steps: 1. Add Publish Events Publish and Synchronize are event-driven. To start publishing data to the frontend, an event must be triggered. For this purpose, you need to add events for all changes you want to ...",t:"Publish and Synchronization Reference"},"115":{i:0.000750641049160443,u:"../content/about_spryker/resources_and_developer_tools/service.htm",a:"Service is a Spryker application layer shared by the Client application layer and the Zed application layer. This service layer provides the ability to register a service once and have it applied to both layers. Usage is focused on level details (infrastructure layer). For example: encoding, text ...",t:"Service"},"116":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/session-handlers.htm",a:"We provide a number of session handlers to work with different storages. By default, the demo-shop uses a locking Redis session handler for Yves and a non-locking Redis session handler for Zed in the development environment.\n\n The following session handlers are currently available:\n\n File\n ...",t:"Session Handlers"},"117":{i:0.000576847545575943,u:"../content/about_spryker/resources_and_developer_tools/spryker-middleware.htm",a:"Overview Spryker Middleware is a constructor that allows you to set up a linear data processing flow, also referred to as pipeline, for import/export of data from some system to shop, or from shop to some system. For example, it can be used for importing products to a shop, or exporting orders from ...",t:"Spryker Middleware"},"118":{i:0.000991108880609198,u:"../content/about_spryker/resources_and_developer_tools/transfer-objects.htm",a:"Transfer objects are simple data containers. Their purpose is to retrieve a standardized way to access data and to get more expressive method signatures. They are available everywhere in the system. How to use transfer objects Simple usage The example shows a typical use case for a transfer object. ...",t:"Transfer Objects"},"119":{i:0.000699428168217871,u:"../content/about_spryker/videos___webinars/videos.htm",a:"We believe that good technology doesn’t stop with the code. You also need the examples and information to help you convert your vision into reality. In this section you can check out our videos for more information about Spryker Commerce OS. You can also send us direct requests for videos and topics ...",t:"Spryker Videos"},"120":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/category-management.htm",a:"Category Management This video shows how we use Categories to structure products for displaying and filtering products. We use the Demo Shop and the Spryker Administration Interface to demonstrate this feature.",t:"Category Management"},"121":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/cms-blocks.htm",a:"CMS Blocks This video shows how CMS blocks are used to add complementary content to store pages. We use the Demo Shop to demonstrate this feature.",t:"CMS Blocks"},"122":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/cms-pages.htm",a:"CMS Pages This video shows how CMS content is displayed and managed in Spryker. We use the Demo Shop to demonstrate this feature.",t:"CMS Pages"},"123":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/demo-shop.htm",a:"Demo Shop This video is a short overview of the Spryker Demo Shop, our out-of-the-box online shop boilerplate. ",t:"Demo Shop"},"124":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/navigation.htm",a:"Navigation This video shows how Navigation is used and created We use the Demo Shop to demonstrate this feature.",t:"Navigation"},"125":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/product-groups.htm",a:"Product Groups This video shows how to create product groups. Product Groups allow you to display an item and its different variants such as different shoe colors or different t-shirt sizes. ",t:"Product Groups"},"126":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/product-management.htm",a:"This video demonstrates how products are managed in Spryker. The video reviews product structure discussing concepts such as abstract and concrete products and their benefits. Then we review product features such as: Product Options, Product Labels, Product Relations, Product Sets and Product ...",t:"Product Management"},"127":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/product-sets.htm",a:"Product Sets This video shows how product sets are managed in Spryker. The video uses the Spryker Demo Shop to review how products are displayed and bought as a set and how sets are managed and configured in the Administration Interface.",t:"Product Sets"},"128":{i:0.000576847545575943,u:"../content/about_spryker/videos___webinars/wishlists.htm",a:"Wishlists This video shows our demo shop implementation of Wishlists. ",t:"Wishlists"},"129":{i:0.000576847545575943,u:"../content/about_spryker/releases/releases.htm",a:"This section contains the notes for each release made by Spryker. Make sure you check this section from time-to-time to  stay up to date with the improvements, bug fixes and new features that are delivered by our team. Mailing Lists We recommend that you subscribe to our release newsletter and ...",t:"Releases"},"130":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-april-1-2017.htm",a:"Features Product Relations With this release we introduce product relations feature. This feature can be used in many different ways. Some of the anticipated (and most common for e-commerce shops) use cases are displaying similar products, up-selling of products, etc. The solution comes with a Zed ...",t:"Release Notes - April - 1 2017"},"131":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-april-2-2017.htm",a:"Features Multiple Wishlists This release introduces core functionality to support multiple wishlist handling in Yves. It is now possible to create multiple wishlists in customer account and select which wishlist to add a product to. In the customer account’s wishlist section, users can manage ...",t:"Release Notes - April - 2 2017"},"132":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-august-1-2017.htm",a:"Announcements PHP 7.2 is There Soon / EOL for PHP5.6 With the release of PHP 7.2 we want our Spryker code to stay cutting edge and using the best features available. Soon we want to start leveraging the new typehinting features the language provides and for that we need to stop supporting legacy ...",t:"Release Notes - August - 1 2017"},"133":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-august-2-2017.htm",a:"Features Order Details Improvement We have improved Zed usability for order management. Now in the order view you can have a convenient summary of products from the given order, including images and name of products. Product options related to the given product are visually differentiated making it ...",t:"Release Notes - August - 2 2017"},"134":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-december-2017.htm",a:"(missing or bad snippet) Features Initial Release of Heidelpay Module From now on, we support integration with Heidelpay payment service provider. Heidelpay covers the entire range of services connected to international electronic payment processing. It is possible to configure and use the following ...",t:"Release Notes - December - 2017"},"135":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-july-1-2017.htm",a:"Features Selecting Product Variant in the Cart With this release we are bringing the variant selection functionality to the cart. Your shop user can now modify the selected variant right in the cart which will then, if available, replace the current item in the cart with the newly selected one (e.g. ...",t:"Release Notes - July - 1 2017"},"136":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-july-2-2017.htm",a:"Features Filter by Product Labels We\u0027ve changed product label touch logic in order to be able to export label IDs for products when their label relations change. This will allow you to further search and filter by labels. Affected Modules Documentation For module documentation see:  Product Label ...",t:"Release Notes - July - 2 2017"},"137":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-june-1-2017.htm",a:"Improvements Session Service Provider Enhancement Previously the Yves and Zed SessionServiceProvider contained a switch statement to determine which SessionHandler should be used. The switch is a violation of the open-close principle and therefore we refactored the current SessionServiceProvider for ...",t:"Release Notes - June - 1 2017"},"138":{i:0.000598027786838863,u:"../content/about_spryker/releases/2017/release-notes-june-2-2017.htm",a:"Release Notes - June - 2 2017 See:  Release Notes PDF",t:"Release Notes - June - 2 2017"},});