define({"295":{i:0.000660377006427563,u:"../content/capabilities/navigation/content-based-shop-navigation.htm",a:"Content Based Shop Navigation  Guide your customers through your shop not only via Product Categories, but also by providing creative Content Pages. These pages can also be part of your shop navigation to create a more vivid and inspirational shopping experience.\n",t:"Content Based Shop Navigation  "},"296":{i:0.000660377006427563,u:"../content/capabilities/navigation/hierarchical-navigation.htm",a:" The Spryker Commerce OS navigation, is built in a tree structure to support multiple levels of linking, e.g. to categories, external links, search results and CMS pages.\nBreadcrumbs help your customers navigate through your shop more easily by highlighting the path to the page they are on. They ...",t:"Hierarchical Navigation  "},"297":{i:0.000511153229579791,u:"../content/capabilities/navigation/module-navigation-1-0.htm",a:" Overview The Navigation module manages multiple navigation menus that can be displayed on the frontend (Yves). Every navigation section can contain its own nested structure of navigation nodes. Navigation nodes have types that help define what kind of link they represent. The following node types ...",t:"Navigation Module Version 1.*  "},"298":{i:0.000660377006427563,u:"../content/capabilities/navigation/product-based-shop-navigation.htm",a:" The Product Based Navigation can easily reflect any grouping of products you wish. Customize your store\u0027s Navigation in the Administration Interface and add, edit or delete elements. \nBuild relationships to pages outside the store, to support SEO capabilities through backlinks for improved ranking, ...",t:"Product-Based Shop Navigation  "},"299":{i:0.000511153229579791,u:"../content/capabilities/navigation/t-add-navigation-zed.htm",a:" This tutorial describes how to make your new controller action accessible in the navigation bar. There are two locations where you can define the navigation config : In the global config/Zed/navigation.xml config file Within your module in src/Pyz/Zed/{moduleName}/Communication/navigation.xml ...",t:"Tutorial - Adding Navigation in Zed  "},"300":{i:0.000526670431573585,u:"../content/capabilities/order_management/order-management.htm",a:"Order Management ",t:"Order Management    "},"301":{i:0.00761638991121887,u:"../content/capabilities/order_management/refund/refund-2-0.htm",a:" The latest version of this module can be found here  Refund     The Refund module manages the retours refund process. Overview Using  Refund  Extending  Refund  Overview RefundFacade contains the following methods: calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity) calculates ...",t:"Refund 2.0    "},"302":{i:0.00977500763845549,u:"../content/capabilities/order_management/sales/sales-5-0.htm",a:" The latest version of this module can be found here  Sales     Getting Totals for Order Spryker does not store order grand total or subtotal amounts; all amounts are stored before calculation, order items store single item gross amounts, discounts store single item discount amount. To get the ...",t:"Sales 5.0    "},"303":{i:0.00356290195150521,u:"../content/capabilities/order_management/state_machine/order-process-modelling-state-machines.htm",a:" State Machines help you define, execute and visualize predefined and automated processes. It can model events that involve performing a predetermined sequence of actions, for example in the order process, e.g. order is being shipped if the payment is successful. You can tailor the State Machine to ...",t:"Order Process Modelling via State Machines    "},"304":{i:0.00294954782901312,u:"../content/capabilities/order_management/state_machine/state-machine-cronjob.htm",a:" There are three console commands dedicated for the state machine: state-machine:check-condition - checks all the states that have a condition without event and triggers them. state-machine:check-timeout - check timeout expired items and triggers event for them. state-machine:clear-locks - clears ...",t:"Cron Jobs - State Machine    "},"305":{i:0.00294954782901312,u:"../content/capabilities/order_management/state_machine/state-machine-events.htm",a:" There are two main triggers: first one StateMachineFacade::triggerForNewStateMachineItem() is used when first time triggering the state machine for an item; this trigger will initialize the state machine and start transition through states until a decision without event, timeout or manual event is ...",t:"Triggering Events - State Machine    "},"306":{i:0.00294954782901312,u:"../content/capabilities/order_management/state_machine/state-machine-implementing-plugin.htm",a:" To start using state machine, you need create a new plugin by implementing the  StateMachineHandlerInterface. This plugin is used when there is need for additional information from client or some action happens and the client needs to be notified about it. List of interface methods that need to be ...",t:"Implementing the Plugin - State Machine    "},"307":{i:0.00294954782901312,u:"../content/capabilities/order_management/state_machine/state-machine-persistence.htm",a:" To persist the state of the item and make the connection with the state machine, you need to store related data into the database. For example, you can create two fields (idStateMachineState(int) and idStateMachineProcess(int)) and store their id’s when itemStateUpdated is being triggered.   See ...",t:"Persistence - State Machine    "},"308":{i:0.00294954782901312,u:"../content/capabilities/order_management/state_machine/state-machine-zed-presentation.htm",a:" To add manual trigger button or history for items, you need to add some implementation. State machine provides methods for triggering events and for retrieving history. StateMachineFacade::processedStateMachine(StateMachineItemTransfer[]) updates the given array of items with data from state ...",t:"Updating Presentation in Zed - State Machine    "},"309":{i:0.00062307106221562,u:"../content/capabilities/order_management/splittable_order_items/splittable-order-items.htm",a:"B2B customers usually purchase large volumes of products selecting specific measuring and packaging units relevant for their orders. In B2B eCommerce shops, some products, for example in pallets, might contain hundreds or even thousands and millions of items in them. Buying such products generally ...",t:"Splittable Order Items"},"310":{i:0.00104076542827425,u:"../content/capabilities/order_management/splittable_order_items/splittable-order-items_overview.htm",a:"As a final step of checkout, for each item in the cart, sales order items are created. By default, each product concrete is splittalble: i.e. if the product concrete is a pallet containing 1000 cans, 1000 sales order items will be created in the database upon checkout. To avoid creation of numerous ...",t:"Splittable Order Items Feature Overview"},"311":{i:0.000511153229579791,u:"../content/capabilities/order_management/manual-order-creation.htm",a:" Allow your sales agents to create orders manually. In the Administration Interface users can effortlessly create orders, enter the relevant checkout information and place the order on behalf the customer. \nThe order entry form, out of the box, is optimized for processing orders via phone and can be ...",t:"Manual Order Creation    "},"312":{i:0.000511153229579791,u:"../content/capabilities/order_management/offer-management.htm",a:" To meet the needs of your business partners, the Spryker Commerce OS allows them to request an offer or quote for products and services you sell. \nYour sales agents can offer individual deals by manipulating item prices in the order form and thus propose the best deals to your customers. Adding the ...",t:"Offer Management  "},"313":{i:0.00108862988819679,u:"../content/capabilities/order_management/oms.htm",a:" The OMS Matrix gives you a quick overview of all orders and their current statuses, taken from the State Machine. It allows you to see how many order items currently exist in each status and for how long they have been there. \nFrom this overview you can easily go into a detail per status and order ...",t:"OMS (Order Management System) Matrix    "},"314":{i:0.00062307106221562,u:"../content/capabilities/order_management/order-processing.htm",a:"Order Processing  With the Spryker Commerce OS you can process orders from your online store, via a manual order creation form or various external touchpoints, such as voice or car apps.\n",t:"Order Processing  "},"315":{i:0.00143650195792091,u:"../content/capabilities/order_management/state_machine/state-machine-patterns.htm",a:" Process Patterns The State Machine Cook Book describes how to build a state machine with the elements state, transition and event. However there are some recurring design problems that are needed in many processes. In this article common problems and their solution with state machine snippets are ...",t:"State Machine Patterns    "},"316":{i:0.000511153229579791,u:"../content/capabilities/order_management/reclamations.htm",a:" Effectively support the customer care operations and provide your sales agents with an easy-to-manage and clear overview of all Reclamations. \nReclamations are easily created and managed and be connected to orders with a few simple clicks. A reclamation can also be converted into an entirely new ...",t:"Reclamations    "},"317":{i:0.000619773643536348,u:"../content/capabilities/order_management/step_engine/step-engine-breadcrumb.htm",a:" To set up breadcrumb navigation for a step collection, first you’ll need to mark which steps you would like to have in your breadcrumb. To mark a step available for breadcrumb just implement \\Spryker\\Yves\\StepEngine\\Dependency\\Step\\StepWithBreadcrumbInterface in all the necessary steps. The ...",t:"Breadcrumb Navigation - Step Engine    "},"318":{i:0.000619773643536348,u:"../content/capabilities/order_management/step_engine/step-engine-define-step.htm",a:" When adding a new step, you must implement the StepInterface. The StepInterface defines all the methods that StepEngine needs when executing a step: preCondition() - here you define the requirements for the step to get executed requireInput() - here you define if the step requires user input (e.g. ...",t:"Defining a Step - Step Engine    "},"319":{i:0.000619773643536348,u:"../content/capabilities/order_management/step_engine/step-engine-use-case-scenario.htm",a:" Below you can see an example of configuration for the checkout process, containing two steps: an entry step and a success step. Click to expand the code sample \u003c?php\nnamespace Pyz\\Yves\\Checkout;\n\nuse Pyz\\Yves\\Checkout\\Form\\FormFactory;\nuse ...",t:"Use Case Scenario - Step Engine    "},"320":{i:0.000619773643536348,u:"../content/capabilities/order_management/step_engine/step-engine-workflow.htm",a:" When you need to define a multi-step process using the StepEngine feature, you need to implement the following interfaces: StepInterface - here you implement the logic that needs to get executed when the defined step takes place SubFormInterface - defines the name of the form and the pathProperty ...",t:"Step Engine Workflow    "},"321":{i:0.000511153229579791,u:"../content/capabilities/order_management/step_engine/step-engine.htm",a:" The StepEngine module provides an easy way to define multi-step pages with forms. Using this module you can define Steps and additionally you can link forms to interact with the user. This is useful in handling the checkout process where you can define multiple steps, such as: select payment ...",t:"Step Engine    "},"322":{i:0.00114035027037302,u:"../content/capabilities/order_management/url-handling-new-entity.htm",a:"The following information describes how to handle URLs for other types of entities that Spryker core provides. Prerequisites Before you begin, make sure the target entity is already in your database (the one to you would like to assign URLs to). In the examples below we\u0027ll call this entity ...",t:"Handling New Types of Entity URLs"},"323":{i:0.00114035027037302,u:"../content/capabilities/order_management/url-redirects.htm",a:"A URL redirect is a special entity that consists of a source URL (which is provided by the spy_url database table), a target URL and an HTTP status code (stored in spy_url_redirect database table). Redirects are exported to the key-value storage with collectors and are matched with StorageRouter ...",t:"URL Redirects"},"324":{i:0.00148045586188739,u:"../content/capabilities/order_management/url.htm",a:"The URL module handles dynamic URLs for entities that appear on the front-end (Yves). At the moment, Spryker core provides URL handling for products, CMS pages, categories and URL redirects. The URLs are stored in one database table and each is unique. The database structure for storing URLs looks ...",t:"URL "},"325":{i:0.000526670431573585,u:"../content/capabilities/payment/payment.htm",a:"Payment ",t:"Payment    "},"326":{i:0.000511153229579791,u:"../content/capabilities/payment/how_to_implement_direct_debit/ht-implement-dd.htm",a:" This article describes the steps how to implement direct debit payment method without integrating with a third party payment service provider.\n For this example, we will add a new module called PaymentMethods.\n\n If it is your the first time creating a new module, check .\n In this How to: Direct ...",t:"HowTo - Implement Direct Debit Payment   "},"327":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-be-implementation.htm",a:" \nPersist payment details\nThe payment details for the direct debit payment method need to be persisted in the database. We’ll define a new table to store this data; inside the Persistence/Propel/Schema/ folder in Zed add the spy_directdebit_schema.xml file with the following content: \u003c?xml ...",t:"Direct Debit Back-End Implementation   "},"328":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-checkout-implementation.htm",a:" The next step is to integrate direct debit into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector, that will inject the direct debit form and handler into the Checkout module: Click to expand the code sample \u003c?php\n\nnamespace ...",t:"Integrate Direct Debit into Checkout    "},"329":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-fe-implementation.htm",a:" Create a form\n In Yves, we start by building the form.  Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, inside the Form/DataProvider/ folder:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"Direct Debit Front-end Implementation   "},"330":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-shared-implementation.htm",a:" \nAs you can see, we need to identify the new payment type through some unique constants which we’re going to define under the Shared namespace, since they’re needed both by Yves and Zed.\n\n Create the PaymentMethodsConstants interface under the Shared namespace, where you’ll define these constants.\n ...",t:"Direct Debit Shared Implementation   "},"331":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-test-implementation.htm",a:"Testing the Direct Debit Implementation  Now you are able to test the payment method you just implemented.\n\nSubmit a new order from Yves. After that you can control the flow of the order in Zed UI.",t:"Testing the Direct Debit Implementation   "},"332":{i:0.000511153229579791,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-implement-invoice-payment.htm",a:" Invoice Payment This article describes the steps that you need to consider when you need to implement invoice payment method without integrating with a third party payment service provider.\n In this HowTo, we will add a new module called PaymentMethods.\n\n If this is you first time creating a new ...",t:"HowTo - Implement Invoice Payment   "},"333":{i:0.000767497505492344,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-be.htm",a:" Checkout Plugins\n To integrate the invoice payment method into the checkout, we need to provide implementations for these 2 plugins: CheckoutPreCondition PaymentSaveOrder Add the following 2 plugins in Zed, under the Communication/Plugin/Checkout/ folder of the new added module.\n\n ...",t:"HowTo - Implement Invoice Payment Back End   "},"334":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-checkout.htm",a:" The next step is to integrate the invoice payment into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector that will inject the invoice form and handler into the Checkout module:\n Click here to expand the code sample \u003c?php\n\nnamespace ...",t:"HowTo — Integrate Invoice Payment into Checkout"},"335":{i:0.000767497505492344,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-fe-be-shared.htm",a:" As you can see, we need to identify the new payment type through some unique constants which we’re going to define under the Shared namespace, since they’re needed both by Yves and Zed.\n\n Create the PaymentMethodsConstants interface in the Shared namespace, where you’ll define these constants.\n\n ...",t:"HowTo - Implement Invoice Payment - Shared Implementation   "},"336":{i:0.000767497505492344,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-fe.htm",a:" Creating the Form\n In Yves, we’ll start by building the form. Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, inside the Form/DataProvider/ folder:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"HowTo - Implement Invoice Payment Front End   "},"337":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-test.htm",a:"HowTo - Implement Invoice Payment - Test  When you have completed the instructions on  front end ,  back end  and  shared  implementation, you are able to test the payment method you just implemented.\n\nSubmit a new order from Yves. After that you can control the flow of the order in Zed UI.",t:"HowTo - Implement Invoice Payment - Test   "},"338":{i:0.000511153229579791,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-implement-prepayment.htm",a:" Prepayment\n This article describes the steps that you need to consider when you need to implement the prepayment method without integrating with a third party payment service provider.\n In this HowTo we will add a new module called PaymentMethods.\n\n If this is you first time creating a new module, ...",t:"HowTo - Implement Prepayment   "},"339":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-prepayment-be.htm",a:" To integrate the prepayment method into the checkout, we are required to provide implementations for these 2 plugins:\n\n CheckoutPreCondition  PaymentSaveOrder  Add the following 2 plugins in Zed, inside the Communication/Plugin/Checkout folder of the new added module.\n\nPrepaymentPreCheckPlugin:\n ...",t:"HowTo - Implement Prepayment Back End   "},"340":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-prepayment-checkout.htm",a:" The next step is to integrate prepayment into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector that will inject the prepayment form and handler into the Checkout module:\n Click to expand the code sample \u003c?php\n\nnamespace ...",t:"HowTo — Integrate Prepayment into Checkout   "},"341":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-prepayment-fe.htm",a:" Creating the Form\n In Yves, we’ll start by building the form. Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, under Form/DataProvider:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"HowTo - Implement Prepayment Front End   "},"342":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-prepayment-shared.htm",a:" As you can see, we need to identify the new payment type through some unique constants which we’re going to define under the Shared namespace, since they’re needed both by Yves and Zed.\n\n Create the PaymentMethodsConstants interface in the Shared namespace, where you’ll define these constants.\n\n ...",t:"HowTo - Implement Prepayment Shared   "},"343":{i:0.000598049560745037,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-prepayment-test.htm",a:"HowTo - Test Prepayment Implementation  Now you are able to test the payment method you just implemented.\n\nSubmit a new order from Yves. After that you can control the flow of the order in Zed UI.\n\n",t:"HowTo - Test Prepayment Implementation   "},"344":{i:0.000660377006427563,u:"../content/capabilities/payment/multiple-payment-per-order.htm",a:" All orders can be paid with none, one or multiple payment methods which the customer can select during checkout. To accommodate your customer\u0027s requirements, you can offer multiple payment methods for a single order, such as gift card and an additional credit card.\n Most orders are paid with a ...",t:"Multiple Payment Methods Per Order    "},"345":{i:0.00148045586188739,u:"../content/capabilities/payment/payment-functionality.htm",a:" \nMultiple Payments\n Spryker enables to have multiple payments per checkout, payments are stored in QuoteTransfer::payments and persisted when CheckoutClient::placeOrder is called in last checkout step. \nEach payment method must provide payment amount it shares from order grand total. This amount is ...",t:"Payment Functionality    "},"346":{i:0.000660377006427563,u:"../content/capabilities/payment/refund-management.htm",a:" Refunds can be handled automatically in the Administration Interface, once the order has been delivered. Your customers can return the entire order or parts thereof by means of the order splitting mechanism. Every order contains information on the total possible refund value and how much has ...",t:"Refund Management    "},"347":{i:0.000526670431573585,u:"../content/capabilities/price/price.htm",a:"Price ",t:"Price    "},"348":{i:0.000600687495688455,u:"../content/capabilities/price/auto-detect-currency.htm",a:"Auto-Detect Currency  The Spryker Commerce OS automatically registers the store\u0027s currency your customer selects and manages orders accordingly. Prices, Payment and Shipping costs are all converted automatically.",t:"Auto-Detect Currency  "},"349":{i:0.000511153229579791,u:"../content/capabilities/price/ht-create-personalized-prices.htm",a:" Personalized Prices This article describes the steps that you need to consider when you need to implement personalized prices for customer groups.\n \nOverview\n When implementing special prices that are according to the group the customer is part of, several steps need to be considered.\n Extend ...",t:"HowTo - Create Personalized Prices  "},"350":{i:0.000600687495688455,u:"../content/capabilities/price/measurement-units.htm",a:" Depending on your type of business you may not need to sell your products in quantities, but in length, weight or volume. The Spryker Commerce OS allows you to offer your products in a variety of different measuring units.\nYou can separate internal and external selling units to efficiently monitor ...",t:"Measurement Units  "},"351":{i:0.00421939334316162,u:"../content/capabilities/price/money.htm",a:" Money Handling monetary values can be a problem and is often quite hard. The Money bundle makes it easier to work with monetary values. Spryker handles all monetary values as integer and provides conversions from decimal values to cent values and vice versa. The key feature of this module is to ...",t:"Money  "},"352":{i:0.000600687495688455,u:"../content/capabilities/price/net-gross-price.htm",a:" You can easily manage gross and net prices per product, country, currency or anything else and define which price you want to display in the shop.\nIn turn, your customers can choose their preferred currency when visiting your store.\n - Customers can switch between gross and net mode in the shop  ",t:"Net and Gross Prices  "},"353":{i:0.000511153229579791,u:"../content/capabilities/price/packaging-units.htm",a:" Offer cost-efficient and flexible Packaging Units that suit the needs of the product and your customers, such as bags, palettes, or packets in addition to single item packaging. The units can either contain a fixed or variable pre-specified quantity of items. Variable packaging units allow your ...",t:"Packaging Units  "},"354":{i:0.000511153229579791,u:"../content/capabilities/price/price-functionality.htm",a:"A price can be attached to an abstract product as well as to a concrete product. The price is stored as an integer, in the smallest unit of the currency (e.g. for Euro that would be cents). Each price is assigned to a price type ( e.g. gross price, net price ) and for a price type there can be one ...",t:"Price Functionality"},"355":{i:0.000600687495688455,u:"../content/capabilities/price/price-types.htm",a:" Price Per Business Unit Offer your customers individual agreements and customize the Prices per Business Unit accordingly. The Spryker Commerce OS allows you to display different prices in your web shop. To avoid unnecessary repetition of values, the data is compressed in the database. You can also ...",t:"Price Types  "},"356":{i:0.000600687495688455,u:"../content/capabilities/price/volume-prices.htm",a:" In B2B business model every shop owner aims to explore new markets, experience significant growth, have more orders on the website and, thus, increase the sales. For some store owners that means working hard and spending more money. A better option is to get your customers to checkout with more ...",t:"Volume Prices  "},"357":{i:0.000526670431573585,u:"../content/capabilities/product_management/product-management.htm",a:"Product Management ",t:"Product Management    "},"358":{i:0.000511153229579791,u:"../content/capabilities/product_management/product/product.htm",a:" Product data is central data for shops. It contains characteristics that describe the product as well as characteristics that control behavior of the shop. For example the color of a product is an important information that the customer might need, whereas the weight of the product can be used to ...",t:"Product    "},"359":{i:0.000598049560745037,u:"../content/capabilities/product_management/product/product-domain-model.htm",a:" The following domain model shows abstract product and concrete product. One abstract product has at least one up to n different products. A product belongs exactly to one abstract product. Both abstract and concrete product can have 0 to n product attributes. Remember a product attribute table ...",t:"Product Domain Model    "},"360":{i:0.000598049560745037,u:"../content/capabilities/product_management/product/product-lifecycle.htm",a:" The touch tables are able create the snapshot of what’s currently loaded into the Yves data storages ( both key-value and search data storages) If a product was added into the Zed database after the last export, then there’s no corresponding entry in the touch table for that product. Once it’s ...",t:"Product Lifecycle    "},"361":{i:0.000567112145897706,u:"../content/capabilities/product_management/product/product-abstraction.htm",a:" With the Spryker Commerce OS you can easily build a product hierarchy structure with Abstract and Concrete Products.\nProducts can come with multiple Variants, such as size or color. In order to provide a better shopping experience to your customers, the different Variants, or Concrete Products, are ...",t:"Product Abstraction    "},"362":{i:0.000598049560745037,u:"../content/capabilities/product_management/product/product-define-variants.htm",a:" \n            Spryker’s data structure for products allows to design a product hierarchy.\n            The abstract product does not have stock, but defines various default properties for the descendant concrete products (product variants).\n            The concrete product (product variant) always ...",t:"Defining Variants with Abstract and Concrete Products    "},"363":{i:0.000598049560745037,u:"../content/capabilities/product_management/product/product-attributes.htm",a:" You can easily build a list of characteristic attributes for your products, such as brand or special features. For these you can define specific values to help you and your customers distinguish between products. All products can get assigned a multitude of attributes to simplify the filter and ...",t:"Product Attributes    "},"364":{i:0.000567112145897706,u:"../content/capabilities/product_management/product_bundle/product-bundle.htm",a:" With the Product Bundles feature you can freely tie individual items together and sell them as a package. As opposed to a set, in which products are loosely grouped, the items in a bundle are always sold together. You can choose to create a special bundle price to make the purchase more attractive. ...",t:"Product Bundles    "},});