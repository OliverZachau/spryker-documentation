define({"290":{i:0.000493060741036849,u:"../content/capabilities/internationalization/ht-setup-stores-multiple-locals.htm",a:" Multiple Locales This article describes the steps that you need to consider when you have to setup stores with multiple locales.\n Configure Locales for Store\n The stores configuration can be found in the config/Shared/stores.php file. You can find out more about store configuration here.\n\n For each ...",t:"HowTo - Setup Stores with Multiple Locales    "},"291":{i:0.000637002676491217,u:"../content/capabilities/internationalization/international-tax-rates-sets.htm",a:"International Tax Rates and Sets  Align your business with international tax standards by defining tax rates and sets. Determine country-based tax rates for products, options and shipments, that will automatically be applied to the respective shops.",t:"International Tax Rates and Sets    "},"292":{i:0.00501106633026538,u:"../content/capabilities/internationalization/mg-currency.htm",a:" Upgrading from Version 2.* to Version 3.* \n            With the Currency module version 3 we have added  sp_currency database table to persist currencies in ZED.\n            Run the following SQL request:\n\n             \n                CREATE SEQUENCE \"spy_currency_pk_seq\";\n\n                CREATE ...",t:"Migration Guide - Currency    "},"293":{i:0.00544774349515723,u:"../content/capabilities/internationalization/mg-multi-currency.htm",a:"Migration Guide - Multi-Currency  Migrating System to Multi-Currency \n          This article provides a whole overview of what needs to be done to have the multi-currency feature running in your Spryker shop. The multi-currency feature affects many Spryker modules so we split it into smaller parts.\n ...",t:"Migration Guide - Multi Currency"},"294":{i:0.000637002676491217,u:"../content/capabilities/internationalization/multiple-currencies-per-store.htm",a:" The Spryker Commerce OS lets you to define multiple currencies per store for product, product option and shipping method. \nA product can for example cost 5 EUR in Germany, 6 EUR in France and 5 CHF in Switzerland. \nYour customers may easily choose between these different currencies. All prices on ...",t:"Multiple Currencies per Store    "},"295":{i:0.000637002676491217,u:"../content/capabilities/internationalization/multiple-stores.htm",a:" With the Spryker Commerce OS you can freely create Multiple Stores for different scenarios that suit your business needs. Build one Store that services multiple countries and languages or setup a different store for each region. Easily share abstract products, discounts and other logics and code ...",t:"Multiple Stores    "},"296":{i:0.000508028704825957,u:"../content/capabilities/inventory_management/inventory-management.htm",a:"Inventory Management ",t:"Inventory Management    "},"297":{i:0.00276919491405259,u:"../content/capabilities/inventory_management/about-inventory.htm",a:" Inventory is the amount of products you offer to your customers. These products are catalogued and divided into items that are in stock and reserved. The stock value is the physical amount of products you have in your warehouse, whereas availability is an aggregated value per store which reflects ...",t:"Inventory    "},"298":{i:0.00276919491405259,u:"../content/capabilities/inventory_management/availability.htm",a:" For most of the e-commerce platforms stock does not reflect real availability of products, since stock is just the physical number of products in your warehouse which does not take reserved products into account. In contrast to stock, availability considers not just number of products in the ...",t:"Availability    "},"299":{i:0.000708973644218401,u:"../content/capabilities/inventory_management/multiple-warehouse-stock.htm",a:" Your product\u0027s availability is calculated on a per-store basis, meaning you can manage stocks across all international entities from a single interface and make logistics management more efficient. If you have multiple warehouses for storage, your products can have multiple stock quantities to ...",t:"Multiple Warehouse Stock Management    "},"300":{i:0.000708973644218401,u:"../content/capabilities/inventory_management/stock-availability-management.htm",a:" The fully automated Stock calculation takes into consideration products that are reserved in open orders when defining availability. Also, you can define never-out-of-stock products, such as digital downloads.\nIn contrast to Stock, Availability considers not only the number of products in the ...",t:"Stock and Availability Management    "},"301":{i:0.00166999597000647,u:"../content/capabilities/inventory_management/stock.htm",a:" Stock defines physical amount of products you have in your whorehouse. This article will tell you how the stock module works and how product stock is calculated. Multiple Storage Locations Spryker allows to define several storage locations in which the products are being stored. For a product we ...",t:"Stock    "},"302":{i:0.000508028704825957,u:"../content/capabilities/mailing_and_notifications/mailing-notifications.htm",a:"Mailing and Notifications ",t:"Mailing and Notifications  "},"303":{i:0.000493060741036849,u:"../content/capabilities/mailing_and_notifications/email-service-connection.htm",a:" Keep your customers updated with a variety of emails you can either send via the internal SMTP system or an external email provider of your choice. Automated emails regarding order status, shipping or newsletters are just a few examples of Emails to support the purchase process and increase brand ...",t:"E-mail Service Connection  "},"304":{i:0.000695038258383706,u:"../content/capabilities/mailing_and_notifications/mail-create-provider-plugin.htm",a:" The provider class is used to define the Mail Provider you want to use. As each provider behaves differently the provider class will also look different accordingly. Create a class which implements MailProviderPluginInterface. After that  register  your provider in the Mail module.",t:"Create a MailProviderPlugin  "},"305":{i:0.000695038258383706,u:"../content/capabilities/mailing_and_notifications/mail-create-type-plugin.htm",a:" MailType is a class used to build the entire MailTransfer through an easy to use interface. Create the MailTypePlugin within the module which should send out a email and implement MailTypePluginInterface. Then just setup your email in the build() method. Within the build() method you have access to ...",t:"Create a MailTypePlugin  "},"306":{i:0.000594049499710277,u:"../content/capabilities/mailing_and_notifications/mail-how-to-send.htm",a:"The following example represents a real-world scenario: CustomerRegistration. A Customer goes through the registration process in your frontend (Yves) and all customer information is sent to Zed. Zed uses the information to register the customer. Once the registration is completed, the customer will ...",t:"How To Send a Mail"},"307":{i:0.00857136665109647,u:"../content/capabilities/mailing_and_notifications/mail-register-provider.htm",a:" To add your provider to the MailProviderCollection add it to MailDependencyProvider: \u003c?php\nnamespace Pyz\\Zed\\Mail;\n\n...\n\npublic function provideBusinessLayerDependencies(Container $container) \n{\n    ...\n    \n    $container-\u003eextend(self::MAIL_PROVIDER_COLLECTION, function ...",t:"Register the Mail Provider  "},"308":{i:0.000695038258383706,u:"../content/capabilities/mailing_and_notifications/mail-register-type.htm",a:" To add your MailType to the MailTypeCollection you need to add it in your MailDependencyProvider: \u003c?php\nnamespace Pyz\\Zed\\Mail;\n\n...\n\npublic function provideBusinessLayerDependencies(Container $container) \n{\n    ...\n    \n    $container-\u003eextend(self::MAIL_TYPE_COLLECTION, function ...",t:"Register a MailTypePlugin  "},"309":{i:0.000594049499710277,u:"../content/capabilities/mailing_and_notifications/mail.htm",a:" Sending mail is a standard web application task. There are many cases where an action triggers an email to be sent. These actions can be newsletter subscriptions, order placement, refunds, customer account registration, etc. The Mail module helps you to create emails to be sent. To send an email ...",t:"Mail   "},"310":{i:0.000708973644218401,u:"../content/capabilities/mailing_and_notifications/newsletter-subscription.htm",a:"Newsletter Subscription  Offer Newsletter Subscriptions to your customers to increase loyalty. Send updates on product related news, special offers or any other update you wish to share. The Spryker Commerce OS offers opt-in and opt-out options. - Different types of newsletters possible",t:"Newsletter Subscription  "},"311":{i:0.000708973644218401,u:"../content/capabilities/mailing_and_notifications/transactional-email-management.htm",a:" Keep your customers updated with a variety of emails you can either send via the internal SMTP system or an external email provider of your choice.\nAutomated Emails regarding order status, shipping or transactions are just a few examples of how you can support the purchase process and increase ...",t:"Transactional E-Mail Management  "},"312":{i:0.000508028704825957,u:"../content/capabilities/master_suite_and_custom_suite/sample-custom-suite.htm",a:"Master Suite and Custom Suite ",t:"Master Suite and Custom Suite   "},"313":{i:0.000708973644218401,u:"../content/capabilities/master_suite_and_custom_suite/choosing-a-suite.htm",a:" The Sample Suite represents a standard shop, with common functionality and work-flows to show basic features. \nYou can use the Sample Suite as a boilerplate for your own shop and customize it for your products, CI and services.\nCustom Suites are individual versions of the OS that are tailored ...",t:"Choosing the Right Suite for You   "},"314":{i:0.000708973644218401,u:"../content/capabilities/master_suite_and_custom_suite/css-class-customization.htm",a:"CSS Class Customization  You can fully customize the storefront appearance to match your CI using the CSS Classes.",t:"CSS Class Customization   "},"315":{i:0.000508028704825957,u:"../content/capabilities/media_management/media-management.htm",a:"Media Management ",t:"Media Management  "},"316":{i:0.000601017192627625,u:"../content/capabilities/media_management/asset-management.htm",a:"Asset Management  Apart from images, you can also add a great variety of other assets to your shop, like presentations, pdf documents, graphics, banners and many more. This gives you the chance to create rich, compelling and attractive content for your customers.",t:"Asset Management  "},"317":{i:0.000601017192627625,u:"../content/capabilities/media_management/image-hosting.htm",a:"Image Hosting  A high performance and fast site speed is essential to guarantee customer satisfaction. The Spryker Commerce OS ensures this by integrating images from separate hosting servers.",t:"Image Hosting  "},"318":{i:0.000601017192627625,u:"../content/capabilities/media_management/product-image-management.htm",a:" Make your shop more appealing and give your customers a better idea of what they are buying with Images and Image Sets. Group several images into sets and link them to products. One product can have several named and localized sets of images, for example to present standard or seasonal highlights. ...",t:"Product Image Management  "},"319":{i:0.000601017192627625,u:"../content/capabilities/media_management/video.htm",a:"Video  Enrich your content by embedding Videos into CMS Blocks and Pages. Like Images and Assets, Videos need to be hosted on a separate platform to ensure high site speed.",t:"Video  "},"320":{i:0.000508028704825957,u:"../content/capabilities/multi-channel/multi-channel.htm",a:"Multi-Channel ",t:"Multi-Channel  "},"321":{i:0.000708973644218401,u:"../content/capabilities/multi-channel/multiple-touchpoint-integration.htm",a:"Multiple Touchpoint Integration  With the Spryker Commerce OS you can flexibly integrate any and as many customer facing Touchpoints you wish. Always stay ahead of your competition with i.e. voice, car, bot or smart home commerce integrations.",t:"Multiple Touchpoint Integration  "},"322":{i:0.000708973644218401,u:"../content/capabilities/multi-channel/responsive-design.htm",a:"Responsive Design  Customers visiting your store from a mobile device will be able to smoothly navigate and experience a seamless shopping journey, thanks to the high-end responsive design of the Spryker Commerce OS.",t:"Responsive Design  "},"323":{i:0.000508028704825957,u:"../content/capabilities/navigation/navigation.htm",a:"Navigation ",t:"Navigation  "},"324":{i:0.000637002676491217,u:"../content/capabilities/navigation/content-based-shop-navigation.htm",a:"Content Based Shop Navigation  Guide your customers through your shop not only via Product Categories, but also by providing creative Content Pages. These pages can also be part of your shop navigation to create a more vivid and inspirational shopping experience.\n",t:"Content Based Shop Navigation  "},"325":{i:0.000637002676491217,u:"../content/capabilities/navigation/hierarchical-navigation.htm",a:" The Spryker Commerce OS navigation, is built in a tree structure to support multiple levels of linking, e.g. to categories, external links, search results and CMS pages.\nBreadcrumbs help your customers navigate through your shop more easily by highlighting the path to the page they are on. They ...",t:"Hierarchical Navigation  "},"326":{i:0.00457099571097879,u:"../content/capabilities/navigation/mg-navigation-gui.htm",a:" Upgrading from Version 1.* to Version 2.* In version 2, validity dates allow to preset date boundaries for each navigation node to control their own and their descendants visibility. Upgrade Navigation module to at least 2.0.0 version. Click  here  to learn how to migrate the Navigation module. ...",t:"Migration Guide - NavigationGui Module  "},"327":{i:0.00479639795717482,u:"../content/capabilities/navigation/mg-navigation.htm",a:" Upgrading from Version 1.* to Version 2.* Version 2 adds validity date fields to navigation nodes to support NavigationGui module to control the temporal visibility of nodes. Update the Navigation module to at least  version 2.0.0 in your composer.json. Install the new database fields by running ...",t:"Migration Guide - Navigation Module  "},"328":{i:0.000493060741036849,u:"../content/capabilities/navigation/module-navigation-1-0.htm",a:" Overview The Navigation module manages multiple navigation menus that can be displayed on the frontend (Yves). Every navigation section can contain its own nested structure of navigation nodes. Navigation nodes have types that help define what kind of link they represent. The following node types ...",t:"Navigation Module Version 1.*  "},"329":{i:0.000637002676491217,u:"../content/capabilities/navigation/product-based-shop-navigation.htm",a:" The Product Based Navigation can easily reflect any grouping of products you wish. Customize your store\u0027s Navigation in the Administration Interface and add, edit or delete elements. \nBuild relationships to pages outside the store, to support SEO capabilities through backlinks for improved ranking, ...",t:"Product-Based Shop Navigation  "},"330":{i:0.000493060741036849,u:"../content/capabilities/navigation/t-add-navigation-zed.htm",a:" This tutorial describes how to make your new controller action accessible in the navigation bar. There are two locations where you can define the navigation config : In the global config/Zed/navigation.xml config file Within your module in src/Pyz/Zed/{moduleName}/Communication/navigation.xml ...",t:"Tutorial - Adding Navigation in Zed  "},"331":{i:0.000508028704825957,u:"../content/capabilities/order_management/order-management.htm",a:"Order Management ",t:"Order Management    "},"332":{i:0.00806722303459921,u:"../content/capabilities/order_management/refund/refund-2-0.htm",a:" The latest version of this module can be found here  Refund     The Refund module manages the retours refund process. Overview Using  Refund  Extending  Refund  Overview RefundFacade contains the following methods: calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity) calculates ...",t:"Refund 2.0    "},"333":{i:0.000493060741036849,u:"../content/capabilities/order_management/refund/mg-refund.htm",a:" Upgrading from Version 4.* to Version 5.* Version 4 of the Refund module no longer uses SalesAggregatorFacade , it was replaced with SalesFacade. The RefundCalculator business class must now replace RefundToSalesAggregatorInterface with the RefundToSalesInterface bridge. To learn more see,  ...",t:"Migration Guide - Refund    "},"334":{i:0.00994740827489149,u:"../content/capabilities/order_management/sales/sales-5-0.htm",a:" The latest version of this module can be found here  Sales     Getting Totals for Order Spryker does not store order grand total or subtotal amounts; all amounts are stored before calculation, order items store single item gross amounts, discounts store single item discount amount. To get the ...",t:"Sales 5.0    "},"335":{i:0.000913571807143299,u:"../content/capabilities/order_management/sales/mg-sales-aggregator.htm",a:" Upgrading from Version 4.* to Version 5.* SalesAggregator version 4 is last version to be released for this module. Apart from future bug fixes, it will no longer be developed and Core will no longer use it to get order totals anymore. There are two steps to the two migration process. The first is ...",t:"Migration Guide - SalesAggregator    "},"336":{i:0.00336497255798775,u:"../content/capabilities/order_management/sales/mg-sales.htm",a:" Upgrading from Version 7.* to Version 8.* \n            In Sales module version 8 we have added multi-currency support, this release added two new fields to spy_sales table to persist \"currency\" and \"store\". Also Order saver now stores currency and store where order is placed.\n\n            Run the ...",t:"Migration Guide - Sales    "},"337":{i:0.0035015198494871,u:"../content/capabilities/order_management/state_machine/order-process-modelling-state-machines.htm",a:" State Machines help you define, execute and visualize predefined and automated processes. It can model events that involve performing a predetermined sequence of actions, for example in the order process, e.g. order is being shipped if the payment is successful. You can tailor the State Machine to ...",t:"Order Process Modelling via State Machines    "},"338":{i:0.00286971362959429,u:"../content/capabilities/order_management/state_machine/state-machine-cronjob.htm",a:" There are three console commands dedicated for the state machine: state-machine:check-condition - checks all the states that have a condition without event and triggers them. state-machine:check-timeout - check timeout expired items and triggers event for them. state-machine:clear-locks - clears ...",t:"Cron Jobs - State Machine    "},"339":{i:0.00286971362959429,u:"../content/capabilities/order_management/state_machine/state-machine-events.htm",a:" There are two main triggers: first one StateMachineFacade::triggerForNewStateMachineItem() is used when first time triggering the state machine for an item; this trigger will initialize the state machine and start transition through states until a decision without event, timeout or manual event is ...",t:"Triggering Events - State Machine    "},"340":{i:0.00286971362959429,u:"../content/capabilities/order_management/state_machine/state-machine-implementing-plugin.htm",a:" To start using state machine, you need create a new plugin by implementing the  StateMachineHandlerInterface. This plugin is used when there is need for additional information from client or some action happens and the client needs to be notified about it. List of interface methods that need to be ...",t:"Implementing the Plugin - State Machine    "},"341":{i:0.00286971362959429,u:"../content/capabilities/order_management/state_machine/state-machine-persistence.htm",a:" To persist the state of the item and make the connection with the state machine, you need to store related data into the database. For example, you can create two fields (idStateMachineState(int) and idStateMachineProcess(int)) and store their id’s when itemStateUpdated is being triggered.   See ...",t:"Persistence - State Machine    "},"342":{i:0.00286971362959429,u:"../content/capabilities/order_management/state_machine/state-machine-zed-presentation.htm",a:" To add manual trigger button or history for items, you need to add some implementation. State machine provides methods for triggering events and for retrieving history. StateMachineFacade::processedStateMachine(StateMachineItemTransfer[]) updates the given array of items with data from state ...",t:"Updating Presentation in Zed - State Machine    "},"343":{i:0.000493060741036849,u:"../content/capabilities/order_management/manual-order-creation.htm",a:" Allow your sales agents to create orders manually. In the Administration Interface users can effortlessly create orders, enter the relevant checkout information and place the order on behalf the customer. \nThe order entry form, out of the box, is optimized for processing orders via phone and can be ...",t:"Manual Order Creation    "},"344":{i:0.0026163471055734,u:"../content/capabilities/order_management/mg-oms.htm",a:" Upgrading from Version 7.* to Version 8.* \n            With the new OMS version, detail lock logging has been introduced and execution bucket size decreased.\n In order to successfully migrate to the new OMS version, perform the following steps:  Migrate the DB:\n                 vendor/bin/console ...",t:"Migration Guide - OMS    "},"345":{i:0.000493060741036849,u:"../content/capabilities/order_management/offer-management.htm",a:" To meet the needs of your business partners, the Spryker Commerce OS allows them to request an offer or quote for products and services you sell. \nYour sales agents can offer individual deals by manipulating item prices in the order form and thus propose the best deals to your customers. Adding the ...",t:"Offer Management  "},"346":{i:0.00105795748720556,u:"../content/capabilities/order_management/oms.htm",a:" The OMS Matrix gives you a quick overview of all orders and their current statuses, taken from the State Machine. It allows you to see how many order items currently exist in each status and for how long they have been there. \nFrom this overview you can easily go into a detail per status and order ...",t:"OMS (Order Management System) Matrix    "},"347":{i:0.000637002676491217,u:"../content/capabilities/order_management/order-processing.htm",a:"Order Processing  With the Spryker Commerce OS you can process orders from your online store, via a manual order creation form or various external touchpoints, such as voice or car apps.\n",t:"Order Processing  "},"348":{i:0.00139233771014751,u:"../content/capabilities/order_management/state_machine/state-machine-patterns.htm",a:" Process Patterns The State Machine Cook Book describes how to build a state machine with the elements state, transition and event. However there are some recurring design problems that are needed in many processes. In this article common problems and their solution with state machine snippets are ...",t:"State Machine Patterns    "},"349":{i:0.000493060741036849,u:"../content/capabilities/order_management/reclamations.htm",a:" Effectively support the customer care operations and provide your sales agents with an easy-to-manage and clear overview of all Reclamations. \nReclamations are easily created and managed and be connected to orders with a few simple clicks. A reclamation can also be converted into an entirely new ...",t:"Reclamations    "},"350":{i:0.00064236635849882,u:"../content/capabilities/order_management/step_engine/step-engine-breadcrumb.htm",a:" To set up breadcrumb navigation for a step collection, first you’ll need to mark which steps you would like to have in your breadcrumb. To mark a step available for breadcrumb just implement \\Spryker\\Yves\\StepEngine\\Dependency\\Step\\StepWithBreadcrumbInterface in all the necessary steps. The ...",t:"Breadcrumb Navigation - Step Engine    "},"351":{i:0.000851917851546343,u:"../content/capabilities/order_management/step_engine/step-engine-define-step.htm",a:" When adding a new step, you must implement the StepInterface. The StepInterface defines all the methods that StepEngine needs when executing a step: preCondition() - here you define the requirements for the step to get executed requireInput() - here you define if the step requires user input (e.g. ...",t:"Defining a Step - Step Engine    "},"352":{i:0.00064236635849882,u:"../content/capabilities/order_management/step_engine/step-engine-use-case-scenario.htm",a:" Below you can see an example of configuration for the checkout process, containing two steps: an entry step and a success step. Click to expand the code sample \u003c?php\nnamespace Pyz\\Yves\\Checkout;\n\nuse Pyz\\Yves\\Checkout\\Form\\FormFactory;\nuse ...",t:"Use Case Scenario - Step Engine    "},"353":{i:0.00064236635849882,u:"../content/capabilities/order_management/step_engine/step-engine-workflow.htm",a:" When you need to define a multi-step process using the StepEngine feature, you need to implement the following interfaces: StepInterface - here you implement the logic that needs to get executed when the defined step takes place SubFormInterface - defines the name of the form and the pathProperty ...",t:"Step Engine Workflow    "},"354":{i:0.000702612234084371,u:"../content/capabilities/order_management/step_engine/step-engine.htm",a:" The StepEngine module provides an easy way to define multi-step pages with forms. Using this module you can define Steps and additionally you can link forms to interact with the user. This is useful in handling the checkout process where you can define multiple steps, such as: select payment ...",t:"Step Engine    "},"355":{i:0.00109998708813673,u:"../content/capabilities/order_management/url-handling-new-entity.htm",a:"The following information describes how to handle URLs for other types of entities that Spryker core provides. Prerequisites Before you begin, make sure the target entity is already in your database (the one to you would like to assign URLs to). In the examples below we\u0027ll call this entity ...",t:"Handling New Types of Entity URLs"},"356":{i:0.00109998708813673,u:"../content/capabilities/order_management/url-redirects.htm",a:"A URL redirect is a special entity that consists of a source URL (which is provided by the spy_url database table), a target URL and an HTTP status code (stored in spy_url_redirect database table). Redirects are exported to the key-value storage with collectors and are matched with StorageRouter ...",t:"URL Redirects"},"357":{i:0.00142805449793128,u:"../content/capabilities/order_management/url.htm",a:"The URL module handles dynamic URLs for entities that appear on the front-end (Yves). At the moment, Spryker core provides URL handling for products, CMS pages, categories and URL redirects. The URLs are stored in one database table and each is unique. The database structure for storing URLs looks ...",t:"URL "},"358":{i:0.000508028704825957,u:"../content/capabilities/payment/payment.htm",a:"Payment ",t:"Payment    "},"359":{i:0.000493060741036849,u:"../content/capabilities/payment/how_to_implement_direct_debit/ht-implement-dd.htm",a:" This article describes the steps how to implement direct debit payment method without integrating with a third party payment service provider.\n For this example, we will add a new module called PaymentMethods.\n\n If it is your the first time creating a new module, check .\n In this How to: Direct ...",t:"HowTo - Implement Direct Debit Payment   "},"360":{i:0.000576881338255858,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-be-implementation.htm",a:" \nPersist payment details\nThe payment details for the direct debit payment method need to be persisted in the database. We’ll define a new table to store this data; inside the Persistence/Propel/Schema/ folder in Zed add the spy_directdebit_schema.xml file with the following content: \u003c?xml ...",t:"Direct Debit Back-End Implementation   "},"361":{i:0.000576881338255858,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-checkout-implementation.htm",a:" The next step is to integrate direct debit into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector, that will inject the direct debit form and handler into the Checkout module: Click to expand the code sample \u003c?php\n\nnamespace ...",t:"Integrate Direct Debit into Checkout    "},"362":{i:0.000576881338255858,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-fe-implementation.htm",a:" Create a form\n In Yves, we start by building the form.  Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, inside the Form/DataProvider/ folder:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"Direct Debit Front-end Implementation   "},"363":{i:0.000576881338255858,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-shared-implementation.htm",a:" \nAs you can see, we need to identify the new payment type through some unique constants which we’re going to define under the Shared namespace, since they’re needed both by Yves and Zed.\n\n Create the PaymentMethodsConstants interface under the Shared namespace, where you’ll define these constants.\n ...",t:"Direct Debit Shared Implementation   "},});