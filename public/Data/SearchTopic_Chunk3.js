define({"219":{i:0.00378355655190014,u:"../content/capabilities/development/file_system/filesystem.htm",a:" The FileSystem Service provides an abstraction for file systems. It uses the same interface to access different types of file systems, regardless of their location or protocol. The Flysystem module provides plugins for  thephpleague/flysystem  vendor package and implement FileSystem\u0027s plugin ...",t:"File System  "},"220":{i:0.00265513801679128,u:"../content/capabilities/development/file_system/filesystem-api.htm",a:" Read API  getMetadata(FileSystemQueryTransfer $fileSystemQueryTransfer) Return FileSystemResourceMetadataTransfer, null on failure \u003c?php\n$fileSystemQueryTransfer = new ...",t:"File System API  "},"221":{i:0.00441307671449552,u:"../content/capabilities/development/queue/queue.htm",a:" Concepts Sender\t -  a program that sends messages.\n Receiver\t- a program that waits to receive messages.\n Message - \ta string or binary data  passed from Sender to Receiver.\n Message Box\t- Similar to a Mailbox, here you can store, send and receive messages.\n Introduction\n The Queue module provides ...",t:"Queue    "},"222":{i:0.00361052003416593,u:"../content/capabilities/development/queue/queue-adapter.htm",a:"Default Queue Adapter  Spryker includes a RabbitMQ adapter package in  spryker/rabbit-mq , if you have already installed the spryker demoshop on your machine, this package will be automatically downloaded for you.\n",t:"Default Queue Adapter   "},"223":{i:0.00361052003416593,u:"../content/capabilities/development/queue/queue-benefits.htm",a:" The following is a list of the Queus System’s benefits:\n \nAsynchronous: Message processing can be offloaded to different times to prevent bottlenecks and run when necessary.\n Decoupling: The queue provides separate layers for data and processing\n Scalability: Adding more processes for receiving and ...",t:"Queue Benefits   "},"224":{i:0.00361052003416593,u:"../content/capabilities/development/queue/queue-engine.htm",a:"The Spryker virtual machine is shipped with a ready to use RabbitMQ engine inside.\n\n To access the management UI for Demoshop: Go to http://zed.de.demoshop.local:15672/ (Replace demoshop with your project name if you customized it)\n Enter the default credentials: user: admin Password: mate20mg Click ...",t:"Default Queue Engine"},"225":{i:0.00361052003416593,u:"../content/capabilities/development/queue/queue-job-config.htm",a:" You can also find the Worker configuration in jobs.php as part of the Demopshop  and adjust the worker command to run every minute.\n\n To adjust the worker command to run every minute:\n \u003c?php\n\n$jobs[] = [\n    \u0027name\u0027 =\u003e \u0027queue-worker-start\u0027,\n    \u0027command\u0027 =\u003e \u0027$PHP_BIN vendor/bin/console ...",t:"Queue Job Configuration  "},"226":{i:0.00361052003416593,u:"../content/capabilities/development/queue/queue-msg-processor.htm",a:" Plugins are used to enable developers to have more focus on message processing. This is achieved by handling the queue implementation as a background process, allowing developers to focus on messages and their processing logic.\n\n Example:\n\n \u003c?php\nnamespace ...",t:"Queue Message Processor Plugin  "},"227":{i:0.00361052003416593,u:"../content/capabilities/development/queue/queue-task.htm",a:" The Queue module provides a specific command for listening to the queues, fetching messages and triggering registered processors, by running this command you will see what messages are going to be consumed and passed to the plugins.\n\n The command syntax is as follows:\n\n ./vendor/bin/console ...",t:"Queue Task  "},"228":{i:0.00361052003416593,u:"../content/capabilities/development/queue/queue-workers.htm",a:"Queue Worker is another useful command that sends the Task to a background process and provides parallel processing. By adjusting the Worker config we can run tasks with different time slot and a different amount of processes.\n Command syntax:\n\n ./vendor/bin/console queue:worker:start -vvv\n",t:"Queue Workers"},"229":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api.htm",a:" The Spryker OS offers a flexible REST API for Zed. It maps basic REST functionality to the persistence layer of the Spryker backend.\n\n By default, the API accepts and returns JSON as format. But it can be extended to work with any format. As for JSON, the API specification is close to JSON API ...",t:"Zed API (BETA)    "},"230":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api-additional-function.htm",a:" Meta Information\n Links as part of the meta information will be part of the response on the same level as the data: {\n    \"data\": ...,\n    \"links\": [\n        \"self\" =\u003e ...                         \n        ...\n    ],\n    ...\n}\n “self” URIs are included, for example for adding an item.\n\n",t:"Additional Functionality - Zed API    "},"231":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api-appendix.htm",a:" API Documentation\n We will soon provide an extensive documentation on the API resource URIs available and a tool to parse those to a standard.\n\n Logging\n By default all incoming requests and outgoing responses will be logged as “info” level.\n\n Security Recommendations\n Secure the API with a token ...",t:"Appendix - Zed API    "},"232":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api-config.htm",a:" First of all we need to decide on the resources being exposed. Those will be mapped inside the ApiDependencyProvider:\n\n \u003c?php\nuse Spryker\\Zed\\CustomerApi\\Communication\\Plugin\\Api\\CustomerApiResourcePlugin;\nuse Spryker\\Zed\\ProductApi\\Communication\\Plugin\\Api\\ProductApiResourcePlugin;\n\n    /**\n     * ...",t:"Zed API Configuration    "},"233":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api-crud-function.htm",a:" Filtering\n For find action we return a paginated collection that can be limited and customized based on query string input or headers. So using the provided FilterPreProcessors one can enable filtering (conditions), sorting (and multi-sorting) and pagination.\n\n Condition Filtering\n For the ...",t:"CRUD Functionality - Zed API    "},"234":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api-processor-stack.htm",a:" Request and Pre Processing\n We now need to decide further on the URL format. Should this be extension driven, which is easier to browse, or HTTP header driven, for example? What kind of URL query string transformation do we need, what kind of header parsing is required?\n\n In order to keep this ...",t:"Processor Stack - Zed API    "},"235":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api-project-implementation.htm",a:" For the API and the API bundles to get activated we need to configure our own service provider stack in the Zed ApplicationDependencyProvider class:\n\n \u003c?php\n    /**\n     * @param \\Spryker\\Zed\\Kernel\\Container $container\n     *\n     * @return \\Silex\\ServiceProviderInterface[]\n     */\n    protected ...",t:"Project Implementation - Zed API    "},"236":{i:0.000511153229579791,u:"../content/capabilities/development/zed_api/zed-api-resources.htm",a:" Each module can have a “{module}Api” module(e.g. CustomerApi for Customer). Such an API module exposes CRUD facade methods (find, get, add, update, remove) that can be mapped to a URL via REST resource/action resolution.\n\n The main Api module contains a dispatcher that delegates to those API module ...",t:"Zed API Resources    "},"237":{i:0.000600687495688455,u:"../content/capabilities/development/console.htm",a:" With the Spryker Commerce OS comes an all-inclusive and fully pre-provisioned development environment on a virtual machine, based on Vagrant and VirtualBox. The command-line Console tool enables you to execute a great variety of commands, such as managing the Spryker Commerce OS installer, to run ...",t:"Console    "},"238":{i:0.000600687495688455,u:"../content/capabilities/development/cronjob-scheduling.htm",a:" To enable your system to process all requests effortlessly, the Spryker Commerce OS is equipped with a Cronjob Scheduling feature. All jobs can be scheduled and executed automatically or manually. Jobs are versioned and can easily be changed by your own developers. Spryker uses Jenkins for cronjob ...",t:"Cronjob Scheduling    "},"239":{i:0.000511153229579791,u:"../content/capabilities/development/data-feed.htm",a:" BETA version\n This (Undefined variable: General.bundle/module) is still in development. For questions and inquiries please contact  academy@spryker.com DataFeed module help to query abstract products, categories, prices, availability data and related information for exporting or processing. The ...",t:"Data Feed Modules    "},"240":{i:0.000600687495688455,u:"../content/capabilities/development/development-tools.htm",a:" The Spryker Commerce OS provides your developers with a range of coding tools that make sure your OS run smoothly.\n   - Code sniffer: This will validate the code style\n   - Architecture sniffer: Checks whether the code follows the Spryker architecture\n  -  Code generator: Lets you generate modules ...",t:"Development Tools    "},"241":{i:0.000600687495688455,u:"../content/capabilities/development/devvm.htm",a:" With the Spryker Commerce OS comes an all-inclusive and fully pre-provisioned development environment on a virtual machine, based on Vagrant and VirtualBox.\nThe command-line Console tool enables you to execute a great variety of commands, such as managing the Spryker Commerce OS installer, to run ...",t:"DevVM (Development Virtual Machine)    "},"242":{i:0.000511153229579791,u:"../content/capabilities/development/dummy-payment.htm",a:" Do not use this code for production but you can use it as a starting point for new payment integrations. What is the DummyPayment for: it brings a simple state machine it shows how to integrate payment into the system it shows how to handle refunds it allows to test checkout process in several ways ...",t:"Dummy Payment    "},"243":{i:0.000511153229579791,u:"../content/capabilities/development/errorhandler.htm",a:" The Spryker Commerce OS uses a dedicated error handling mechanism to collect detailed error related information. The ErrorHandler handles notices, warnings and other types of minor issues usually not thrown as exceptions as strict as more serious errors. By default, they all throw meaningful ...",t:"ErrorHandler    "},"244":{i:0.00378355655190014,u:"../content/capabilities/development/flysystem.htm",a:" The Flysystem module integrates Spryker with the  thephpleague/flysystem  vendor package. It handles operations, flysystem adapter configuration and provides a FlysystemFilesystemBuilderPluginInterface, where the build() method is expected to return a concrete implementation of the ...",t:"Flysystem    "},"245":{i:0.000817928323601569,u:"../content/capabilities/development/importer.htm",a:"Importer  Easily import your business logics and data, such as Product Information, Customer Base, Categories and many more into the Spryker Commerce OS.",t:"Importer    "},"246":{i:0.00340741704019719,u:"../content/capabilities/development/install-tool.htm",a:" Spryker offers an install tool which can be used to install the system as described in the install recipe file(s). Installation Install the module with composer by running the following command: \n        composer require spryker/install\n         After the installation you can run the command with ...",t:"Install Tool    "},"247":{i:0.000511153229579791,u:"../content/capabilities/development/installer.htm",a:" The Installer module is responsible of managing the installment process of required database data  in any environment. Plugin Stack You define the installer plugins of the bundles you want to include in the Pyz ImporterDependencyProvider: \u003c?php\nnamespace Pyz\\Zed\\Installer;\n\nuse ...",t:"Installer    "},"248":{i:0.000511153229579791,u:"../content/capabilities/development/logger.htm",a:" Spryker contains a  PSR-3  compatible logger which can be customized to any needs. You can use the logger everywhere in the system, as in the example below: \u003c?php\n\nuse Spryker\\Shared\\Log\\LoggerTrait;\n\nclass MyClass\n{\n\n    use LoggerTrait;\n\n    public function myFunction()\n    {\n        // This will ...",t:"Logger    "},"249":{i:0.000511153229579791,u:"../content/capabilities/development/modules.htm",a:" A module is a group of files (PHP classes, test classes, configuration files, CSS files, etc) that refer to one concept and it’s written in a way that it makes it usable by other modules. Modules can be logically divided into categories where some are mandatory and necessary for running the OS and ...",t:"Module Guide    "},"250":{i:0.000511153229579791,u:"../content/capabilities/development/sequence-number.htm",a:" \n    Sometimes it should be ensured for a project that the just generated number is not used for the same purpose twice.\n    Spryker provides Sequence Number module which handles the unique number generation.\n General Usage The sequence number facade contains ::generate() method which provides a ...",t:"Sequence Number    "},"251":{i:0.000511153229579791,u:"../content/capabilities/development/spryker-middleware.htm",a:" Overview Spryker Middleware is a constructor that allows you to set up a linear data processing flow, also referred to as pipeline, for import/export of data from some system to shop, or from shop to some system. For example, it can be used for importing products to a shop, or exporting orders from ...",t:"Spryker Middleware    "},"252":{i:0.000511153229579791,u:"../content/capabilities/development/zed-request.htm",a:" This module is used to handle requests from Yves to Zed and the responses from Zed. Internally it makes use of the well known  Guzzle  library. HandlerStackContainer Guzzle provides a way to add a so called middleware. It makes use of a handler stack where you can push a middleware to. For more ...",t:"Zed Request  "},"253":{i:0.000526670431573585,u:"../content/capabilities/gift_cards/gift-cards.htm",a:"Gift Cards ",t:"Gift Cards "},"254":{i:0.000958824560123107,u:"../content/capabilities/gift_cards/gift-card-purchase-management.htm",a:" The simple Gift Cards feature can help you increase website traffic, gain new customers and boost brand awareness. The purchase of a gift card generates an individual code that can then be used as a payment method during checkout. \nWhen paying with a gift card, customers are enabled to only use ...",t:"Gift Card Purchase and Management (Purchase, Redeem, Partial Redemption) "},"255":{i:0.00094563488540602,u:"../content/capabilities/gift_cards/gift-cards-purchase-redeeming.htm",a:" Gift Cards are sensible data and can be used to pay orders, therefore please keep in mind that they should be protected just like real money. This article describes general concepts of gift cards, their purchase and redeeming process as well as various use case scenarios. Introduction In the ...",t:"Gift Cards Purchase and Redeeming "},"256":{i:0.000526670431573585,u:"../content/capabilities/industry_partner_integrations/industry-partner-integrations.htm",a:"Industry Partner Integrations To speed up processes and simplify the daily management of your shop, you can integrate a great variety of third party solution providers such as shipping, payment and analytics.",t:"Industry Partner Integrations"},"257":{i:0.000526670431573585,u:"../content/capabilities/internationalization/internationalization.htm",a:"Internationalization ",t:"Internationalization  "},"258":{i:0.000511153229579791,u:"../content/capabilities/internationalization/glossary/glossary.htm",a:" In the Glossary you can easily store basic text information in different languages so your customers can switch to their preferred one. In the shop, all stored text keys will automatically be adjust, once language is switched. By default, languages are identified by a locale, e.g. de_DE meaning ...",t:"Glossary - Language Translation    "},"259":{i:0.000655980448188534,u:"../content/capabilities/internationalization/glossary/glossary-keys-use.htm",a:" One of the usages of the glossary keys in the Shopp Application is for rendering translated content. For allowing to render translated content, a dedicated extension for the twig template engine is available to be used. You can see bellow how you can add translated content in Yves  \u003cdiv ...",t:"Using Glossary Keys    "},"260":{i:0.000655980448188534,u:"../content/capabilities/internationalization/glossary/glossary-keys.htm",a:" Glossary keys present two layers of persistence: SQL database storage in-memory key-value storage (Redis) In this section we’ll exemplify the usage of the functionality for managing the glossary keys from the backoffice user interface and the usage of them for the Yves interface through twig ...",t:"Managing Glossary Keys    "},"261":{i:0.000655980448188534,u:"../content/capabilities/internationalization/glossary/glossary-how-translations-managed.htm",a:" The key concept for rendering web pages with translated content very fast and with limited resource usage is using a key-value storage. Yves has no connection to Zed’s SQL database and it fetches all dynamic data from a key-value storage(Redis) and a search engine(Elasticsearch). This data contains ...",t:"How Translations are Managed - Glossary    "},"262":{i:0.00872428124364221,u:"../content/capabilities/internationalization/currency.htm",a:" \nThe Currency module provides an easy way to retrieve information about a currency given as an ISO code.\n The methods in the CurrencyFacade will always return an instance of the CurrencyTransfer. You can get any currency by its ISO code or the current configured currency.\n\n Usage\n CurrencyFacade ...",t:"Currency    "},"263":{i:0.000511153229579791,u:"../content/capabilities/internationalization/ht-setup-stores-multiple-locals.htm",a:" Multiple Locales This article describes the steps that you need to consider when you have to setup stores with multiple locales.\n Configure Locales for Store\n The stores configuration can be found in the config/Shared/stores.php file. You can find out more about store configuration here.\n\n For each ...",t:"HowTo - Setup Stores with Multiple Locales    "},"264":{i:0.000660377006427563,u:"../content/capabilities/internationalization/international-tax-rates-sets.htm",a:"International Tax Rates and Sets  Align your business with international tax standards by defining tax rates and sets. Determine country-based tax rates for products, options and shipments, that will automatically be applied to the respective shops.",t:"International Tax Rates and Sets    "},"265":{i:0.000660377006427563,u:"../content/capabilities/internationalization/multiple-currencies-per-store.htm",a:" The Spryker Commerce OS lets you to define multiple currencies per store for product, product option and shipping method. \nA product can for example cost 5 EUR in Germany, 6 EUR in France and 5 CHF in Switzerland. \nYour customers may easily choose between these different currencies. All prices on ...",t:"Multiple Currencies per Store    "},"266":{i:0.000660377006427563,u:"../content/capabilities/internationalization/multiple-stores.htm",a:" With the Spryker Commerce OS you can freely create Multiple Stores for different scenarios that suit your business needs. Build one Store that services multiple countries and languages or setup a different store for each region. Easily share abstract products, discounts and other logics and code ...",t:"Multiple Stores    "},"267":{i:0.000526670431573585,u:"../content/capabilities/inventory_management/inventory-management.htm",a:"Inventory Management ",t:"Inventory Management    "},"268":{i:0.00287080721178272,u:"../content/capabilities/inventory_management/about-inventory.htm",a:" Inventory is the amount of products you offer to your customers. These products are catalogued and divided into items that are in stock and reserved. The stock value is the physical amount of products you have in your warehouse, whereas availability is an aggregated value per store which reflects ...",t:"Inventory    "},"269":{i:0.00287080721178272,u:"../content/capabilities/inventory_management/availability.htm",a:" For most of the e-commerce platforms stock does not reflect real availability of products, since stock is just the physical number of products in your warehouse which does not take reserved products into account. In contrast to stock, availability considers not just number of products in the ...",t:"Availability    "},"270":{i:0.000734988894851449,u:"../content/capabilities/inventory_management/multiple-warehouse-stock.htm",a:" Your product\u0027s availability is calculated on a per-store basis, meaning you can manage stocks across all international entities from a single interface and make logistics management more efficient. If you have multiple warehouses for storage, your products can have multiple stock quantities to ...",t:"Multiple Warehouse Stock Management    "},"271":{i:0.000734988894851449,u:"../content/capabilities/inventory_management/stock-availability-management.htm",a:" The fully automated Stock calculation takes into consideration products that are reserved in open orders when defining availability. Also, you can define never-out-of-stock products, such as digital downloads.\nIn contrast to Stock, Availability considers not only the number of products in the ...",t:"Stock and Availability Management    "},"272":{i:0.00173127454908435,u:"../content/capabilities/inventory_management/stock.htm",a:" Stock defines physical amount of products you have in your whorehouse. This article will tell you how the stock module works and how product stock is calculated. Multiple Storage Locations Spryker allows to define several storage locations in which the products are being stored. For a product we ...",t:"Stock    "},"273":{i:0.000526670431573585,u:"../content/capabilities/mailing_and_notifications/mailing-notifications.htm",a:"Mailing and Notifications ",t:"Mailing and Notifications  "},"274":{i:0.000511153229579791,u:"../content/capabilities/mailing_and_notifications/email-service-connection.htm",a:" Keep your customers updated with a variety of emails you can either send via the internal SMTP system or an external email provider of your choice. Automated emails regarding order status, shipping or newsletters are just a few examples of Emails to support the purchase process and increase brand ...",t:"E-mail Service Connection  "},"275":{i:0.000720542160714197,u:"../content/capabilities/mailing_and_notifications/mail-create-provider-plugin.htm",a:" The provider class is used to define the Mail Provider you want to use. As each provider behaves differently the provider class will also look different accordingly. Create a class which implements MailProviderPluginInterface. After that  register  your provider in the Mail module.",t:"Create a MailProviderPlugin  "},"276":{i:0.000720542160714197,u:"../content/capabilities/mailing_and_notifications/mail-create-type-plugin.htm",a:" MailType is a class used to build the entire MailTransfer through an easy to use interface. Create the MailTypePlugin within the module which should send out a email and implement MailTypePluginInterface. Then just setup your email in the build() method. Within the build() method you have access to ...",t:"Create a MailTypePlugin  "},"277":{i:0.000615847695146994,u:"../content/capabilities/mailing_and_notifications/mail-how-to-send.htm",a:"The following example represents a real-world scenario: CustomerRegistration. A Customer goes through the registration process in your frontend (Yves) and all customer information is sent to Zed. Zed uses the information to register the customer. Once the registration is completed, the customer will ...",t:"How To Send a Mail"},"278":{i:0.00888586126473038,u:"../content/capabilities/mailing_and_notifications/mail-register-provider.htm",a:" To add your provider to the MailProviderCollection add it to MailDependencyProvider: \u003c?php\nnamespace Pyz\\Zed\\Mail;\n\n...\n\npublic function provideBusinessLayerDependencies(Container $container) \n{\n    ...\n    \n    $container-\u003eextend(self::MAIL_PROVIDER_COLLECTION, function ...",t:"Register the Mail Provider  "},"279":{i:0.000720542160714197,u:"../content/capabilities/mailing_and_notifications/mail-register-type.htm",a:" To add your MailType to the MailTypeCollection you need to add it in your MailDependencyProvider: \u003c?php\nnamespace Pyz\\Zed\\Mail;\n\n...\n\npublic function provideBusinessLayerDependencies(Container $container) \n{\n    ...\n    \n    $container-\u003eextend(self::MAIL_TYPE_COLLECTION, function ...",t:"Register a MailTypePlugin  "},"280":{i:0.000615847695146994,u:"../content/capabilities/mailing_and_notifications/mail.htm",a:" Sending mail is a standard web application task. There are many cases where an action triggers an email to be sent. These actions can be newsletter subscriptions, order placement, refunds, customer account registration, etc. The Mail module helps you to create emails to be sent. To send an email ...",t:"Mail   "},"281":{i:0.000734988894851449,u:"../content/capabilities/mailing_and_notifications/newsletter-subscription.htm",a:"Newsletter Subscription  Offer Newsletter Subscriptions to your customers to increase loyalty. Send updates on product related news, special offers or any other update you wish to share. The Spryker Commerce OS offers opt-in and opt-out options. - Different types of newsletters possible",t:"Newsletter Subscription  "},"282":{i:0.000734988894851449,u:"../content/capabilities/mailing_and_notifications/transactional-email-management.htm",a:" Keep your customers updated with a variety of emails you can either send via the internal SMTP system or an external email provider of your choice.\nAutomated Emails regarding order status, shipping or transactions are just a few examples of how you can support the purchase process and increase ...",t:"Transactional E-Mail Management  "},"283":{i:0.000526670431573585,u:"../content/capabilities/master_suite_and_custom_suite/sample-custom-suite.htm",a:"Master Suite and Custom Suite ",t:"Master Suite and Custom Suite   "},"284":{i:0.000734988894851449,u:"../content/capabilities/master_suite_and_custom_suite/choosing-a-suite.htm",a:" The Sample Suite represents a standard shop, with common functionality and work-flows to show basic features. \nYou can use the Sample Suite as a boilerplate for your own shop and customize it for your products, CI and services.\nCustom Suites are individual versions of the OS that are tailored ...",t:"Choosing the Right Suite for You   "},"285":{i:0.000734988894851449,u:"../content/capabilities/master_suite_and_custom_suite/css-class-customization.htm",a:"CSS Class Customization  You can fully customize the storefront appearance to match your CI using the CSS Classes.",t:"CSS Class Customization   "},"286":{i:0.000526670431573585,u:"../content/capabilities/media_management/media-management.htm",a:"Media Management ",t:"Media Management  "},"287":{i:0.00062307106221562,u:"../content/capabilities/media_management/asset-management.htm",a:"Asset Management  Apart from images, you can also add a great variety of other assets to your shop, like presentations, pdf documents, graphics, banners and many more. This gives you the chance to create rich, compelling and attractive content for your customers.",t:"Asset Management  "},"288":{i:0.00062307106221562,u:"../content/capabilities/media_management/image-hosting.htm",a:"Image Hosting  A high performance and fast site speed is essential to guarantee customer satisfaction. The Spryker Commerce OS ensures this by integrating images from separate hosting servers.",t:"Image Hosting  "},"289":{i:0.00062307106221562,u:"../content/capabilities/media_management/product-image-management.htm",a:" Make your shop more appealing and give your customers a better idea of what they are buying with Images and Image Sets. Group several images into sets and link them to products. One product can have several named and localized sets of images, for example to present standard or seasonal highlights. ...",t:"Product Image Management  "},"290":{i:0.00062307106221562,u:"../content/capabilities/media_management/video.htm",a:"Video  Enrich your content by embedding Videos into CMS Blocks and Pages. Like Images and Assets, Videos need to be hosted on a separate platform to ensure high site speed.",t:"Video  "},"291":{i:0.000526670431573585,u:"../content/capabilities/multi-channel/multi-channel.htm",a:"Multi-Channel ",t:"Multi-Channel  "},"292":{i:0.000734988894851449,u:"../content/capabilities/multi-channel/multiple-touchpoint-integration.htm",a:"Multiple Touchpoint Integration  With the Spryker Commerce OS you can flexibly integrate any and as many customer facing Touchpoints you wish. Always stay ahead of your competition with i.e. voice, car, bot or smart home commerce integrations.",t:"Multiple Touchpoint Integration  "},"293":{i:0.000734988894851449,u:"../content/capabilities/multi-channel/responsive-design.htm",a:"Responsive Design  Customers visiting your store from a mobile device will be able to smoothly navigate and experience a seamless shopping journey, thanks to the high-end responsive design of the Spryker Commerce OS.",t:"Responsive Design  "},"294":{i:0.000526670431573585,u:"../content/capabilities/navigation/navigation.htm",a:"Navigation ",t:"Navigation  "},});