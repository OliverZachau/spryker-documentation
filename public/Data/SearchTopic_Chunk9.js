define({"661":{i:0.00204006750901601,u:"../content/capabilities/search_and_filter/search-4-0.htm",a:" The latest version of this module can be found in  Search      section One of the most important features in an e-commerce application is to give the customer the ability to find the specific products. Depending on how easy it is to find the products the customer is searching for and how relevant ...",t:"Search 4.0"},"662":{i:0.00117000446591553,u:"../content/capabilities/order_management/url-handling-new-entity.htm",a:" The following information describes how to handle URLs for other types of entities that Spryker core provides. Prerequisites Before you begin, make sure the target entity is already in your database (the one to you would like to assign URLs to). In the examples below we\u0027ll call this entity ...",t:"Handling New Types of Entity URLs "},"663":{i:0.000528055286175855,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-checkout.htm",a:" The next step is to integrate the invoice payment into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector that will inject the invoice form and handler into the Checkout module:\n Click here to expand the code sample \u003c?php\n\nnamespace ...",t:"HowTo — Integrate Invoice Payment into Checkout"},"664":{i:0.00304487145807912,u:"../content/capabilities/development/queue/queue-benefits.htm",a:" The following is a list of the Queus System’s benefits:\n \nAsynchronous: Message processing can be offloaded to different times to prevent bottlenecks and run when necessary.\n Decoupling: The queue provides separate layers for data and processing\n Scalability: Adding more processes for receiving and ...",t:"Queue Benefits   "},"665":{i:0.000602954970844488,u:"../content/capabilities/mailing_and_notifications/mail-how-to-send.htm",a:"The following example represents a real-world scenario: CustomerRegistration. A Customer goes through the registration process in your frontend (Yves) and all customer information is sent to Zed. Zed uses the information to register the customer. Once the registration is completed, the customer will ...",t:"How To Send a Mail"},"666":{i:0.00398348673049867,u:"../content/capabilities/development/collector/collector-types.htm",a:" Data Collection\n\nData aggregation is a complex process of transforming scattered data between different resources, into a new one, usually smaller then the input. There are two basic Collector Types, depending on the way the data is being collected.\n\n AbstractPdoCollector - uses PHP Data Objects ...",t:"Collector Types "},"667":{i:0.00398348673049867,u:"../content/capabilities/development/collector/collector-sched-collector-jobs.htm",a:" The cronjob file jobs.php stores the configuration related to collectors.\n\n \u003c?php\n$jobs[] = [\n    \u0027name\u0027 =\u003e \u0027export-search\u0027,\n    \u0027command\u0027 =\u003e \u0027$PHP_BIN vendor/bin/console collector:search:export\u0027,\n    \u0027schedule\u0027 =\u003e \u0027*/10 * * * *\u0027,\n    \u0027enable\u0027 =\u003e false,\n    \u0027stores\u0027 =\u003e $allStores,\n];\n?\u003e In the ...",t:"Scheduling Collector Jobs "},"668":{i:0.000509355554943956,u:"../content/capabilities/product_management/product_relation/product-relation-building-your-own.htm",a:"To create a new relation type, modify the Yves and Zed applications:\n\n Zed:\n\n Create new relation type in \\Spryker\\Shared\\ProductRelation\\ProductRelationTypes as a new constant type for example TYPE_RELATION_NEW also include to getAvailableRelationTypes returned array. After this you can able select ...",t:"Building Your Own Product Relation Type   "},"669":{i:0.0016135385641547,u:"../content/capabilities/shipment/mg-shipment.htm",a:"Upgrading from Version 5.* to Version 6.* In version 6, multi-currency prices are introduced for shipment methods, allowing to set up different net and gross price per shipment method for each preconfigured currency. The spy_shipment_method.default_price database column becomes deprecated. Shipment ...",t:"Migration Guide - Shipment"},"670":{i:0.00185234643497401,u:"../content/capabilities/product_management/mg-product-option.htm",a:"Upgrading from Version 5.* to Version 6.* Update spryker/product-option to at least version 6.0.0. Install/Update spryker/currency to at least version 3.0.0. You can find additional information to currency module upgrade:  here . Install/Update spryker/price to at least version 5.0.0. Update ...",t:"Migration Guide - Product Option"},"671":{i:0.000539488817760987,u:"../content/capabilities/internationalization/glossary/glossary-keys.htm",a:" Glossary keys present two layers of persistence: SQL database storage in-memory key-value storage (Redis) In this section we’ll exemplify the usage of the functionality for managing the glossary keys from the backoffice user interface and the usage of them for the Yves interface through twig ...",t:"Managing Glossary Keys    "},"672":{i:0.000655067321330758,u:"../content/capabilities/development/event/event-listen.htm",a:" There are two ways to listen to events, using direct listeners or subscribers. The difference between these two is that a subscriber allows the module providing the subscriber to wire up the handlers in the module that owns it without touching the EventDependencyProvider exception’s initial ...",t:"Listening to Events  "},"673":{i:0.000677671359403762,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-fe.htm",a:" Creating the Form\n In Yves, we’ll start by building the form. Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, inside the Form/DataProvider/ folder:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"HowTo - Implement Invoice Payment Front End   "},"674":{i:0.000872291324520401,u:"../content/capabilities/order_management/url.htm",a:"The URL module handles dynamic URLs for entities that appear on the front-end (Yves). At the moment, Spryker core provides URL handling for products, CMS pages, categories and URL redirects. The URLs are stored in one database table and each is unique. The database structure for storing URLs looks ...",t:"URL   "},"675":{i:0.00401948205224698,u:"../content/capabilities/checkout/checkout-process.htm",a:" Checkout Process In order to use checkout in Yves it should be correctly configured and dependencies should be provided. Each step can have a form, a controller action, the implementation of the step logic and Twig template to render the HTML. Forms - current step form collection. Controller action ...",t:"Checkout Process "},"676":{i:0.0014385222081123,u:"../content/capabilities/order_management/state_machine/state-machine-zed-presentation.htm",a:" To add manual trigger button or history for items, you need to add some implementation. State machine provides methods for triggering events and for retrieving history. StateMachineFacade::processedStateMachine(StateMachineItemTransfer[]) updates the given array of items with data from state ...",t:"Updating Presentation in Zed - State Machine    "},"677":{i:0.00386731847756587,u:"../content/capabilities/development/file_system/filesystem.htm",a:" The FileSystem Service provides an abstraction for file systems. It uses the same interface to access different types of file systems, regardless of their location or protocol. The Flysystem module provides plugins for  thephpleague/flysystem  vendor package and implement FileSystem\u0027s plugin ...",t:"File System  "},"678":{i:0.000749894572044852,u:"../content/capabilities/order_management/sales/mg-sales-aggregator.htm",a:" Upgrading from Version 4.* to Version 5.* SalesAggregator version 4 is last version to be released for this module. Apart from future bug fixes, it will no longer be developed and Core will no longer use it to get order totals anymore. There are two steps to the two migration process. The first is ...",t:"Migration Guide - SalesAggregator    "},"679":{i:0.00145505535167643,u:"../content/capabilities/promotions_and_discounts/discount-2-0.htm",a:" The latest version of this module can be found here  Discount     The Discount module is responsible of managing discounts in the Spryker OS. The schema below illustrates how discounts are modeled in Zed’s database. Discount Types There are two types of discounts: fixed amount discount ( e.g. 10€ ...",t:"Discount - Version 2.0    "},"680":{i:0.00355596734740814,u:"../content/capabilities/order_management/state_machine/state-machine-implementing-plugin.htm",a:" To start using state machine, you need create a new plugin by implementing the  StateMachineHandlerInterface. This plugin is used when there is need for additional information from client or some action happens and the client needs to be notified about it. List of interface methods that need to be ...",t:"Implementing the Plugin - State Machine    "},"681":{i:0.00280540923589076,u:"../content/capabilities/cart/calculation/calculation-data-structure.htm",a:" The following diagram illustrates the Calculation data structure.   Quote Transfer\n QuoteTransfer is the main data transfer object used in Cart, Calculation, Checkout and when order is placed. This object is created when first item is added to the cart.  The entire data object is stored into the ...",t:"Calculation Data Structure    "},"682":{i:0.000439938160883324,u:"../content/capabilities/master_suite_and_custom_suite/sample-custom-suite.htm",a:"Sample Suite and Custom Suite ",t:"Sample Suite and Custom Suite   "},"683":{i:0.00304487145807912,u:"../content/capabilities/development/queue/queue-task.htm",a:" The Queue module provides a specific command for listening to the queues, fetching messages and triggering registered processors, by running this command you will see what messages are going to be consumed and passed to the plugins.\n\n The command syntax is as follows:\n\n ./vendor/bin/console ...",t:"Queue Task  "},"684":{i:0.000677671359403762,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-fe-be-shared.htm",a:" As you can see, we need to identify the new payment type through some unique constants which we’re going to define under the Shared namespace, since they’re needed both by Yves and Zed.\n\n Create the PaymentMethodsConstants interface in the Shared namespace, where you’ll define these constants.\n\n ...",t:"HowTo - Implement Invoice Payment - Shared Implementation   "},"685":{i:0.00125695603904115,u:"../content/capabilities/cart/calculation/calculation.htm",a:" Spryker Commerce OS uses the Calculation module to calculate the cart totals that are displayed in the cart/checkout or when the order is placed.\nIt\u0027s also used to recalculate the order totals after refund.\n The calculation module extensively uses plugins to inject calculation algorithms.\n How ...",t:"Calculation    "},"686":{i:0.000792827034189702,u:"../content/front-end_developer_guide/demoshop/twig_templates/twig-best-practices.htm",a:" Include vs Macros vs Embed\n With includes, you can include an entire template. The template has access to any template variables that are currently in scope.\n\n With macros, you are defining a kind of function within Twig that can render a particular component given appropriate objects.\n\n So you ...",t:"Best Practices - Twig Templates "},"687":{i:0.00159356476818096,u:"../content/industry_partners/payment/arvato/v1_0/arvato-1-0.htm",a:" The purpose of developing the risk solution services is to provide a complete and comprehensive risk management\n    for the eCommerce/mail-order industry, contributing to a high level of modularization and automation. Besides the use\n    of pre-configured service modules for risk management, risk ...",t:"Risk Solution Services Integration - Arvato 1.0   "},"688":{i:0.00489625190878535,u:"../content/capabilities/crm/mg-customer.htm",a:"   Upgrading from version 6.* to version 7.0 Case insensitivity for queries containing filterByEmail conditions will be out of the box for the Customer module.\n 1. Regenerate Propel Models \n                    To apply the fix, you need to regenerate Propel models. During this migration table ...",t:"Migration Guide - Customer  "},"689":{i:0.00374424463963668,u:"../content/capabilities/cms/cms_widget/available-widgets.html",a:" Currently there are four widgets provided by default in Spryker shop: Product (abstract), Product Set, Product Group and Product Search. They can be found in Administration Interface under Content Management-\u003ePage-\u003e Edit Placeholders-\u003e Content tab. The rules for widget creation are provided in Cms ...",t:"Available Widgets  "},"690":{i:0.000509355554943956,u:"../content/capabilities/product_management/product_relation/product-relation-types.htm",a:" In Spryker currently there are two types of relations:\n\n Related-products, related products displayed in the product detail page for the currently selected abstract product.\n Up-selling, related products displayed in the cart overview page, related products are from a list of abstract product ids ...",t:"Product Relation Types    "},"691":{i:0.000509355554943956,u:"../content/capabilities/product_management/product_relation/product-relation-yves-datatastore.htm",a:" The product relation collector exports relations to the Yves data store.  This collector is located in the ProductRelationCollector module.\n \nInclude this module in your composer.json file and update. Then add the plugin ProductRelationCollectorPlugin from this module to ...",t:"Yves Datastore Collector - Product Relation    "},"692":{i:0.000766429094244828,u:"../content/capabilities/development/event/event-adding.htm",a:" When adding an event, make sure you first decide what kind of events you want to trigger in your code. Events are stored in a class for later use, by adding its literal string value (ModuleName.subject.action). This value uniquely identifies an event in the event module, and all listeners attached ...",t:"Adding Events  "},"693":{i:0.000945417382536716,u:"../content/capabilities/cart/calculation/calculation-3-0.htm",a:" The latest version of this module can be found here  Calculation     Spryker uses the Calculation module to calculate the cart totals that are displayed in the cart/checkout or when the order is placed.\n\n The calculation module extensively uses plugins to inject calculation algorithms.\n How ...",t:"Calculation 3.0    "},"694":{i:0.000826485253305906,u:"../content/capabilities/development/mg-rabbitmq.htm",a:" Upgrading from Version 0.* to Version 1.* Version 1 of the RabbitMq module  Configuration \n            The configuration codes have moved from RabbitMqDependencyProvider to RabbitMqConfiguration.\n         RabbitMqOption TransferObject \n            RabbitMqOption transfer has changed: bindingQueue ...",t:"Migration Guide - RabbitMQ  "},"695":{i:0.000742416367901781,u:"../content/capabilities/search_and_filter/dynamic-filters-functionality.htm",a:" ML Multi-language In Zed there’s a section (Search and Filters -\u003e Filter Preferences) for managing the product attributes that you’d like to filter by in the shop. There are several filter types that the framework supports at the moment: single-select: filter for one value at a time (e.g. radio ...",t:"Dynamic Filters Functionality"},"696":{i:0.003685136071617,u:"../content/capabilities/order_management/state_machine/state-machine-cronjob.htm",a:" There are three console commands dedicated for the state machine: state-machine:check-condition - checks all the states that have a condition without event and triggers them. state-machine:check-timeout - check timeout expired items and triggers event for them. state-machine:clear-locks - clears ...",t:"Cron Jobs - State Machine    "},"697":{i:0.000663667035069242,u:"../content/capabilities/payment/dummy-payment.htm",a:" Do not use this code for production but you can use it as a starting point for new payment integrations. What is the DummyPayment for: it brings a simple state machine it shows how to integrate payment into the system it shows how to handle refunds it allows to test checkout process in several ways ...",t:"Dummy Payment    "},"698":{i:0.00050334432912951,u:"../content/capabilities/back_office/manage-customer-accounts.htm",a:" ML Multi-language Customer Accounts are the area of the Administration Interface where you can view and edit customer accounts, see details and check order history. From Customer Accounts you can group customers to target them for exclusive or limited offers.  How are Accounts Created?\n Customers ...",t:"Manage Customer Accounts"},"699":{i:0.00146813971862418,u:"../content/capabilities/cms/cms_block/mg-cms-block-category-connector.htm",a:"Migration Guide - CMS Block Categor Connector  Upgrading from Version 1.* to Version 2.* Due to introducing the CMS Block positioning and CMS Block templates for Category, the CMS Block Category Connector module now requires Category \u003e=4.0. The migration will contain the following steps: New module ...",t:"Migration Guide - CMS Block Category Connector"},"700":{i:0.00264629043723073,u:"../content/capabilities/cart/calculation/mg-calculation.htm",a:" Upgrading from Version 3.* to Version 4.* To upgrade from 3* to 4*, composer update your calculator to version 4. Updating Calculator Stacks In the new version there are two new calculator stacks, getQuoteCalculatorPluginStack and getOrderCalculatorPluginStack. They are both defined in ...",t:"Migration Guide - Calculation    "},"701":{i:0.000585296239659889,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-implement-prepayment.htm",a:" Prepayment\n This article describes the steps that you need to consider when you need to implement the prepayment method without integrating with a third party payment service provider.\n In this HowTo we will add a new module called PaymentMethods.\n\n If this is you first time creating a new module, ...",t:"HowTo - Implement Prepayment   "},"702":{i:0.000766429094244828,u:"../content/capabilities/development/event/event-priority.htm",a:" The Event Collector \\Spryker\\Service\\Event\\Dependency\\EventCollectionInterface uses a priority queue store events so each that event can have different priority and will be executed in correct order when triggered. For example: \u003c?php\n$eventCollection\n    ...",t:"Listener Priority  "},"703":{i:0.000585296239659889,u:"../content/capabilities/payment/how_to_implement_direct_debit/ht-implement-dd.htm",a:" This article describes the steps how to implement direct debit payment method without integrating with a third party payment service provider.\n For this example, we will add a new module called PaymentMethods.\n\n If it is your the first time creating a new module, check out the  tutorial on creating ...",t:"HowTo - Implement Direct Debit Payment   "},"704":{i:0.00309535032846078,u:"../content/capabilities/cms/cms_widget/cms-widget.htm",a:" With CMS content widgets we are bringing more power to CMS pages and blocks. You can easily include placeholders to display products, product groups and products sets in CMS pages and blocks. Multiple templates allow you to define which template is used per widget. So, you can for example apply ...",t:"CMS Widget   "},"705":{i:0.00371059918322453,u:"../content/capabilities/inventory_management/about-inventory.htm",a:" Inventory is the amount of products you offer to your customers. These products are catalogued and divided into items that are in stock and reserved. The stock value is the physical amount of products you have in your warehouse, whereas availability is an aggregated value per store which reflects ...",t:"Inventory    "},"706":{i:0.000454632685022577,u:"../content/capabilities/development/zed-request.htm",a:" This module is used to handle requests from Yves to Zed and the responses from Zed. Internally it makes use of the well known  Guzzle  library. HandlerStackContainer Guzzle provides a way to add a so called middleware. It makes use of a handler stack where you can push a middleware to. For more ...",t:"Zed Request  "},"707":{i:0.0061066357270438,u:"../content/capabilities/development/collector/collector-development.htm",a:" The Collector module provides mechanisms to manage data consumed by front-end application.\n\nTo populate the data stores, 4 steps are required:\n\n Touch\n \nConfigure\n Collect\n Touch\n In order for anything to be synchronized, first it has to be marked (touched) via the Touch mechanism. Each collector ...",t:"Development - Collector "},"708":{i:0.000528055286175855,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-fe-implementation.htm",a:" Create a form\n In Yves, we start by building the form.  Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, inside the Form/DataProvider/ folder:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"Direct Debit Front-end Implementation   "},"709":{i:0.000454632685022577,u:"../content/capabilities/development/error-handler.htm",a:" The Spryker Commerce OS uses a dedicated error handling mechanism to collect detailed error related information. The ErrorHandler handles notices, warnings and other types of minor issues usually not thrown as exceptions as strict as more serious errors. By default, they all throw meaningful ...",t:"ErrorHandler    "},"710":{i:0.000792827034189702,u:"../content/capabilities/product_management/product_group/product-group-under-the-hood.htm",a:" Database Schema The ProductGroup module provides spy_product_group table that stores product groups. Product group entities have only the id_product_group field, because we don’t need to display or refer to any groups in any way. The only necessary details for a group are the abstract products that ...",t:"Product Group - Under The Hood    "},"711":{i:0.00050334432912951,u:"../content/capabilities/back_office/company-account-management.htm",a:" In a B2B world, your direct customers have a different need from an end-customer when it comes to ordering processes, permissions, and roles. Therefore, with the Spryker Commerce OS Company Account, the hierarchical structures and roles can easily be reflected. This enables your clients to fully ...",t:"Company Account Management"},"712":{i:0.00304487145807912,u:"../content/capabilities/development/queue/queue-job-config.htm",a:" You can also find the Worker configuration in jobs.php as part of the Demopshop  and adjust the worker command to run every minute.\n\n To adjust the worker command to run every minute:\n \u003c?php\n\n$jobs[] = [\n    \u0027name\u0027 =\u003e \u0027queue-worker-start\u0027,\n    \u0027command\u0027 =\u003e \u0027$PHP_BIN vendor/bin/console ...",t:"Queue Job Configuration  "},"713":{i:0.000454632685022577,u:"../content/capabilities/development/sequence-number.htm",a:" \n    Sometimes it should be ensured for a project that the just generated number is not used for the same purpose twice.\n    Spryker provides Sequence Number module which handles the unique number generation.\n General Usage The sequence number facade contains ::generate() method which provides a ...",t:"Sequence Number    "},"714":{i:0.00374525991893795,u:"../content/capabilities/development/queue/queue.htm",a:" Concepts Sender\t -  a program that sends messages.\n Receiver\t- a program that waits to receive messages.\n Message - \ta string or binary data  passed from Sender to Receiver.\n Message Box\t- Similar to a Mailbox, here you can store, send and receive messages.\n Introduction\n The Queue module provides ...",t:"Queue    "},"715":{i:0.00129559277217025,u:"../content/capabilities/search_and_filter/search-3-0.htm",a:" The latest version of this module can be found in  Search      section One of the most important features in an e-commerce application is to give the customer the ability to find the products that he needs. Depending on how easy it is to find the products the customer is searching for and how ...",t:"Search 3.0"},"716":{i:0.000563222825679139,u:"../content/capabilities/product_management/product_options/product-options-1.htm",a:" ML Multi-language ,  MS Multi-store ,  MC Multi-currency   \n            Product options allow to configure a product further. You can define option types and each option type can have 1 to n option values.\n            Each option value has an associated price.\n             Example \n                 ...",t:"Product Options - Version 1    "},"717":{i:0.000766429094244828,u:"../content/capabilities/development/event/event-asynch.htm",a:"Asynchronous Events  An asynchronous event can be created by using the addListenerQueued method instead of addListener. The difference is that it queues the event to be processed later by another process/consumer. You must have queue configured before using this feature, see bellow.",t:"Asynchronous Events  "},"718":{i:0.000650422986680792,u:"../content/capabilities/crm/user-rights-management.htm",a:" User and rights management is a general term that describes the security functionality for controlling user access to perform various roles throughout the system. In the Spryker Commerce OS user and rights management is implemented in the following three bundles: ACL - ACL stands for Access Control ...",t:"User and Rights Management    "},"719":{i:0.000677671359403762,u:"../content/capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-be.htm",a:" Checkout Plugins\n To integrate the invoice payment method into the checkout, we need to provide implementations for these 2 plugins: CheckoutPreCondition PaymentSaveOrder Add the following 2 plugins in Zed, under the Communication/Plugin/Checkout/ folder of the new added module.\n\n ...",t:"HowTo - Implement Invoice Payment Back End   "},"720":{i:0.00293955830779376,u:"../content/capabilities/search_and_filter/search_query.htm",a:" Once we have all necessary data in Elasticsearch, it’s time to display them in Yves. In order to achieve this, we first need to query Elasticsearch, which will return raw data for us that we need to  Process Query Result  to display it in our templates. In the SearchClient you can find the search() ...",t:"Search Query  "},"721":{i:0.000655067321330758,u:"../content/capabilities/development/event/event-configure-q.htm",a:" Implementation is already present in demoshop and all code samples can be found there. To implement an events queue: Click to expand the code sample \u003c?php\nnamespace Pyz\\Client\\RabbitMq;\n\nuse ArrayObject;\nuse Generated\\Shared\\Transfer\\RabbitMqOptionTransfer;\nuse ...",t:"Configuring an Events Queue  "},"722":{i:0.00081256004170065,u:"../content/capabilities/promotions_and_discounts/discount-excl-nonexcl.htm",a:"Exclusive and Non-Exclusive Discounts  Discounts that have the Is_Exclusive flag set with value true cannot be combined. If the cart includes more than one exclusive discount, only the discount that offers the highest discounted value will be applied. If the cart includes a mix of exclusive and ...",t:"Exclusive and Non-exclusive Discounts"},"723":{i:0.000528055286175855,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-be-implementation.htm",a:" \nPersist payment details\nThe payment details for the direct debit payment method need to be persisted in the database. We’ll define a new table to store this data; inside the Persistence/Propel/Schema/ folder in Zed add the spy_directdebit_schema.xml file with the following content: \u003c?xml ...",t:"Direct Debit Back-End Implementation   "},"724":{i:0.000509355554943956,u:"../content/capabilities/product_management/product_relation/product-relation-db-entity-relation.htm",a:" spy_product_relation.fk_product_abstract - is the product for which relation is build.  spy_product_relation.is_active - if relation is not active it will still be exported, but not visible.  spy_product_relation_product_abstract.fk_product_abstract - is the related product.  ...",t:"Database Entity Relation Schema - Product    "},"725":{i:0.00297888441734788,u:"../content/capabilities/development/flysystem.htm",a:" The Flysystem module integrates Spryker with the  thephpleague/flysystem  vendor package. It handles operations, flysystem adapter configuration and provides a FlysystemFilesystemBuilderPluginInterface, where the build() method is expected to return a concrete implementation of the ...",t:"Flysystem    "},"726":{i:0.000528055286175855,u:"../content/capabilities/payment/how_to_implement_prepayment/ht-prepayment-fe.htm",a:" Creating the Form\n In Yves, we’ll start by building the form. Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, under Form/DataProvider:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"HowTo - Implement Prepayment Front End   "},"727":{i:0.000528055286175855,u:"../content/capabilities/payment/how_to_implement_direct_debit/dd-test-implementation.htm",a:"Testing the Direct Debit Implementation  Now you are able to test the payment method you just implemented.\n\nSubmit a new order from Yves. After that you can control the flow of the order in Zed UI.",t:"Testing the Direct Debit Implementation   "},"728":{i:0.00525461131764205,u:"../content/capabilities/crm/customer-module-overview.htm",a:" The Customer entity wraps data around registered customers. Customer data is managed from the Administration Interface by the shop administration and from the shop website itself by customers. This article describes how new customers can be created and managed and how to enable specific features ...",t:"Customer Module Overview  "},});