<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>As of April 2017, Oryx replaces Antelope Introduction Oryx is the Spryker projects frontend helper. The purpose of Oryx is to simplify the asset building process, giving developers the freedom to choose and configure the preprocessors for the frontend. Oryx relies on webpack 2. Oryx for ZED If you're looking for Oryx ZED dedicated solution, see oryx-for-zed . Requirements Before installing Oryx, make sure that you have the following: nodejs version 6.x LTS npm version &gt;= 3.x or yarn version &gt;= 0.19.x Setup To install and setup Oryx, you need to add it to your project’s root folderpackage.json. To add Oryx to yourpackage.json: Open the terminal, go to your project root folder and type: npm install @spryker/oryx --save-dev
# or yarn add @spryker/oryx --dev Oryx comes with a peer dependency - webpack version &gt;= 2.x (needed when you build assets using Oryx api) Usage Once installed, Oryx can be used to enrich your webpack configuration and to programmatically execute webpack (with a formatted terminal output). The following example shows a basic Oryx integration withwebpack. webpack.config.js Use Oryx to find Spryker Yves core entry points and add them to your configuration. The followingentrySettingsconstant defines where to search for them (dirs), which patterns to adopt to spot them (patterns), the description to log in the terminal (description) and how to name the entry points (defineName(path)). To configure Oryx to look for your own entry points, change the settings accordingly or add them directly as you always do with webpack (see example below). const oryx = require('@spryker/oryx'); const entrySettings = { dirs: [path.resolve('vendor/spryker')], patterns: ['**/Yves/**/*.entry.js'], description: 'looking for entry points...', defineName: fullPath =&gt; path.basename(fullPath, '.entry.js')
} const webpackConfiguration = { // ... entry: oryx.find(entrySettings, { // your project entry points go here 'app': './path/to/app', 'commons': './path/to/commons' }), // ...
} module.exports = webpackConfiguration; build.js This file contains the programmatic call towebpackusing theoryx.build()function. Oryx will take care of printing a minimal log in the terminal console. const oryx = require('oryx');
const configuration = require('./webpack.config.js'); oryx.build(configuration); package.json Add a script into yourpackage.jsonpointing tobuild.js. { "scripts": { "yves": "node ./path/to/yves/frontend/build" }
} You can now run your script directly from the terminal console. npm run yves
# or yarn run yves API find() oryx.find(settings, [initial]) Performs a glob search into provided directories, using provided patterns and returns all the matching paths as an object {name-path} or as an array (path array). settings {object}: dirs {array[string]}: directories in which to search patterns {array[string]}: glob patterns to apply to the search glob {object} [optional]: glob system configuration (for the available options, click here) description {string} [optional]: text to log in terminal defineName(path) {function} [optional]: define the name in returned {name-path} object initial {object|array}:initial value Ifinitialis an object (orundefined,null) thefindwill return an extended {name-path} object: name: filename (ordefineName(path)returned value) path: matching absolute path Ifinitialis an array, thefindfunction will return an extended array of matching absolute paths. In this case,defineName(path)function won’t be called. Example: Yves entry default configuration const entrySettings = { dirs: [path.resolve('vendor/spryker')], patterns: ['**/Yves/**/*.entry.js'], glob: {}, description: 'looking for entry points...', defineName: fullPath =&gt; path.basename(fullPath, '.entry.js')
} build() oryx.build(configuration, [callback]) Build the assets usingwebpackand print a formatted terminal output. This functon is just a wrapper forwebpack(configuration, callback): configuration {object}: webpack configuration file callback(error, stats) {function} [optional]: function called once webpack build task is completed oryx.build(configuration, (error, stats) =&gt; { // add youre code here
}); For more control over the process feel free to use the webpack one. build.loadCompiler() oryx.build.loadCompiler(webpack, webpackVersion) Load the compiler instance used for build. webpack {object}: webpack instance object webpackVersion {string}: webpack instance object version number It is useful to load the compiler when oryx is a dependecy in a(Undefined variable: General.bundle/module)where it's mandatory to execute the build API using the webpack version specified in that(Undefined variable: General.bundle/module)'spackage.json. const oryx = require('@spryker/oryx');
const webpack = require('webpack');
const webpackVersion = require('webpack/package').version; oryx.build.loadCompiler(webpack, webpackVersion); log functions log.info(): print an info message log.task(): print a task message log.step(): print a step message log.done(): print a done message log.error(): print an error message log.debug(): print a debug message To print debug messages, setprocess.env.DEBUGvariable totrue. Assuming you have ayvesscript in yourpackage.json, you can type in terminal: DEBUG=true npm run yves
# or
DEBUG=true yarn run yves</body>
</html>