<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>As of April 2017, Oryx replaces Antelope Introduction oryx-for-zed is an extension of Oryx thatperforms a full build for Spryker Zed UIapplications. It also provides access to Zed settings and Zedwebpackconfiguration, so you can extend/change the whole building process. Requirements nodejsversion 6.x LTS npmversion &gt;= 3.x oryarnversion &gt;= 0.19.x Setup You need to add oryx-for-zed to yourpackage.json: Open the terminal, go to your project root folder and type: npm install @spryker/oryx-for-zed --save-dev
# or yarn add @spryker/oryx-for-zed --dev oryx-for-zed comes with a peer dependency:oryxversion &gt;= 1.x Usage Once installed, you can: call the builder directly from your scripts (simple builder) extend/change the settings/webpackconfiguration for your custom Zed build Simple builder The following section describes how to run run oryx-for-zed. To run run oryx-for-zed Add the following script to yourpackage.json: { "scripts": { "zed": "node ./node_modules/@spryker/oryx-for-zed/build" }
} Open the terminal and type: npm run build-zed
# or yarn run build-zed Extend/change settings Settings are extended and changed by using the onyx-for-zed API . The example below shows how to create a cuostm build: Step 1:build.js Create abuild.jsfile in your project containing your custom settings and the logic needed to get thewebpackconfiguration and run the builder: const oryx = require('@spryker/oryx');
const oryxForZed = require('@spryker/oryx-for-zed'); const myCustomZedSettings = Object.assign({}, oryxForZed.settings, { // your own settings
}); const configuration = oryxForZed.getConfiguration(myCustomZedSettings); oryx.build(configuration); Step 2:package.json Add a script into yourpackage.jsonpointing tobuild.js. { "scripts": { "build-zed": "node ./path/to/build" }
} You will now be able to… Extend/changewebpackconfiguration webpackis customised by using the onyx-for-zed API . The example below shows how to create a custom build: Step 1:webpack.config.js Create awebpack.config.jsfile in your project containing yourwebpackcustom configuration: const oryxForZed = require('@spryker/oryx-for-zed');
const oryxConfiguration = oryxForZed.getConfiguration(oryxForZed.settings); const myCustomZedConfiguration = Object.assign({}, oryxConfiguration, { // your own configuration
}); module.exports = myCustomZedConfiguration; Step 2:build.js Create abuild.jsfile in your project containing yourwebpackconfiguration and the logic needed to run the builder: const oryx = require('@spryker/oryx');
const myCustomZedConfiguration = require('./webpack.config.js'); oryx.build(myCustomZedConfiguration); Step 3:package.json Add a script into yourpackage.jsonpointing tobuild.js. { "scripts": { "build-zed": "node ./path/to/build" }
} API Settings oryxForZed.settings Contains all the basic settings used in thewebpackconfiguration. Go to the code for more details. getConfiguration() oryxForZed.getConfiguration(settings) Returns the default Zedwebpackconfiguration, based on providedsettings. Go to the code for more details. CLI args oryx-for-zed uses arguments to customise the build process. You can pass them using the terminal: npm run zed -- --arg
# or yarn run zed -- --arg Or embed them into the script section inpackage.json: { "scripts": { "build-zed": "node ./node_modules/@spryker/oryx-for-zed/build --arg" }
} Args list --dev: development mode; enablewebpackwatchers on the code --prod: production mode; enable assets optimisation/compression --boost: boost mode (experimental); build assets using eval source maps If no arg is passed, development is activated but without watchers.</body>
</html>