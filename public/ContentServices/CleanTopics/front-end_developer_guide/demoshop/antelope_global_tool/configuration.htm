<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by Oryx. You can still use Antelope however, no new development is planned for this component. A configuration file is a set of properties and methods that define how to process assets. Read more about asset build and optimization with antelope. Creating a Configuration File Configuration files can be placed anywhere inside@project/assetsfolder, but we strongly recommend to place them under the@project/assets/Automationfolder. Antelope automatically finds and loads configuration files. When you create one, follow this naming convention: &lt;application&gt;[-&lt;theme&gt;].antelope.js &lt;application&gt;(mandatory): tells Antelope which application to target; &lt;theme&gt;(mandatory, only for Yves): tells Antelope which theme to target; .antelopesuffix: tells Antelope to load this file as a webpack configuration. Examples: Yves:yves-demoshop.antelope.jswhere yves is the target application and demoshop is the target theme; Zed:zed.antelope.jswhere zed is the target application. Zed configuration We strongly discourage to create a new Zed configuration: it will override the default one provided by the Gui(Undefined variable: General.bundle/module). Writing a Configuration File Antelope useswebpacksyntax and specifications: the first thing to do before starting to write a configuration file is to learn how it works: webpack docs webpack configuration docs Antelope is simply a wrapper around webpack, therefore writing an Antelope configuration is identical to writing a webpack configuration. The code below is a simple Yves theme configuration that handlesjswithjquery, purecssstyles and images: 'use strict'; const path = require('path');
const cwd = process.cwd();
const webpack = antelope.remote('webpack');
const ExtractTextPlugin = antelope.remote('extract-text-webpack-plugin'); let config = { entry: antelope.entryPoints, resolve: { root: antelope.paths.root, }, resolveLoader: { root: antelope.paths.loaders }, output: { path: path.join(cwd, './public/Yves'), filename: '/assets/demoshop/js/[name].js' }, module: { loaders: [{ test: /\.css\??(\d*\w*=?\.?)+$/i, loader: ExtractTextPlugin.extract('style', 'css') }, { test: /\.(jpe?g|png|gif|svg)\??(\d*\w*=?\.?)+$/i, loader: 'file?name=/assets/demoshop/img/[name].[ext]', }] }, plugins: [ new ExtractTextPlugin('assets/demoshop/css/[name].css', { allChunks: true }), new webpack.ProvidePlugin({ $: 'jquery', jQuery: 'jquery', 'window.jQuery': 'jquery' }) ], watchOptions: { aggregateTimeout: 300, poll: 1000 }, debug: antelope.options.debug, watch: antelope.options.watch
}; module.exports = config; The Antelope context object As you may have noticed, previous configuration uses an object calledantelope: it is a context helper. It provides methods and properties that can be useful to properly setup a ‘webpack’ configuration. The options object (antelope.options) It provides access to theAntelopecommand line arguments. Thekeyis the argument,valueis its actual value. let config = { plugins: [], debug: antelope.options.debug, watch: antelope.options.watch
}; if (antelope.options.production) { config.plugins.push(new webpack.optimize.UglifyJsPlugin());
} The entryPoints object (antelope.entryPoints) Depending on the target application and - if available - the theme, this object provides a key/value object containing each entry point found in the project. Thekeyis the entry point filename,valueis the absolute path to it. Read more about entry points . let config = { entry: antelope.entryPoints
}; The paths object (antelope.paths) Theantelope.pathsobject provides arrays of paths. et config = { resolve: { root: antelope.paths.root, }, resolveLoader: { root: antelope.paths.loaders }
}; Root array (antelope.paths.root) Addresses each folder that contains UI modules. @project/assets @project/node_modules @core @core/&lt;(Undefined variable: General.bundle/module)-name&gt;/assets/&lt;application&gt;/node_modules @antelope/node_modules Loaders array (antelope.paths.loaders) Addresses each folder that containswebpackloaders. @project/node_modules @antelope/node_modules Remote function (antelope.remote(id)) Provides access to theAntelopemodules. You can require and use them even if they’re not in your projectspackage.jsonfile. const path = require('path');
const webpack = antelope.remote('webpack'); Available modules: webpack extract-text-webpack-plugin style-loader css-loader resolve-url-loader sass-loader file-loader url-loader organizer-loader Antelope remote provider Usingantelope.remote(id)lets you access modules of Antelope global tool. If you need an updated/different version of these modules, you can add them as your project local dev dependencies and require them using defaultrequire(id)function. You can even combine local and provided modules together. Existing Configuration Files What about an existing example? Where can I find Zed configuration? On the project level, you can find a configuration file for each theme that’s available:@project/assets/Automation/yves-*.antelope.js. Regarding Zed, the configuration file is placed inside the Gui(Undefined variable: General.bundle/module), under the@core/Gui/assets/Automation/zed.antelope.jsfolder.</body>
</html>