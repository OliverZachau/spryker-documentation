<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Build and Optimization We use Webpack and Oryx for transpiling/building the assets and to optimize the resulting output. For more onWebpackbuild process and requirements see: Key Concepts Getting started Using a Configuration Configuration Details Learn more about SprykerOryxfrontend helper: Oryx documentation Oryx for Zed documentation Automatic loading for Webpack Entry Points Oryx's globbing system , enables Webpack to automatically find and load entry points. Yves At project level, you can pass your own entry points directly in theWebpackconfiguration. We recommend to also use theoryx.find()API to import any Yves related code. This way, you will get every frontend feature developed in the core (i.e. payments method UI). const settings = { entry: { dirs: [path.resolve('vendor/spryker')], patterns: ['**/Yves/**/*.entry.js'], defineName: p =&gt; path.basename(p, '.entry.js'), description: 'looking for entry points...' }
}; const webpackConfiguration = { // ... entry: oryx.find(settings.entry, { 'your-entry-name': '/path/to/your/entry/point.js' }), // ...
}; **/Yves/**/*.entry.jsis the default pattern for Yves automatic inclusion: every filename endings with.entry.jsand contained in a parent folder calledYveswill be included bywebpackinto the build process. Zed Zed frontend is fully managed by Oryx for Zed. It relies on theoryx.find()API to automatically globb the entry point files across the project. To add or change entry points in Zed, extend the Oryx for Zed Webpack configuration . For more about Zed assets management: Oryx globbing system Oryx for Zed API</body>
</html>