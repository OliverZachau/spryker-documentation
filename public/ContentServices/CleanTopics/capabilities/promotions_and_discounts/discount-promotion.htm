<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>For marketing reasons shops sometimes give away free products depending on the cart content. This could be for example when the cart value is high to give away some free perks. Or for example when the customer buys certain product to give away some other product that is complimentary to the first one. Some other use cases are promotions like "buy one, get one for free", "buy product X, get product Y for free", "buy 10 of product X and get 1 of product X for free", etc. The products that are being given away are standard products in the catalog. With "DiscountPromotion" module you will be able to extend "Discount" module to provide this new behaviour. This module extends ZED discount UI with different discount collector type where you can enter promotion product SKU and quantity. Cart page in Yves will show promotion products below items, but only when conditions are satisfied. The quantity is the maximum number of products that can be added to cart. This also means that quantity will be displayed as a dropdown component in the cart view page. How Does It Work? The promotion discount process is split into two parts: In the first part a discount decision rule is being evaluated, and if it is "true", then discountable items are collected by collector. When discount has Promotion discount selected as collector type, then specific collector strategy will be used. This new strategy is provided by DiscountPromotion module. The new collector will check if there is a promotion item in the current quote, if it's not there, then this item will be added toQuoteTransfer::promotionItems(), this collection of promotion items is displayed in the cart page. After modifying the quote, it will return empty collection and this discount will be skipped. In the second part when promotion item is added to cart, it will go through the same process as the first time, but the difference is that when Discount promotion collector strategy is executed, it would collect cart items withItemTransfer::promotion = trueflag. And discount amount will be distributed to those items. Important note: The promotion items cannot be combined with other discounts, also those items are grouped differently in cart. Integration Guide To start using this feature, you have to do some configuration in your Zed application. First make sure you have the latest DiscountPromotion module. Usecomposer require spryker/discount-promotioncommand to install it. You also need at least"spryker/discount": "^4.5.0"for the discount module. Runvendor/bin/console transfer:generateto generate the latest transfer object. Runvendor/bin/console propel:diffto generate migration file for the database. Inspect this new file and check if only "spy_discount_promotion" has been created there. Runvendor/bin/console propel:migrateto migrate the latest "generate migration" file. Runvendor/bin/console propel:model:buildto generate new propel Entities and Query classes. To enable Discount promotions, you have to add a number of plugins to Discount module so that DiscountPromotion could extend it. Bellow is the example of DiscountDependencyProvider class. &lt;?php namespace Pyz\Zed\Discount; use Spryker\Zed\Discount\DiscountDependencyProvider as SprykerDiscountDependencyProvider; use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountFilterPromotionDiscountsPlugin; use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionCalculationFormExpanderPlugin; use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionCollectorStrategyPlugin; use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionConfigurationExpanderPlugin; use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionPostSavePlugin; use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionPostUpdatePlugin; class DiscountDependencyProvider extends SprykerDiscountDependencyProvider { /** * @return array */ protected function getDiscountableItemFilterPlugins() { return [ new DiscountFilterPromotionDiscountsPlugin(), //Filter out discountable items which have promotionItem = trye ]; } /** * @return \Spryker\Zed\Discount\Dependency\Plugin\CollectorStrategyPluginInterface[] */ protected function getCollectorStrategyPlugins() { return [ new DiscountPromotionCollectorStrategyPlugin(), //specialized collector strategy for promotion discounts ]; } /** * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountPostSavePluginInterface[] */ protected function getDiscountPostSavePlugins() { return [ new DiscountPromotionPostSavePlugin(), //Save promotion discount ]; } /** * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountPostUpdatePluginInterface[] */ protected function getDiscountPostUpdatePlugins() { return [ new DiscountPromotionPostUpdatePlugin(),//Update promotion discount ]; } /** * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountConfigurationExpanderPluginInterface[] */ protected function getDiscountConfigurationExpanderPlugins() { return [ new DiscountPromotionConfigurationExpanderPlugin(), //Expand DiscountConfigurationTransfer with Promotion discount data. ]; } /** * This plugin allows to expand DiscountConfigurationTransfer when using * * @return \Spryker\Zed\Discount\Dependency\Plugin\Form\DiscountFormExpanderPluginInterface[] */ protected function getDiscountFormExpanderPlugins() { return [ new DiscountPromotionCalculationFormExpanderPlugin(), //Expand Discount form type with new promotion discount. Adds new form fields. ]; } /** * @return \Spryker\Zed\Discount\Dependency\Plugin\Form\DiscountFormDataProviderExpanderPluginInterface[] */ protected function getDiscountFormDataProviderExpanderPlugins() { return [ new DiscountPromotionCalculationFormDataExpanderPlugin(), // Expand Discount form with additional data ]; } /** * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountViewBlockProviderPluginInterface[] */ protected function getDiscountViewTemplateProviderPlugins() { return [ new DiscountPromotionViewBlockProviderPlugin(), //Provide additional content to discount view page ]; } /** * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountViewBlockProviderPluginInterface[] */ protected function getDiscountApplicableFilterPlugins() { return [ new DiscountPromotionFilterApplicableItemsPlugin(), //Filter promotion items from decision rule ]; } } The new calculator plugin must be registered inCalculationDependencyProvider: &lt;?php namespace Pyz\Zed\Calculation; use Spryker\Zed\DiscountPromotion\Communication\Plugin\Calculation\RemovePromotionItemsCalculatorPlugin; class CalculationDependencyProvider extends SprykerCalculationDependencyProvider { protected function getQuoteCalculatorPluginStack(Container $container) { return [ new RemoveTotalsCalculatorPlugin(), new RemoveAllCalculatedDiscountsCalculatorPlugin(), new RemovePromotionItemsCalculatorPlugin(), //Removes promotion items from quote ...//other plugins ]; } } The new Cart expander plugin must be registered in: &lt;?php namespace Pyz\Zed\Cart; class CartDependencyProvider extends SprykerCartDependencyProvider { /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Cart\Dependency\ItemExpanderPluginInterface[] */ protected function getExpanderPlugins(Container $container) { return [ ... //other plugins new CartGroupPromotionItems(), //expand group key with promo item identifier ]; } } To be able to see promotion products, you have to change how cart items are rendered in Yves. TakePyz\Yves\DiscountPromotionmodule from demoshop and place it somewhere in your project. ChangeCartOperationHandler::addmethod to include promotion item flag. Like$itemTransfer-&gt;setIsPromotion((bool)$this-&gt;request-&gt;request-&gt;get('isPromo'));. Inject ProductPromotionMapperPlugin to Cart Module: &lt;?php namespace Pyz\Yves\Cart; use Spryker\Yves\DiscountPromotion\Plugin\ProductPromotionMapperPlugin; class CartDependencyProvider extends AbstractBundleDependencyProvider { const PLUGIN_PROMOTION_PRODUCT_MAPPER = 'PLUGIN_PROMOTION_PRODUCT_MAPPER'; /** * @param \Spryker\Yves\Kernel\Container $container * * @return \Spryker\Yves\Kernel\Container */ protected function providePlugins(Container $container) { ...//other plugins $container[self::PLUGIN_PROMOTION_PRODUCT_MAPPER] = function () { return new ProductPromotionMapperPlugin(); }; } } AddgetProductPromotionMapperPluginmethod to the DiscountFactory provider. &lt;?php namespace Pyz\Yves\Cart; class CartFactory extends AbstractFactory { /** * @return \Spryker\Yves\DiscountPromotion\Dependency\PromotionProductMapperPluginInterface */ public function getProductPromotionMapperPlugin() { return $this-&gt;getProvidedDependency(CartDependencyProvider::PLUGIN_PROMOTION_PRODUCT_MAPPER); } } Add call to plugin in CartController. &lt;?php namespace Pyz\Yves\Cart\Controller; /** * @method \Spryker\Client\Cart\CartClientInterface getClient() * @method \Pyz\Yves\Cart\CartFactory getFactory() */ class CartController extends AbstractController { /** * @param array|null $selectedAttributes * * @return array */ public function indexAction(array $selectedAttributes = null) { $promotionStorageProducts = $this-&gt;getFactory() -&gt;getProductPromotionMapperPlugin() -&gt;mapPromotionItemsFromProductStorage( $quoteTransfer, $this-&gt;getRequest() ); $this-&gt;viewResponse([ //other data 'promotionStorageProducts' =&gt; $promotionStorageProducts, ]); } Change twig templates to render promotion products. Since we've changed how quantity is rendered for promotion products, some cart templates in our demoshop were reorganized. Firstly make sure a promotion item twig template is called inPyz/Yves/Cart/Theme/default/cart/index.twig, this usually should be placed after cart items as in the example below: {% for cartItem in cartItems %} {% if cartItem.bundleProduct is defined %} {% include '@cart/cart/parts/cart-item.twig' with { cartItem: cartItem.bundleProduct, bundleItems: cartItem.bundleItems } %} {% else %} {% include '@cart/cart/parts/cart-item.twig' %} {% endif %} {% endfor %} //existing code {% include '@DiscountPromotion/discount-promotion/item-list.twig' %} //new include ThePyz/Yves/Cart/Theme/default/cart/parts/cart-item.twigwas also heavily modified to work with promotion products (please check our demoshop version), as cart page can be different per project. The key points that were changed: "Add to cart" button extracted toPyz/Yves/Cart/Theme/default/cart/parts/cart-add-to-cart.twig, item price information extracted toPyz/Yves/Cart/Theme/default/cart/parts/cart-item-prices.twig, cart product variants extracted toPyz/Yves/Cart/Theme/default/cart/parts/cart-product-variants.twig. Below is the demoshopPyz/Yves/Cart/Theme/default/cart/parts/cart-item.twigfile for reference. &lt;div class="callout cart-item"&gt;&lt;div class="row"&gt; {% include '@Cart/cart/parts/cart-images.twig' %} &lt;div class="small-9 large-expand columns"&gt;&lt;ul class="no-bullet"&gt; {# General data #} &lt;li class="lead"&gt;{{ cartItem.name }}&lt;/li&gt;&lt;li class="__secondary"&gt;&lt;small&gt;{{ 'cart.item.sku' | trans }} {{ cartItem.sku }}&lt;/small&gt;&lt;/li&gt; {% if bundleItems is defined %} {# Product Bundles #} &lt;li&gt;&lt;strong&gt;{{ 'cart.item.bundle.description' | trans }}&lt;/strong&gt;&lt;ul&gt; {% for bundleItem in bundleItems %} &lt;li&gt;{{ bundleItem.quantity }} x {{ bundleItem.name }} &lt;/li&gt; {% endfor %} &lt;/ul&gt;&lt;/li&gt; {% else %} {% include '@Cart/cart/parts/cart-product-variants.twig' %} {% endif %} &lt;/ul&gt;&lt;/div&gt; {% include '@Cart/cart/parts/cart-item-prices.twig' %} {% include '@Cart/cart/parts/cart-add-to-cart.twig' %} &lt;/div&gt;&lt;/div&gt; Make sureCartOperationHandlersets ID ofidDiscountPromotion. public function add($sku, $quantity, $optionValueUsageIds = []) { $itemTransfer = new ItemTransfer(); $itemTransfer-&gt;setSku($sku); $itemTransfer-&gt;setQuantity($quantity); $itemTransfer-&gt;setIdDiscountPromotion($this-&gt;getIdDiscountPromotion()); //new setter $this-&gt;addProductOptions($optionValueUsageIds, $itemTransfer); $quoteTransfer = $this-&gt;cartClient-&gt;addItem($itemTransfer); $this-&gt;cartClient-&gt;storeQuote($quoteTransfer); } protected function getIdDiscountPromotion() { return (int)$this-&gt;request-&gt;request-&gt;get('idDiscountPromotion'); } When using promotion discount with voucher code, you will get the error message that voucher is not correct. It’s because voucher code is a product offered as promotion and not yet added to cart. You have to modify\Pyz\Yves\Discount\Handler\VoucherHandler::addFlashMessagesto handle discounts with promotions. Add the following condition: namespace Pyz\Yves\Discount\Handler; class VoucherHandler extends BaseHandler implements VoucherHandlerInterface { /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param string $voucherCode * * @return void */ protected function addFlashMessages($quoteTransfer, $voucherCode) { //---new code if ($this-&gt;isVoucherFromPromotionDiscount($quoteTransfer, $voucherCode)) { return; } //----- if ($this-&gt;isVoucherCodeApplied($quoteTransfer, $voucherCode)) { $this-&gt;setFlashMessagesFromLastZedRequest($this-&gt;calculationClient); return; } $this-&gt;flashMessenger-&gt;addErrorMessage('cart.voucher.apply.failed'); } /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param string $voucherCode * * @return bool */ protected function isVoucherFromPromotionDiscount(QuoteTransfer $quoteTransfer, $voucherCode) { foreach ($quoteTransfer-&gt;getUsedNotAppliedVoucherCodes() as $voucherCodeUsed) { if ($voucherCodeUsed === $voucherCode) { return true; } } return false; } } After this you should be able to use the new discounts with promotion. Last review date: Sep. 1, 2017</body>
</html>