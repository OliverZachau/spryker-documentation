<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Upgrading from Version 5.* to Version 6.* Update/installspryker/discountto at least6.0.0version. Runvendor/bin/console transfer:generateto generate the new transfer objects. Install the new database tables by runningvendor/bin/console propel:diff. Propel should generate a migration file with the changes. Runvendor/bin/console propel:migrateto apply the database changes. Generate ORM models by runningvendor/bin/console propel:model:build. This command will generate some new classes in your project under\Orm\Zed\Discount\Persistencenamespace. It is important to make sure that they extend the base classes from the Spryker core, e.g.: \Orm\Zed\Discount\Persistence\SpyDiscountStoreextends\Spryker\Zed\Discount\Persistence\Propel\AbstractSpyDiscountStore \Orm\Zed\Discount\Persistence\SpyDiscountStoreQueryextends\Spryker\Zed\Discount\Persistence\Propel\AbstractSpyDiscountStoreQuery Each row in the newly createdspy_discount_storetable represents a connection between a Store and a Discount, meaning that a specific discount is available in that specific Store. To migrate thespy_discount_storetable, create connections between your discounts and the desired stores. Example migration for multiple (or single) stores PostgreSQL: INSERT INTO spy_discount_store (id_discount_store, fk_discount, fk_store) SELECT nextval('id_discount_store_pk_seq'), id_discount, id_store FROM spy_discount, spy_store; MySQL: INSERT INTO spy_discount_store (fk_discount, fk_store) SELECT id_discount, id_store FROM spy_discount, spy_store; To populate current Store information into the Quote transfer object, theStoreQuoteTransferExpanderPluginhas to be provided through theQuoteDependencyProvider::getQuoteTransferExpanderPlugins(). Example plugin registration &lt;?php
namespace Pyz\Client\Quote; use Spryker\Client\Quote\QuoteDependencyProvider as SprykerQuoteDependencyProvider;
use Spryker\Client\Store\Plugin\StoreQuoteTransferExpanderPlugin; class QuoteDependencyProvider extends SprykerQuoteDependencyProvider
{ /** * @param \Spryker\Client\Kernel\Container $container * * @return \Spryker\Client\Quote\Dependency\Plugin\QuoteTransferExpanderPluginInterface[] */ protected function getQuoteTransferExpanderPlugins($container) { return [ new StoreQuoteTransferExpanderPlugin(), ]; }
} To allow Discount in Administration Interface to handle multi-store concept (even if you are using single-store) a FormTypeInterface has to be provided throughDiscountDependencyProvider::getStoreRelationFormTypePlugin()to handle store relation. You can use the already implementedStoreRelationToggleFormTypePlugin. Example plugin registration &lt;?php
namespace Pyz\Zed\Discount; use Spryker\Zed\Discount\DiscountDependencyProvider as SprykerDiscountDependencyProvider;
use Spryker\Zed\Store\Communication\Plugin\Form\StoreRelationToggleFormTypePlugin; class DiscountDependencyProvider extends SprykerDiscountDependencyProvider
{ /** * @return \Spryker\Zed\Kernel\Communication\Form\FormTypeInterface */ protected function getStoreRelationFormTypePlugin() { return new StoreRelationToggleFormTypePlugin(); }
} A bug was fixed in our Demoshop implementation when displaying promotion items usingDiscountPromotion/Theme/default/discount-promotion/item-list.twig. In case you used it, please amend your implementation also to check the same variable for number of elements and iterating through. Modified version {% if promotionStorageProducts|length &gt; 0 %} &lt;div class="small-12 columns"&gt; &lt;h1&gt; {{ 'cart.promotion.items' | trans }}&lt;/h1&gt; {% for promotionStorageProduct in promotionStorageProducts %} {% include '@DiscountPromotion/discount-promotion/item.twig' %} {% endfor %} &lt;/div&gt;
{% endif %} The following classes' constructor dependencies were altered, please check if you have customized any of them or their constructor method: Calculator/Discount DiscountConfigurationHydrate DiscountPersist GeneralForm DiscountsTable The following methods were enhanced, please check if you have customized any of them: Calculator/Discount::retrieveActiveCartAndVoucherDiscounts() DiscountFormDataProvider::createDiscountGeneralTransferDefaults() DiscountConfigurationHydrate::getByIdDiscount() DiscountCommunicationFactory::getVoucherForm() The following methods/classes were removed or renamed, please check if you have customized any of them: DiscountConfigurationHydrate::setDiscountConfigurationExpanderPlugins() DiscountPersist::setDiscountPostCreatePlugins() DiscountPersist::setDiscountPostUpdatePlugins() DiscountQueryContainerInterface::queryDiscountsBySpecifiedVouchers() DiscountQueryContainerInterface::queryActiveCartRules() Business/Persistence/DiscountOrderSaver Business/Persistence/DiscountOrderSaverInterface Communication/Plugin/Sales/DiscountOrderSavePlugin DiscountFacadeInterface::saveOrderDiscounts() DiscountFacade::saveOrderDiscounts() DiscountCommunicationFactory::createGeneralFormType() DiscountCommunicationFactory::createCalculatorFormType() DiscountCommunicationFactory::createConditionsFormType() DiscountCommunicationFactory::createVoucherFormType() DiscountCommunicationFactory::createVoucherForm() CalculatorForm::getName() ConditionsForm::getName() DiscountForm::getName() GeneralForm::getName() VoucherForm::getName() DiscountCommunicationFactory::createDiscountForm() DiscountCommunicationFactory::createVoucherForm() You can find additional information on Discount module release page or by checking out our Demoshop implementation for implementation example and idea. You are ready now to use Discount Zed Admin UI and manage discounts per Store. Upgrading from Version 4.* to Version 5.* In discount module version 5 we have introduced multicurrency support for fixed discount calculation. This update also includes: Support for net/gross amounts. Currency decision rule - to filter discounts by currency. PriceMode decision rule - to filter discounts by price mode(net/gross). Database schema changes to store discount amounts and fk_store for later multi store support. Sales table changed deprecated collumn type from decimal to int as discount amounts were already stored as integers. CalculatorInterface renamed to CalculatorTypeInterface, concrete calculators Fixed and Percentage rename to FixedType and PercentageType accordingly. Run composer update spryker/discount spryker/currency spryker/store spryker/money spryker/calculation spryker/cart spryker/kernel. Install the new module to be able to use the new currency plugin. composer require spryker/cart-currency-connector Run schema migration CREATE SEQUENCE "spy_discount_amount_pk_seq"; CREATE TABLE "spy_discount_amount" ( "id_discount_amount" INTEGER NOT NULL, "fk_currency" INTEGER NOT NULL, "fk_discount" INTEGER NOT NULL, "gross_amount" INTEGER, "net_amount" INTEGER, PRIMARY KEY ("id_discount_amount") ); CREATE UNIQUE INDEX "spy_discount_amount-unique-currency-discount" ON "spy_discount_amount" ("fk_currency","fk_discount"); ALTER TABLE "spy_discount" ADD CONSTRAINT "spy_discount-fk_store" FOREIGN KEY ("fk_store") REFERENCES "spy_store" ("id_store"); ALTER TABLE "spy_sales_discount" ALTER COLUMN "amount" TYPE INTEGER; Then run console commands vendor/bin/console propel:model:build vendor/bin/console transfer:generate We have prepared a console command, discount migration script, to migrate old discount amounts to a new structure. Place it in your project discount module and include in Console module dependency provider.
This console command will move all discount amount with fixed calculator plugin to a new discount amount tables. It won't delete old values. Register a new currency plugin to reload cart items when currency is changed. Take\Spryker\Yves\CartCurrencyConnector\CurrencyChange\RebuildCartOnCurrencyChangePluginand place it to\Pyz\Yves\Currency\CurrencyDependencyProvider::getCurrencyPostChangePluginsplugin stack. This way we make sure that when currency in Yves is changed, we have updated product prices and discounts. Discount Amounts Migration Console Command &lt;?php /** * Copyright © 2017-present Spryker Systems GmbH. All rights reserved. * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file. */ namespace Pyz\Zed\Discount\Communication\Console; use Orm\Zed\Currency\Persistence\SpyCurrencyQuery;
use Orm\Zed\Discount\Persistence\SpyDiscountAmount;
use Orm\Zed\Discount\Persistence\SpyDiscountQuery;
use Spryker\Shared\Kernel\Store;
use Spryker\Zed\Discount\DiscountDependencyProvider;
use Spryker\Zed\Kernel\Communication\Console\Console;
use Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery\Criteria;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion; class MigrateDiscountsConsole extends Console
{ const COMMAND_NAME = 'discount:migrate'; const COMMAND_DESCRIPTION = 'Console command to migrate discount amounts to multi currency implementation.'; /** * @return void */ protected function configure() { $this-&gt;setName(static::COMMAND_NAME); $this-&gt;setDescription(static::COMMAND_DESCRIPTION); parent::configure(); } /** * @param \Symfony\Component\Console\Input\InputInterface $input * @param \Symfony\Component\Console\Output\OutputInterface $output * * @return void */ protected function execute(InputInterface $input, OutputInterface $output) { $discounts = SpyDiscountQuery::create() -&gt;filterByCalculatorPlugin(DiscountDependencyProvider::PLUGIN_CALCULATOR_FIXED) -&gt;useDiscountAmountQuery(null, Criteria::LEFT_JOIN) -&gt;filterByIdDiscountAmount(null,Criteria::EQUAL) -&gt;endUse() -&gt;find(); if (count($discounts) === 0) { $output-&gt;writeln('There are no discounts to migrate.'); return; } $helper = $this-&gt;getHelper('question'); $question = new ConfirmationQuestion( sprintf('Migrate %s discounts? (y|n)', count($discounts)), false ); if (!$helper-&gt;ask($input, $output, $question)) { $output-&gt;writeln('Aborted.'); return; } $currencyIsoCode = Store::getInstance()-&gt;getCurrencyIsoCode(); $currencyEntity = SpyCurrencyQuery::create() -&gt;filterByCode($currencyIsoCode) -&gt;findOne(); foreach ($discounts as $discountEntity) { $amount = $discountEntity-&gt;getAmount(); $discountAmountEntity = new SpyDiscountAmount(); $discountAmountEntity-&gt;setGrossAmount($amount); $discountAmountEntity-&gt;setFkDiscount($discountEntity-&gt;getIdDiscount()); $discountAmountEntity-&gt;setFkCurrency($currencyEntity-&gt;getIdCurrency()); $discountAmountEntity-&gt;save(); $output-&gt;writeln(sprintf('Discount with id %s updated.', $discountEntity-&gt;getIdDiscount())); } $output-&gt;writeln('done.'); } }
?&gt; See also: Get a general idea about Discount Learn how to apply a discount Get acquainted with the types of discounts Last review date: Jan. 30th, 2018</body>
</html>