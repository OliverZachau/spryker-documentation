<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Money Handling monetary values can be a problem and is often quite hard. The Money bundle makes it easier to work with monetary values. Spryker handles all monetary values as integer and provides conversions from decimal values to cent values and vice versa. The key feature of this module is to convert aMoneyTransferinto the proper string version of it, given the current locale and currency. Usage The Money module is very straight forward and easy to use. TheMoneyFacadeexposes the following methods: MoneyFacade::fromInteger() MoneyFacade::fromFloat() MoneyFacade::fromString() MoneyFacade::formatWithCurrency() MoneyFacade::formatWithoutCurrency() MoneyFacade::convertIntegerToDecimal() MoneyFacade::convertDecimalToInteger() MoneyFacade::from*()methods Internally we use a powerful implementation of the Money Pattern. Outside the Money(Undefined variable: General.bundle/module)you will only see theMoneyTransferwhich encapsulates our internals. To get a money object you can call theMoneyFacade::from*()methods: MoneyFacade::fromInteger(1000) with integer MoneyFacade::fromInteger(1000, 'EUR') with integer and currency MoneyFacade::fromFloat(10.00) with float MoneyFacade::fromFloat(10.00, 'EUR') with float and currency MoneyFacade::fromString('1000') with string MoneyFacade::fromString('1000', 'EUR') with string and currency All of them will return aMoneyTransferwith aMoneyTransfer::$amountof ‘1000’. The only difference between them is theMoneyTransfer::$currency. This value differs if you pass a currency to theMoneyFacade::from*()methods or not. In case you don’t pass a currency, the currency configured as default one will be used. If you pass a specific currency, it will be used instead of the one that’s configured as default one. MoneyFacade::formatWithSymbol() This method accepts only one argument, aMoneyTransfer. It will return a string representation of the given object, considering the current locale. Example: MoneyTransfer::$amount= 1000 MoneyTransfer::$currency= ‘EUR’ Current locale isde_DE The output would be10,00 € If the current locale would been_US, the output would be:€10.00when passing the same object. MoneyFacade::formatWithoutSymbol() The same behavior as inMoneyFacade::formatWithSymbol(), except of the fact that the currency symbol is not included. The output would then be10,00or10.00for the above example. MoneyFacade::convertIntegerToDecimal() In some cases you will need a plain decimal representation of the value in integer (e.g. cents). This can be useful e.g. for API calls. MoneyFacade::convertDecimalToInteger() In some cases you will need an integer (e.g. cents) representation for a decimal value. This can be useful when you want to store monetary values in the database. Money Collection Form Type From Money version 2.2.*, you can have money collection form type inside your forms which will allow to include complex form collection that will render table with currency per store and gross/net price. For example, add FormBuilder
in your form Type: /** * @param \Symfony\Component\Form\FormBuilderInterface $builder * * @return $this */ protected function addMoneyValueCollectionType(FormBuilderInterface $builder) { $builder-&gt;add( DiscountCalculatorTransfer::MONEY_VALUE_COLLECTION, //is the property in the main form you want to map. It should be transferred as in example MoneyCollectionType::class, [ MoneyCollectionType::OPTION_AMOUNT_PER_STORE =&gt; false, //If you want to render per store, set it to true ] ); return $this; } Also, you need to modify twig template to include form money value collection table. {{ form_money_collection(mainForm.moneyValueCollection) }} This will render table with all currencies enabled in store. You have to handle persistence yourself, which means that you have to save and read data to MoneyValueTransfer collection. Component provides only initial data. See also: Currency Last review date: Oct. 6th, 2017</body>
</html>