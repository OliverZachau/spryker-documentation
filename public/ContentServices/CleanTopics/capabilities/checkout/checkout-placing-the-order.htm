<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>After the customer clicks the submit button during theSummaryStep, thePlaceOrderStepis started. This step takes theQuoteTransfer` and starts the checkout workflow to store the order into the system. Zed Checkout module contains a number of plugins where you can add additional behavior, check preconditions, save or execute post condition check. Plugins Zed's Checkout module contains three types of plugins to extend the behavior on placing an order. Any plugin has access toQuoteTransferthat is supposed to be read only and CheckoutResponseTransfer data object that can be modified. PreCondition — is for checking if the order satisfies predefined constraints (e.g., if the quantity of items is still available). OrderSavers — is for saving order, each plugin is responsible for saving certain parts of the order (sales module saves items, discount module saves discounts, product option module saves options etc..). EachOrderSaverplugin is wrapped into a single transaction; if exception is being thrown, transaction will be rolledback. CheckPostConditions — is for checking conditions after saving, last time to react if something did not happen by the plan. It’s called after state machine execution. Checkout Response Transfer isSuccess (bool) — indicates if the checkout process was successful. errors ( CheckoutErrorTransfer ) — list of errors that occurred during execution of the plugins. isExternalRedirect (bool) — specifies if the redirect, that happens after the order was placed successfully, is external. redirectUrl (string) — URL to redirect customer after the order was placed successfully. saveOrder ( SaveOrderTransfer ) — stores ids of the items that OrderSaver plugins have saved. Checkout Error Transfer errorCode (int) — numeric error code. The checkout error codes are listed below. message (string) — error message. Checkout Error Codes 4001 — customer email already used. 4002 — product unavailable. 4003 — cart amount does not match. 5000 — unknown error. Save Order Transfer idSalesOrder (int) — ID of the current saved order. orderReference (string) — auto generated ID of the order. orderItems (ItemTransfer) — saved order items. There are already some plugins implemented with each of those types: Precondition Plugins CustomerPreConditionCheckerPlugin— Checks if the email of the customer is already used. ProductsAvailableCheckoutPreConditionPlugin— Check if the items contained in the cart are in stock. Postcondition Plugins OrderCustomerSavePlugin— save/create customer in database if the customer is new or the ID is not set (guest customer is ignored). SalesOrderSaverPlugin— saves order information, creates sales_order and sales_order_item table. ProductOptionOrderSaverPlugin— saves product options to sales_product_item table. DiscountOrderSavePlugin— save order discounts to sales_discounts table. OrderShipmentSavePlugin— saves order shipment information to sales_expense table. Pre Save Condition Plugin SalesOrderExpanderPlugin— expands items by quantity and recalculate quote. State Machine State machine is triggered in theCheckoutWorkflowclass from the Checkout module; the execution starts after pre-condition and order saver plugins store no errors into CheckoutResponseTransfer . The state machine trigger needs a name in order to be executed. The name is set bySalesOrderSaverPluginin the Sales module. Each project has to implementSalesConfig::determineProcessForOrderItem()method, which should return the state machine name for the selected order item. E.g.: Payolution payment would return PayolutionPayment01.</body>
</html>