<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>In order to use checkout in Yves it should be correctly configured and dependencies should be provided. Each step can have a form, a controller action, the implementation of the step logic and Twig template to render the HTML. Forms - current step form collection. Controller action - the action that is called when the step is being triggered Step - a class that implements theStepInterfaceand handles the data passed through the form. Twig template - template where form is rendered. Each form in the Checkout usesQuoteTransferfor data storage. When the data is being submitted, it’s automatically mapped by the Symfony form component toQuoteTransfer. If the form is valid then the updatedQuoteTransferwill be passed toStep::execute()method where you can modify it further or apply custom logic. Also there is SymfonyRequestobject passed if additional/manual data mapping is required. There are a few factories provided for checkout dependency wiring: FormFactory- creates form collections for each step. StepFactory- creates the steps together with their dependencies and plugins. CheckoutFactory- where theStepProcessis created for all steps. We have a step process which contains the list of the steps created. TheCheckoutProcess::process(Request, FormCollectionHandlerInterface)process method accepts a Request which is currently submitted and aFormCollectionHandlerInterfaceimplementation that contains the list of forms that are used in the current step. If there are multiple forms that are used,FormCollectionHandlerselects the right one when request is being made. Some forms need external data provided, for this purpose there isDataProviderInterface, each implementor must provide data, for select or form itself. This data provider is passed when FormCollection is created. When handle method is called FormCollection handler creates form types and feeds data from data provider.</body>
</html>