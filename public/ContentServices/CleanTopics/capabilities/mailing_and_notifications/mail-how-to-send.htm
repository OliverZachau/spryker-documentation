<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>The following example represents a real-world scenario: CustomerRegistration. A Customer goes through the registration process in your frontend (Yves) and all customer information is sent to Zed. Zed uses the information to register the customer. Once the registration is completed, the customer will receive a confirmation email. In the model which handles the registration you will then do something similar to this: &lt;?php
namespace Pyz\Zed\Customer\Business\Model\Customer; ... // customer registration code $this-&gt;sendMail($customerTransfer); ... protected function sendMail(CustomerTransfer $customerTransfer) { // Create a MailTransfer instance which is // used for further processing $mailTransfer = new MailTransfer(); // Set the mail type which is used for the // internal mapping e.g. which mail provider // should send this mail $mailTransfer-&gt;setType(CustomerRegistrationMailTypePlugin::MAIL_TYPE); // Set the CustomerTransfer to the MailTransfer // this can be any Transfer object which is // needed in the Mail $mailTransfer-&gt;setCustomer($customerTransfer); // Set the LocaleTransfer which should be used // for e.g. translation inside your templates $mailTransfer-&gt;setLocale($customerTransfer-&gt;getLocale()); // Trigger the mail facade to handle the mail $this-&gt;mailFacade-&gt;handleMail($mailTransfer); } ... AllMailTransfer’s need at least to know which mail type (nothing more than a string) should be used for further internal processing. A minimalistic example could look like this: &lt;?php
...
protected function sendMail() { $mailTransfer = new MailTransfer(); $mailTransfer-&gt;setType(YourMailTypePlugin::MAIL_TYPE); $this-&gt;mailFacade-&gt;handleMail($mailTransfer);
} Now let’s have a detailed look into the MailType plugin used for this example: &lt;?php
namespace Pyz\Zed\Customer\Communication\Plugin\Mail; use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Mail\Business\Model\Mail\Builder\MailBuilderInterface;
use Spryker\Zed\Mail\Dependency\Plugin\MailTypeInterface; class CustomerRegistrationMailTypePlugin extends AbstractPlugin implements MailTypePluginInterface
{ const MAIL_TYPE = 'customer registration mail'; /** * @return string */ public function getName() { return static::MAIL_TYPE; } /** * @param \Spryker\Zed\Mail\Business\Model\Mail\Builder\MailBuilderInterface $mailBuilder * * @return void */ public function build(MailBuilderInterface $mailBuilder) { $this -&gt;setSubject($mailBuilder) -&gt;setHtmlTemplate($mailBuilder) -&gt;setTextTemplate($mailBuilder) -&gt;setSender($mailBuilder) -&gt;setRecipient($mailBuilder); } ... protected function setRecipient(MailBuilderInterface $mailBuilder) { // Get the CusomterTransfer which was added // to the MailTransfer in the sendMail() method // of the Customer model $customerTransfer = $mailBuilder-&gt;getMailTransfer()-&gt;getCustomer(); // Use the customer information to add the needed // recipient information through the MailBuilder // to the MailTransfer $mailBuilder-&gt;addRecipient( $customerTransfer-&gt;getEmail(), $customerTransfer-&gt;getFirstName() . ' ' . $customerTransfer-&gt;getLastName() ); }
} The Mail(Undefined variable: General.bundle/module)’s default MailBuilder is already pre-defined to build theMailTransfer. MailBuilder internally adds a newMailRecipientTransferwith the passed information, email and name. When plugin is created, it should be registered it in MailDependencyProvider: &lt;?php ... $container-&gt;extend(self::MAIL_TYPE_COLLECTION, function (MailTypeCollectionAddInterface $mailCollection) { $mailCollection -&gt;add(new CustomerRegistrationMailTypePlugin()); return $mailCollection }); ... ?&gt; The default, MailBuilder also has access to the glossary with thesetSubject()method. This is used for translations as follows: &lt;?php
namespace Pyz\Zed\Customer\Communication\Plugin\Mail; use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Mail\Business\Model\Mail\Builder\MailBuilderInterface;
use Spryker\Zed\Mail\Dependency\Plugin\MailTypeInterface; class CustomerRegistrationMailTypePlugin extends AbstractPlugin implements MailTypePluginInterface
{ ... protected function setSubject(MailBuilderInterface $mailBuilder) { $mailBuilder-&gt;setSubject('mail.customer.registration.subject'); } ...
} A string is used as a key of the translation. The MailBuilder internally does the translation through theGlossaryFacade: &lt;?php
namespace Spryker\Zed\Mail\Business\Model\Mail\Builder; ... protected function setSubject($subject, array $data = []) { $subject = $this-&gt;translate($subject, $data); $this-&gt;getMailTransfer()-&gt;setSubject($subject); return $this; } ... protected function translate($keyName, array $data = []) { $localeTransfer = $this-&gt;getLocaleTransfer(); if ($this-&gt;glossaryFacade-&gt;hasTranslation($keyName, $localeTransfer)) { $keyName = $this-&gt;glossaryFacade-&gt;translate($keyName, $data, $localeTransfer); } return $keyName; }
} As you can see above, you can also translate with placeholder. For themail.order.shipped.subjectkey we haveYour order {orderReference} is on its wayas translation. In your MailType plugin you can use the orderReference from the given OrderTransfer within the subject: &lt;?php
...
protected function setSubject(MailBuilderInterface $mailBuilder)
{ $orderTransfer = $mailBuilder-&gt;getMailTransfer()-&gt;getOrder(); $mailBuilder-&gt;setSubject( 'mail.order.shipped.subject', [ '{orderReference}' =&gt; $orderTransfer-&gt;getOrderReference() ] );
}
...
} Templates Usually you will have a*.twigfile which contains the template you want to use for mail. You need to set the template which should be used in your MailType plugin: &lt;?php
...
protected function setTextTemplate(MailBuilderInterface $mailBuilder)
{ $mailBuilder-&gt;setTextTemplate('customer/mail/customer_registration.text.twig');
}
...
} The provider determines the template’s final look. It can contain plain text, HTML, etc. For example you can even have a template which generates JSON: { ... customer: "{{ mail.customer.firstName }} {{ mail.customer.lastName }}", ...
} In our example we have a plain text template with: {{ 'mail.customer.registration.text' | trans }} The templates must be placed within the bundles Presentation layer. In our examplesrc/Pyz/Zed/Customer/Presentation/Mail/customer_registration.text.twig. You can use the sametransfilter as used with Yves and Zed templates. TwigRendereris the default renderer, but you can add your own Renderer by implementing theRendererInterface. We also provide a basic layout file to where you can inject concrete content files. If you want to build your own layout, you need to have the following in your template: {% for template in mail.templates %} {% if not template.isHtml %} {% include "@" ~ template.name with {mail: mail} %} {% endif %}
{% endfor %} This one is used for plain text messages, and templates can also be used to generate JSON or a query strings likecustomer={{ mail.customer.firstName }}&amp;orderReference={{ mail.order.orderReference }}- it’s up to your provider to decide what you need to render. For HTML messages you need to have this in your layout file: {% for template in mail.templates %} {% if template.isHtml %} {% include "@" ~ template.name with {mail: mail} %} {% endif %}
{% endfor %} Once you have completed the steps below, callMailFacade::handleMail()to activate the mail functionality. See also: Mail Create a MailProviderPlugin Create a MailTypePlugin Register the Mail Provider Register a MailTypePlugin Last review date: Jan. 3rd, 2018</body>
</html>