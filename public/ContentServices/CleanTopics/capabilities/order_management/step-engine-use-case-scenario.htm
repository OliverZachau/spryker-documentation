<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Below you can see an example of configuration for the checkout process, containing two steps: an entry step and a success step. Click to expand the code sample &lt;?php
namespace Pyz\Yves\Checkout; use Pyz\Yves\Checkout\Form\FormFactory;
use Pyz\Yves\Checkout\Plugin\Provider\CheckoutControllerProvider;
use Pyz\Yves\Application\Plugin\Provider\ApplicationControllerProvider;
use Spryker\Yves\Kernel\AbstractFactory; class CheckoutFactory extends AbstractFactory
{ /** * @return \Spryker\Yves\StepEngine\Process\StepEngine */ public function createCheckoutProcess() { return $this-&gt;createStepEngine( $this-&gt;createStepCollection() ); } /** * @param \Spryker\Yves\StepEngine\Process\StepCollectionInterface $stepCollection * * @return \Spryker\Yves\StepEngine\Process\StepEngine */ public function createStepEngine(StepCollectionInterface $stepCollection) { return new StepEngine($stepCollection, $this-&gt;createDataContainer()); } /** * @return \Spryker\Yves\Checkout\DataContainer\DataContainer */ protected function createDataContainer() { return new DataContainer($this-&gt;getCartClient()); } /** * @return \Spryker\Yves\StepEngine\Process\StepCollectionInterface */ public function createStepCollection() { $stepCollection = new StepCollection( $this-&gt;getUrlGenerator(), CheckoutControllerProvider::CHECKOUT_ERROR ); $stepCollection -&gt;addStep($this-&gt;createEntryStep()) -&gt;addStep($this-&gt;createSuccessStep()); return $stepCollection; } /** * @return \Pyz\Yves\Checkout\Process\Steps\EntryStep */ protected function createEntryStep() { return new EntryStep( CheckoutControllerProvider::CHECKOUT_INDEX, ApplicationControllerProvider::ROUTE_HOME ); } /** * @return \Pyz\Yves\Checkout\Process\Steps\SuccessStep */ protected function createSuccessStep() { return new SuccessStep( CheckoutControllerProvider::CHECKOUT_SUCCESS, ApplicationControllerProvider::ROUTE_HOME ); } /** * @throws \Spryker\Yves\Kernel\Exception\Container\ContainerKeyNotFoundException * * @return \Spryker\Client\Cart\CartClientInterface */ protected function getCartClient() { return $this-&gt;getProvidedDependency(CheckoutDependencyProvider::CLIENT_CART); } }</body>
</html>