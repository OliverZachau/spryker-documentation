<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Upgrading from Version 4.* to Version 5.* Version 4 of the Refund module no longer usesSalesAggregatorFacade, it was replaced withSalesFacade. TheRefundCalculatorbusiness class must now replaceRefundToSalesAggregatorInterfacewith theRefundToSalesInterfacebridge. To learn more see, Upgrading from Version 3.* to Version 4.* Upgrading from Version 2.* to Version 3.* To migrate the Refund module from version 2 to version 3, follow these steps: Version 3 of the Refund module was completely rebuilt; theSalesAggregatoris used to get a calculatedOrderTransferand plugins are used to change the refundable amount calculation behaviour. TheRefundFacadehas completely changed and exposes only two methods. Check your code and where you make use of theRefundFacadechange your implementation to use the new methods from theRefundFacade. These methods are: RefundFacade::calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity) RefundFacade::saveRefund(RefundTransfer $refundTransfer) You need to: rename methodRefundFacade::calculateRefundableAmount()toRefundFacade::calculateRefund()and pass needed arguments to itcalculateRefund()will return aRefundTransferwhich holds the refundable amount when refund process of payment provider is done and accepted pass theRefundTransfertoRefundFacade::saveRefund() Refund view in sales order detail page can be activated by adding'refund' =&gt; '/refund/sales/list'toSalesConfig::getSalesDetailExternalBlocksUrls() See also: Using and extending the Refund module</body>
</html>