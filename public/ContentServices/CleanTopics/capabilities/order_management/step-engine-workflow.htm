<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>When you need to define a multi-step process using theStepEnginefeature, you need to implement the following interfaces: StepInterface- here you implement the logic that needs to get executed when the defined step takes place SubFormInterface- defines the name of the form and thepathPropertywhich is used to fill the property of transfer object for the current step DataContainerInterface- holds the transfer object you are working on Defining the Steps The defined steps are wired up through the parameters that are passed when creating theStepEngine: StepCollectionInterface- this contains all the steps that are used in theStepEngine::process() DataContainerInterface- holds the main transfer object and knows how to persist the data during the requests TheStepEnginetakes care of executing the steps defined in yourStepCollection. To start the multi-step workflow, you need to call theStepEngine::process()operation from your controller and pass the request object to it; optionally you can pass aFormCollectionHandlerInterfaceto it. Processing the Workflow When theStepEnginestarts to process the multi-step workflow, it will iterate through the steps contained in the step collection. For the current step, it will check if it meets the assigned preconditions by callingStepInterface::preCondition(). the preconditions are not satisfied:StepEnginewill return aRedirectResponseto the definedStepInterface::getEscapeRoute() the preconditions are satisfied:StepEnginewill ask theStepCollectionif the current step can be accessed. If the preconditions are satisfied and the current step can be accessed,StepEngineneeds to verify if the current step needs user input: current step doesn’t need user input:StepEnginewill return aRedirectResponseto the next step current step needs user input:StepEnginewill take theRequestobject and pass it to theFormCollectionHandlerInterface If we have a submitted form, theFormCollectionHandlerInterfacewill handle the request and if the form validation passes theStepEnginethe execution of the workflow will continue. If the request does not contain valid data for the given form, it will redirect the user to the last URL, where the user can correct his input data and submit it again. TheStepEnginewill go like this through all the steps added to theStepCollection, until all the steps are executed. TheStepCollection,FormCollectionHandlerandStepEngineclasses can be used without the need to extend them in your project.</body>
</html>