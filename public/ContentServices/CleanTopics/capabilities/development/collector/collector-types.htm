<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Data Collection Data aggregation is a complex process of transforming scattered data between different resources, into a new one, usually smaller then the input. There are two basic Collector Types, depending on the way the data is being collected. AbstractPdoCollector- uses PHP Data Objects (PDO) and native SQL to query the data AbstractPropelCollector- uses Propel to access the database and to query the data While using Propel to query the database might perform well for simple collectors, there are situations in which the performance is not as good as expected. For complex queries you might want to consider using native SQL queries in order to improve the performance of your collector. Store Types Yves fetches all data from a(key-value) Storageand aSearch (engine)type stores. Redis is the key-value data store used by the front-end application, while Elasticsearch provides the search functionality. Storage Collectors provide the data used in front-end, from CMS pages and urls to localized product details. While Search Collectors aggregate the data necessary for the search engine to be able to perform full-text or facet search operations. Predefined Collectors Regardless of Store Type, each Collector has a unique type used in theTouch mechanism, stored inspy_touch table underitem_typecolumn. An update made to a product will be exported to each store type, which ensures front-end data is always up to date no matter the storage mechanism. 'product_abstract' = ProductCollector
'categorynode' = CategoryNodeCollector
'navigation' = NavigationCollector
'translation' = TranslationCollector
'page' = PageCollector
'block' = BlockCollector
'redirect' = RedirectCollector
'url' = UrlCollector Check thePyz\Zed\Collector\CollectorDependencyProviderclass to see which Collector Types are already available. There are several collectors that are delivered with Demoshop. Storage Collectors BlockCollector - exports the CMS blocks CategoryNodeCollector - exports categories with localized attributes and SEO data NavigationCollector - exports localized navigation trees PageCollector - exports CMS pages ProductCollector - exports products, with localized attributes, prices and stock information RedirectCollector - export redirects TranslationCollector - exports glossary entries that are used to handle translations UrlCollector - exports urls for all resources Search Collectors ProductCollector - exports localized product and category data used by the search engine</body>
</html>