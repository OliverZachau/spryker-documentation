<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>BETA version This(Undefined variable: General.bundle/module)is still in development. For questions and inquiries please contact academy@spryker.com DataFeed module help to query abstract products, categories, prices, availability data and related information for exporting or processing. The data Feed is not dependent on collectors. Every DataFeed module has an API to get a query. With the query you can use pagination, limits, add columns, query one row or all and more. ProductAbstract DataFeed Module The ProductAbstract DataFeed module has a query container withqueryAbstractProductDataFeed()function that returnsOrm\Zed\Product\Persistence\SpyProductAbstractQuery. By default, abstract product localized attributes are joined. UseGenerated\Shared\Transfer\ProductAbstractDataFeedTransferfor query settings. Required only when you need an extra join or filters. ProductAbstractDataFeedTransfercontains the following fields: joinPrice joinCategory joinImage joinProduct joinOption updatedFrom updatedTo idLocale You can filter data usingupdatedFrom,updatedTo,idLocaleoptions. joinImage- settrueto join images data for abstract products. joinCategory- settrueto join categories data. joinPrice- settrueto join prices data. joinProduct- settrueto join concrete products data with localized attributes, concrete product images and product stock. joinOption- settrueto join product options data. Installation Run: composer require spryker/product-abstract-data-feed Usage Add to your dependency container &lt;?php
... use Spryker\Zed\ProductAbstractDataFeed\Persistence\ProductAbstractDataFeedQueryContainer; const PRODUCT_ABSTRACT_DATA_FEED = 'PRODUCT_ABSTRACT_DATA_FEED'; ... public function providePersistenceLayerDependencies(Container $container) { $container[self::PRODUCT_ABSTRACT_DATA_FEED] = function (Container $container) { return $container-&gt;getLocator() -&gt;productAbstractDataFeed() -&gt;queryContainer(); }; ... Add to your module persistence factory &lt;?php
... public function getProductAbstractDataFeedQueryContainer()
{ return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::PRODUCT_ABSTRACT_DATA_FEED);
} ... Query example &lt;?php
... public function getAllAbstractProducts()
{ $productAbstractQueryContainer = $this-&gt;getFactory() -&gt;getProductAbstractDataFeedQueryContainer(); $productAbstractDataFeedTransfer = new ProductAbstractDataFeedTransfer(); $productAbstractDataFeedTransfer-&gt;setIdLocale(46); $productAbstractDataFeedTransfer-&gt;setJoinImage(true); $query = $productAbstractQueryContainer-&gt;queryAbstractProductDataFeed($productAbstractDataFeedTransfer); return $query-&gt;find() -&gt;toArray(); } ... Availability DataFeed Module The Availability DataFeed Module has a query container with aqueryAvailabilityDataFeed()function that returnsOrm\Zed\Product\Persistence\SpyProductAbstractQuery. By default, stock, product, product localized attributes and abstract product localized attributes are joined. UseGenerated\Shared\Transfer\AvailabilityDataFeedTransferforquery settings. The Transfer object andidLocaleare required. AvailabilityDataFeedTransfer contains the following fields: updatedFrom updatedTo idLocale You can filter data using updatedFrom, updatedTo, idLocale options. Installation Run: composer require spryker/availability-data-feed Usage Add to your dependency container &lt;?php
... use Spryker\Zed\AvailabilityDataFeed\Persistence\AvailabilityDataFeedQueryContainer; const AVAILABILITY_DATA_FEED = 'AVAILABILITY_DATA_FEED'; ... public function providePersistenceLayerDependencies(Container $container) { $container[self::AVAILABILITY_DATA_FEED] = function (Container $container) { return $container-&gt;getLocator() -&gt;availabilityDataFeed() -&gt;queryContainer(); }; ... Add to your Module persistence factory &lt;?php
... public function getAvailabilityDataFeedQueryContainer()
{ return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::AVAILABILITY_DATA_FEED);
} ... Query example &lt;?php
... public function getProductsAvailability()
{ $availabilityQueryContainer = $this-&gt;getFactory() -&gt;getAvailabilityDataFeedQueryContainer(); $availabilityDataFeedTransfer = new AvailabilityDataFeedTransfer(); $availabilityDataFeedTransfer-&gt;setIdLocale(46); $query = $availabilityQueryContainer-&gt;queryAvailabilityDataFeed($availabilityDataFeedTransfer); return $query-&gt;find() -&gt;toArray();
} ... Category DataFeed Module The Category DataFeed module has a query container with aqueryCategoryDataFeed()function that returnsOrm\Zed\Category\Persistence\SpyCategoryQuery. By default category attributes and category nodes are joined. UseGenerated\Shared\Transfer\CategoryDataFeedTransferfor query settings. The transfer object andidLocaleare required. CategoryDataFeedTransfercontains the following fields: joinAbstractProduct updatedFrom updatedTo idLocale You can filter data usingupdatedFrom,updatedTo,idLocaleoptions. joinAbstractProduct- settrueto join abstract product and localized attributes. Installation Run: composer require spryker/category-data-feed Usage Add to your dependency container: &lt;?php
... Use Spryker\Zed\CategoryDataFeed\Persistence\CategoryDataFeedQueryContainer; const CATEGORY_DATA_FEED = 'CATEGORY_DATA_FEED'; ... public function providePersistenceLayerDependencies(Container $container) { $container[self::CATEGORY_DATA_FEED] = function (Container $container) { return $container-&gt;getLocator() -&gt;categoryDataFeed() -&gt;queryContainer(); }; ... Add to your module persistence factory &lt;?php
... public function getCategoryDataFeedQueryContainer()
{ return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::CATEGORY_DATA_FEED);
} ... Query example &lt;?php
... public function getAllCategories()
{ $categoryDataFeedQueryContainer = $this-&gt;getFactory() -&gt;getCategoryDataFeedQueryContainer(); $categoryDataFeedTransfer = new CategoryDataFeedTransfer(); $categoryDataFeedTransfer-&gt;setIdLocale(46); $query = $categoryDataFeedQueryContainer-&gt;queryCategoryDataFeed($categoryDataFeedTransfer); return $query-&gt;find() -&gt;toArray();
} ... Price DataFeed Module The Price DataFeed module has a query container with thequeryPriceDataFeed()function that returnsOrm\Zed\Price\Persistence\SpyPriceProductQuery. UseGenerated\Shared\Transfer\PriceDataFeedTransferfor query settings. PriceDataFeedTransfer contains the following field: joinPriceType joinPriceType- settrueto join price type data. Installation Run: ccomposer require spryker/price-data-feed Usage Add to your dependency container &lt;?php
... Use Spryker\Zed\CategoryDataFeed\Persistence\CategoryDataFeedQueryContainer; const PRICE_DATA_FEED = 'PRICE_DATA_FEED'; ... public function providePersistenceLayerDependencies(Container $container) { $container[self::PRICE_DATA_FEED] = function (Container $container) { return $container-&gt;getLocator() -&gt;priceDataFeed() -&gt;queryContainer(); }; ... Add to your module persistence factory &lt;?php
... public function getPriceDataFeedQueryContainer()
{ return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::PRICE_DATA_FEED);
} ... Query example &lt;?php
... public function getAllPrices()
{ $priceDataFeedQueryContainer = $this-&gt;getFactory() -&gt;getPriceDataFeedQueryContainer(); $priceDataFeedTransfer = new PriceDataFeedTransfer(); $priceDataFeedTransfer-&gt;setJoinPriceType(true); $query = $priceDataFeedQueryContainer-&gt;queryPriceDataFeed($priceDataFeedTransfer); return $query-&gt;find() -&gt;toArray();
} ...</body>
</html>