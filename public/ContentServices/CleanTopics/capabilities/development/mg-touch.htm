<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Upgrading from Version 3.* to Version 4.* Update/installspryker/touchto at least4.0.0version. Install the new database columns by runningvendor/bin/console propel:diff. Propel should generate a migration file with the changes. Runvendor/bin/console propel:migrateto apply the database changes. Generate ORM models by runningvendor/bin/console propel:model:build. This command will updatespy_touch_storage, andspy_touch_searchclasses to have the newly createdfk_storecolumns and their relations. Populatefk_storerecords respectively tospy_touch_storage.key, andspy_touch_search.key. Example migrations If you have a single Store,spy_storecontains 1 row which represents your active store. Use itsspy_store.id_storevalue to update touch records. In our current example the store ID is considered: 1. UPDATE spy_touch_storage SET fk_store = 1; UPDATE spy_touch_search SET fk_store 1; If you have multiple Stores already, you will need to create a query which updates thefk_storevalues based on the records' key (if it contains the store information). Example update when the key has the following structure: {STORE_NAME}.{LOCALE_NAME}.{ENTITY_NAME}.{ENTITY_ID}. MySql: UPDATE spy_touch_storage JOIN spy_store SET spy_touch_storage.fk_store = spy_store.id_store WHERE LOWER(spy_store.name) = LOWER(SUBSTR(`key`, 1, LOCATE(`key`, '.') - 1)); UPDATE spy_touch_search JOIN spy_store SET spy_touch_search.fk_store = spy_store.id_store WHERE LOWER(spy_store.name) = LOWER(SUBSTR(`key`, 1, LOCATE(`key`, '.') - 1)); PostgreSql: UPDATE spy_touch_storage SET fk_store = spy_store.id_store FROM spy_store WHERE LOWER(spy_store.name) = LOWER(SUBSTR(key, 1, STRPOS(key, '.') - 1)); UPDATE spy_touch_search SET fk_store = spy_store.id_store FROM spy_store WHERE LOWER(spy_store.name) = LOWER(SUBSTR(key, 1, STRPOS(key, '.') - 1)); The following deprecated methods were removed, please check your code if you have custom calls or dependencies: TouchFacadeInterface::bulkTouchActive() TouchFacadeInterface::bulkTouchInactive() TouchFacadeInterface::bulkTouchDeleted() TouchQueryContainerInterface::queryTouchEntries() TouchInterface::bulkUpdateTouchRecords() You can find additional details on Touch module release page . The following methods have internal changes, please check if you have customized them: TouchQueryContainer::queryTouchDeleteStorageAndSearch() TouchRecord::removeTouchEntriesMarkedAsDeleted() You can find additional details on Touch module release page . Note: Module requires PHP 7.1 from now on. After these steps, yourTouchmodule supports multi-store entities. See also: Learn more about Touch Last review date: Jan. 31st, 2018</body>
</html>