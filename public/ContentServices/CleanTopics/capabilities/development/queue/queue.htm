<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Concepts Sender - a program that sends messages. Receiver	- a program that waits to receive messages. Message - a string or binary data passed from Sender to Receiver. Message Box	- Similar to a Mailbox, here you can store, send and receive messages. Introduction The Queue module provides a set of APIs and Commands for sending/receiving messages to/from queues for other modules in Spryker. The Queue System provides a protocol for managing asynchronous processing. Asynchronous processing in the sense that the sender and receiver do not have access to the same message at the same time. The sender produces a message and sends it to the message box, later when the receiver connects to the message box the message isreceived. Spryker Queue Module The Spryker Queue module provides a set of high level standard APIs for communicating with the queues. Moreover, the Queue module is also a gateway for other moduleto interact with queues and messages. The Queue module is an abstract adapter implementation which provides a standard API for the other module, this API internally calls their queue engine’s API and translates to their own communication language. There are multiple 3rd-party queue engines to choose from such as RabbitMQ, AmazonSQS and etc. To initially work with the Queue module you need at least one Queue Engine and one Queue Adapter. This module also comes with a set of simple commands for listening to the queues and processing messages by stack of corresponding plugins. For more information and examples of how to get started with the Queue module see . See also: Default Queue Adapter Queue Benefits Default Queue Engine Queue Job Configuration Queue Message Processor Plugin Queue Task Queue Workers Migration Guide - RabbitMQ Last review date: Oct. 18th, 2017</body>
</html>