<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>The Flysystem module integrates Spryker with the thephpleague/flysystem vendor package. It handles operations, flysystem adapter configuration and provides aFlysystemFilesystemBuilderPluginInterface, where thebuild()method is expected to return a concrete implementation of the\League\Flysystem\Filesysteminterface. There are module with adapters for Local, FTP and AWS3 filesystems. Flysystem Features Quote from Flysytem's official documentation : Generic API for handling common tasks across multiple file storage engines. Consistent output which you can rely on. Integrate well with other packages/frameworks. Be cacheable. Emulate directories in systems that support none, like AwsS3. Support third party plugins. Make it easy to test your filesystem interactions. Support streams for big file handling Module Dependency Graph The Flysystem Module provides plugins which integrate thephpleague/flysystem vendor package and implement FileSystem's plugin interface. Flysystem Service API Flysystem's Service API is almost exactly like Flysystem's API with only one distinction, it takes an additional mandatory parameter containing a pre-configured filesystem name. See Plugin Configuration for details. For example, to extract an image's metadata information stored underfoo/bar.jpg, use thegetMetadata()method with themediastore's name. &lt;?php
/** * Specification: * - Select pre-configured filesystem * - Get resource metadata * - Return resource metadata transfer, null on failure * * @param string $filesystemName * @param string $path * * @return \Generated\Shared\Transfer\FlysystemResourceMetadataTransfer */
public function getMetadata($filesystemName, $path); $metadataTransfer = $flysystemService-&gt;getMetadata('media', 'foo/bar.jpg'); Or to read file content from thecustomerDocumentstore. &lt;?php
/** * Specification: * - Select pre-configured filesystem * - Read file * - Return file content, false on failure * * @param string $filesystemName * @param string $path * * @return false|string */
public function read($filesystemName, $path); $invoiceDocument = $flysystemService-&gt;read('customerData', 'invoices/2017/05/123.pdf'); Flysystem Filesystem Adapter Modules Different filesystems require different adapters in order to handle them. In Spryker, we use package principles to create modular and easy to configure applications. Each different Flysystem adapter implementing\League\Flysystem\FilesystemInterfacehas its own Module. Module Description Config FlysystemAws3v3FileSystem Amazon AWS3 version 3 filesystem adapter FlysystemConfigAws3v3Transfer FlysystemFtpFileSystem FTP filesystem adapter FlysystemConfigFtpTransfer FlysystemLocalFileSystem Local filesystem adapter FlysystemConfigLocalTransfer You can install the adapter bundles on demand, just like any other Spryker module, or create your own. Flysystem Config TheFlysystemConfigTransferand options for thephpleague/flysystem are passed to thebuild()method. The adapter config is underadapterConfigand flysystem options underflysystemConfig. &lt;transfer name="FlysystemConfig"&gt; &lt;property name="name" type="string" /&gt; &lt;property name="type" type="string" /&gt; &lt;property name="adapterConfig" type="array" /&gt; &lt;property name="flysystemConfig" type="array" /&gt;
&lt;/transfer&gt; The name and type come from the project configuration. The value oftypeshould point to a concrete builder plugin implementingFlysystemFilesystemBuilderPluginInterface. Filesystem Adapter Config Every adapter module requires its own specific settings. Example ofFlysystemConfigFtp: &lt;transfer name="FlysystemConfigFtp"&gt; &lt;property name="host" type="string" /&gt; &lt;property name="username" type="string" /&gt; &lt;property name="password" type="string" /&gt; &lt;property name="port" type="int" /&gt; &lt;property name="root" type="string" /&gt; &lt;property name="passive" type="bool" /&gt; &lt;property name="ssl" type="bool" /&gt; &lt;property name="timeout" type="int" /&gt;
&lt;/transfer&gt; Adapter Builders Every implementation of\League\Flysystem\AdapterInterfacerequires a unique set of parameters or dependencies. Therefore, adapter instantiation is delegated to a specialized builder which knows about implementation details. The builders are executed via plugins. Filesystem Builder Plugin The Flysystem bundle uses theFlysystemFilesystemBuilderPluginInterfaceimplemented by the concrete adapter's module. Thebuild()method is expected to return a class implementing the\League\Flysystem\Filesysteminterface. TheacceptType()method is expected to return true if the filesystem type can be handled by the implementation. Mapping between Filesystem and the type it can handle is done via configuration, see Plugin Configuration for details. &lt;?php
namespace Spryker\Service\Flysystem\Dependency\Plugin; use Generated\Shared\Transfer\FlysystemConfigTransfer; interface FlysystemFilesystemBuilderPluginInterface
{ /** * @api * * @param \Generated\Shared\Transfer\FlysystemConfigTransfer $configTransfer * @param \League\Flysystem\PluginInterface[] $flysystemPluginCollection * * @return \League\Flysystem\Filesystem */ public function build(FlysystemConfigTransfer $configTransfer, array $flysystemPluginCollection = []); /** * @api * * @param string $type * * @return bool */ public function acceptType($type); } Plugin Example Example implementation fromAws3v3FilesystemBuilderPlugin. &lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Plugin\Flysystem; use Generated\Shared\Transfer\FlysystemConfigTransfer;
use Spryker\Service\Flysystem\Dependency\Plugin\FlysystemFilesystemBuilderPluginInterface;
use Spryker\Service\Kernel\AbstractPlugin; class Aws3v3FilesystemBuilderPlugin extends AbstractPlugin implements FlysystemFilesystemBuilderPluginInterface
{ /** * @param string $type * * @return bool */ public function acceptType($type) { return $type === get_class($this); } /** * @param \Generated\Shared\Transfer\FlysystemConfigTransfer $configTransfer * @param \League\Flysystem\PluginInterface[] $flysystemPluginCollection * * @return \League\Flysystem\Filesystem */ public function build(FlysystemConfigTransfer $configTransfer, array $flysystemPluginCollection = []) { return $this-&gt;getFactory() -&gt;createFlysystemAws3v3FileSystemBuilder($configTransfer, $flysystemPluginCollection) -&gt;build(); } } Flysystem Adapter Builder Example Example of anAws3v3AdapterBuilder, responsible for the instantiation ofLeague\Flysystem\Adapter\AwsS3v3\AwsS3Adapter. It uses its own configFlysystemConfigAws3v3Transfer, created byAws3v3FilesystemBuilder. &lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter; use Aws\S3\S3Client;
use Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer;
use League\Flysystem\Adapter\AwsS3v3\AwsS3Adapter; class Aws3v3AdapterBuilder implements AdapterBuilderInterface
{ const KEY = 'key'; const SECRET = 'secret'; const REGION = 'region'; const VERSION = 'version'; const CREDENTIALS = 'credentials'; /** * @var \League\Flysystem\Adapter\AwsS3v3\AwsS3Adapter */ protected $adapter; /** * @var \Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer */ protected $adapterConfig; /** * @var \Aws\S3\S3Client */ protected $client; /** * @param \Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer $adapterConfig */ public function __construct(FlysystemConfigAws3v3Transfer $adapterConfig) { $this-&gt;adapterConfig = $adapterConfig; } /** * @return \League\Flysystem\AdapterInterface */ public function build() { $this -&gt;buildS3Client() -&gt;buildAdapter(); return $this-&gt;adapter; } /** * @return $this */ protected function buildS3Client() { $this-&gt;client = new S3Client([ self::CREDENTIALS =&gt; [ self::KEY =&gt; $this-&gt;adapterConfig-&gt;getKey(), self::SECRET =&gt; $this-&gt;adapterConfig-&gt;getSecret(), ], self::REGION =&gt; $this-&gt;adapterConfig-&gt;getRegion(), self::VERSION =&gt; $this-&gt;adapterConfig-&gt;getVersion(), ]); return $this; } /** * @return $this */ protected function buildAdapter() { $this-&gt;adapter = new AwsS3Adapter($this-&gt;client, $this-&gt;adapterConfig-&gt;getBucket()); return $this; } } Flysystem Filesystem Builder Example Example ofAws3v3FilesystemBuilder, responsible for instantiation ofFilesystemimplementingLeague\Flysystem\FilesystemInterface. It creates a config usingFlysystemConfigAws3v3Transfer, and validates it. &lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Filesystem; use Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer;
use Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter\Aws3v3AdapterBuilder; class Aws3v3FilesystemBuilder extends AbstractFilesystemBuilder
{ /** * @return \Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer */ protected function buildAdapterConfig() { $configTransfer = new FlysystemConfigAws3v3Transfer(); $configTransfer-&gt;fromArray($this-&gt;config-&gt;getAdapterConfig(), true); return $configTransfer; } /** * @return void */ protected function assertAdapterConfig() { $adapterConfigTransfer = $this-&gt;buildAdapterConfig(); $adapterConfigTransfer-&gt;requireRoot(); $adapterConfigTransfer-&gt;requirePath(); $adapterConfigTransfer-&gt;requireKey(); $adapterConfigTransfer-&gt;requireSecret(); $adapterConfigTransfer-&gt;requireBucket(); $adapterConfigTransfer-&gt;requireVersion(); $adapterConfigTransfer-&gt;requireRegion(); } /** * @return \Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter\AdapterBuilderInterface */ protected function createAdapterBuilder() { $adapterConfigTransfer = $this-&gt;buildAdapterConfig(); return new Aws3v3AdapterBuilder($adapterConfigTransfer); } } AbstractFilesystemBuilder Example Example ofAbstractFilesystemBuilderfrom theFlysystemAws3v3FileSystemmodule. &lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Filesystem; use Generated\Shared\Transfer\FlysystemConfigTransfer;
use League\Flysystem\Filesystem; abstract class AbstractFilesystemBuilder implements FilesystemBuilderInterface
{ /** * @var \Generated\Shared\Transfer\FlysystemConfigTransfer */ protected $config; /** * @param \Generated\Shared\Transfer\FlysystemConfigTransfer $configTransfer */ public function __construct(FlysystemConfigTransfer $configTransfer) { $this-&gt;config = $configTransfer; } /** * @return void */ abstract protected function assertAdapterConfig(); /** * @return \Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter\AdapterBuilderInterface */ abstract protected function createAdapterBuilder(); /** * @return \League\Flysystem\Filesystem */ public function build() { $this-&gt;assertAdapterConfig(); $filesystem = $this-&gt;buildFilesystem(); return $filesystem; } /** * @return \League\Flysystem\Filesystem */ protected function buildFilesystem() { $adapter = $this-&gt;createAdapterBuilder()-&gt;build(); $config = $this-&gt;config-&gt;getFlysystemConfig() ?: []; return new Filesystem($adapter, $config); } } Flysystem Plugins thephpleague/flysystem vendor package also supports plugins. In Spryker, they are loaded viaFlysystemDependencyProviderand automatically passed to thebuild()method. All you have to do is to configure them in theaddFlysystemPluginCollection()method. &lt;?php
namespace Spryker\Service\Flysystem; use Spryker\Service\Kernel\AbstractBundleDependencyProvider;
use Spryker\Service\Kernel\Container; class FlysystemDependencyProvider extends AbstractBundleDependencyProvider
{ /** * @param \Spryker\Service\Kernel\Container $container * * @return \Spryker\Service\Kernel\Container */ protected function addFlysystemPluginCollection($container) { $container[self::PLUGIN_COLLECTION_FLYSYSTEM] = function (Container $container) { return []; }; return $container; } FlysystemServiceFactorywill use the configured plugins stack inbuildFilesystemCollection()via thegetFlysystemPluginCollection()method. Make sure to carry over this behavior if you ever need to overwritebuildFilesystemCollection(). Otherwise, implement Flysystem plugin loading and configuration on your own.</body>
</html>