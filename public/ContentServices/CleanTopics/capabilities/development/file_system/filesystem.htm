<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>The FileSystem Service provides an abstraction for file systems. It uses the same interface to access different types of file systems, regardless of their location or protocol. The Flysystem module provides plugins for thephpleague/flysystem vendor package and implement FileSystem's plugin interfaces. For more details, see Flysystem . FileSystem Module The FileSystem module uses theFileSystemReaderPluginInterfaceto execute read operations, theFileSystemWriterPluginInterfaceto execute write operations and theFileSystemStreamPluginInterfaceto handle big read or write operations. FileSystem Plugin Interfaces system Plugin Interface Description FileSystemReaderPluginInterface Reading operations FileSystemWriterPluginInterface Writing operations FileSystemWriterPluginInterface Stream handling operations Plugin Configuration The FileSystem plugins are loaded viaFileSystemDependencyProviderby the methods:addFileSystemReaderPlugin(),addFileSystemWriterPlugin()andaddFileSystemStreamPlugin(). &lt;?php
namespace Spryker\Service\FileSystem; use Spryker\Service\Flysystem\Plugin\FileSystem\FileSystemReaderPlugin;
use Spryker\Service\Flysystem\Plugin\FileSystem\FileSystemStreamPlugin;
use Spryker\Service\Flysystem\Plugin\FileSystem\FileSystemWriterPlugin;
use Spryker\Service\Kernel\AbstractBundleDependencyProvider;
use Spryker\Service\Kernel\Container; class FileSystemDependencyProvider extends AbstractBundleDependencyProvider
{ /** * @param \Spryker\Service\Kernel\Container $container * * @return \Spryker\Service\Kernel\Container */ protected function addFileSystemReaderPlugin(Container $container) { $container[static::PLUGIN_READER] = function (Container $container) { return new FileSystemReaderPlugin(); }; return $container; } /** * @param \Spryker\Service\Kernel\Container $container * * @return \Spryker\Service\Kernel\Container */ protected function addFileSystemWriterPlugin(Container $container) { $container[static::PLUGIN_WRITER] = function (Container $container) { return new FileSystemWriterPlugin(); }; return $container; } /** * @param \Spryker\Service\Kernel\Container $container * * @return \Spryker\Service\Kernel\Container */ protected function addFileSystemStreamPlugin(Container $container) { $container[static::PLUGIN_STREAM] = function (Container $container) { return new FileSystemStreamPlugin(); }; return $container; } Service Configuration You can use multipleFileSystemsat once. They are identified by name, and contain all the configurations required by the specificFileSystemadapter and type defined undersprykerAdapterClass. ThesprykerAdapterClassshould point to the builder plugin used to create theFileSystem. Separate FileSystems for media and documents It is entirely possible to create separate file systems for media content and documents. For example, you can define twoFileSystems. One called "media", that only contains media specific content like: images, video and audio and another called "customer" that contains customer-sensitive information that should not be stored in the cloud. We use local file systems for development purposes, but config for staging or production environments. Therefore, you could for example provide, an AWS3 adapter without having to change any code. More precisely, with only configuration you can read/write files from AWS3 no need to change any code mirroring your development environment's logic for writing to the local file system. Development environment example: &lt;?php use Spryker\Shared\FileSystem\FileSystemConstants;
use Spryker\Service\FlysystemLocalFileSystem\Plugin\Flysystem\LocalFilesystemBuilderPlugin; $config[FileSystemConstants::FILESYSTEM_SERVICE] = [ 'media' =&gt; [ 'sprykerAdapterClass' =&gt; LocalFilesystemBuilderPlugin::class, 'root' =&gt; APPLICATION_ROOT_DIR . '/data/DE/media/', 'path' =&gt; 'images/categories/', ], 'customer' =&gt; [ 'sprykerAdapterClass' =&gt; LocalFilesystemBuilderPlugin::class, 'root' =&gt; APPLICATION_ROOT_DIR . '/data/DE/customer_storage/', 'path' =&gt; 'documents/', ],
]; Staging/Production environment example: &lt;?php use Spryker\Shared\FileSystem\FileSystemConstants;
use Spryker\Service\FlysystemAws3v3FileSystem\Plugin\Flysystem\Aws3v3FilesystemBuilderPlugin;
use Spryker\Service\FlysystemFtpFileSystem\Plugin\Flysystem\FtpFilesystemBuilderPlugin; $config[FileSystemConstants::FILESYSTEM_SERVICE] = [ 'media' =&gt; [ 'sprykerAdapterClass' =&gt; Aws3v3FilesystemBuilderPlugin::class, 'root' =&gt; '/DE/', 'path' =&gt; 'media/', 'key' =&gt; '..', 'secret' =&gt; '..', 'bucket' =&gt; '..', 'version' =&gt; '..', 'region' =&gt; '..', ], 'customer' =&gt; [ 'sprykerAdapterClass' =&gt; FtpFilesystemBuilderPlugin::class, 'host' =&gt; '..', 'username' =&gt; '..', 'password' =&gt; '..', ],
]; FileSystem Usage Now that we have defined someFileSystems, we can start using them. For example, getting metedata information of a media file stored under "foo/bar.jpg". &lt;?php
use Generated\Shared\Transfer\FileSystemQueryTransfer; $fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $metadataTransfer = $fileSystemService-&gt;getMetadata($fileSystemQueryTransfer); To get metadata: Define theFileSystemname provided in the configuration and set the path to the filename you want to extract metadata from. The read methods use mostlyFileSystemQueryTransfer, the write methods use mostlyFileSystemContentTransferand stream methods useFileSystemStreamTransfer.</body>
</html>