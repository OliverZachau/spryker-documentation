<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Read API getMetadata(FileSystemQueryTransfer $fileSystemQueryTransfer) ReturnFileSystemResourceMetadataTransfer, null on failure &lt;?php
$fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $metadataTransfer = $fileSystemService-&gt;getMetadata($fileSystemQueryTransfer); getMimeType(FileSystemQueryTransfer $fileSystemQueryTransfer) Return resource mimetype, false on failure &lt;?php
$fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $mimeType = $fileSystemService-&gt;getMimeType($fileSystemQueryTransfer); getTimestamp(FileSystemQueryTransfer $fileSystemQueryTransfer) Return resource timestamp, false on failure &lt;?php
$fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $timestamp = $fileSystemService-&gt;getTimestamp($fileSystemQueryTransfer); getSize(FileSystemQueryTransfer $fileSystemQueryTransfer) Return resource size, false on failure &lt;?php
$fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $size = $fileSystemService-&gt;getSize($fileSystemQueryTransfer); isPrivate($filesystemName, $path) Check if resource has private access rights. Return true if resource has private access rights. &lt;?php
$fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $isPrivate = $fileSystemService-&gt;isPrivate($fileSystemQueryTransfer); read(FileSystemQueryTransfer $fileSystemQueryTransfer) Read file. Return file content, false on failure. &lt;?php
$fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $content = $fileSystemService-&gt;read($fileSystemQueryTransfer); listContents(FileSystemListTransfer $fileSystemListTransfer) List contents under a path. Return array of `FileSystemResourceTransfer` objects located under given path. &lt;?php
$fileSystemListTransfer = new FileSystemListTransfer();
$fileSystemListTransfer-&gt;setFileSystemName('media');
$fileSystemListTransfer-&gt;setPath('/');
$fileSystemListTransfer-&gt;setRecursive(true); $resourceList = $fileSystemService-&gt;listContents($fileSystemListTransfer); has(FileSystemQueryTransfer $fileSystemQueryTransfer) Check if resource exists. Return true if resource exist, false otherwise. &lt;?php
$fileSystemQueryTransfer = new FileSystemQueryTransfer();
$fileSystemQueryTransfer-&gt;setFileSystemName('media');
$fileSystemQueryTransfer-&gt;setPath('/foo/bar.jpg'); $has = $fileSystemService-&gt;has($fileSystemQueryTransfer); Write API markAsPrivate(FileSystemVisibilityTransfer $fileSystemVisibilityTransfer) Mark resource with private access rights. Return true on success, false on failure. &lt;?php
$fileSystemVisibilityTransfer = new FileSystemVisibilityTransfer();
$fileSystemVisibilityTransfer-&gt;setFileSystemName('media');
$fileSystemVisibilityTransfer-&gt;setPath('/foo/bar.jpg'); $result = $fileSystemService-&gt;markAsPrivate($fileSystemVisibilityTransfer); markAsPublic(FileSystemVisibilityTransfer $fileSystemVisibilityTransfer) Mark resource with public access rights. Return true on success, false on failure. &lt;?php
$fileSystemVisibilityTransfer = new FileSystemVisibilityTransfer();
$fileSystemVisibilityTransfer-&gt;setFileSystemName('media');
$fileSystemVisibilityTransfer-&gt;setPath('/foo/bar.jpg'); $result = $fileSystemService-&gt;markAsPublic($fileSystemVisibilityTransfer); createDirectory(FileSystemCreateDirectoryTransfer $fileSystemCreateDirectoryTransfer) Create directory with its path. Return true on success, false on failure. &lt;?php
$fileSystemCreateDirectoryTransfer = new FileSystemCreateDirectoryTransfer();
$fileSystemCreateDirectoryTransfer-&gt;setFileSystemName('media');
$fileSystemCreateDirectoryTransfer-&gt;setPath('/foo/bar'); $result = $fileSystemService-&gt;createDirectory($fileSystemCreateDirectoryTransfer); deleteDirectory(FileSystemDeleteDirectoryTransfer $fileSystemDeleteDirectoryTransfer) Delete empty directory. Return true on success, false on failure. &lt;?php
$fileSystemDeleteDirectoryTransfer = new FileSystemDeleteDirectoryTransfer();
$fileSystemDeleteDirectoryTransfer-&gt;setFileSystemName('media');
$fileSystemDeleteDirectoryTransfer-&gt;setPath('foo/bar'); $result = $fileSystemService-&gt;deleteDirectory($fileSystemDeleteDirectoryTransfer); copy(FileSystemCopyTransfer $fileSystemCopyTransfer) Copy file, the destination must not exist. Return true on success, false on failure. &lt;?php
$fileSystemCopyTransfer = new FileSystemCopyTransfer();
$fileSystemCopyTransfer-&gt;setFileSystemName('media');
$fileSystemCopyTransfer-&gt;setSourcePath('foo/bar.jpg');
$fileSystemCopyTransfer-&gt;setDestinationPath('newpath/foobar.jpg'); $result = $fileSystemService-&gt;copy($fileSystemCopyTransfer); delete(FileSystemDeleteTransfer $fileSystemDeleteTransfer) Delete file. Return true on success, false on failure. &lt;?php
$fileSystemDeleteTransfer = new FileSystemDeleteTransfer();
$fileSystemDeleteTransfer-&gt;setFileSystemName('media');
$fileSystemDeleteTransfer-&gt;setPath('foo/bar.jpg'); $result = $fileSystemService-&gt;delete($fileSystemDeleteTransfer); put(FileSystemContentTransfer $fileSystemContentTransfer) Create a file or update if exists. Return true on success, false on failure. &lt;?php
$fileSystemContentTransfer = new FileSystemContentTransfer();
$fileSystemContentTransfer-&gt;setFileSystemName('media');
$fileSystemContentTransfer-&gt;setPath('foo/bar.jpg');
$fileSystemContentTransfer-&gt;setContent('Lorem Ipsum'); $result = $fileSystemService-&gt;put($fileSystemContentTransfer); rename(FileSystemRenameTransfer $fileSystemRenameTransfer) Create a file or update if exists. Return true on success, false on failure. &lt;?php
$fileSystemRenameTransfer = new FileSystemRenameTransfer();
$fileSystemRenameTransfer-&gt;setFileSystemName('media');
$fileSystemRenameTransfer-&gt;setPath('foo/bar.jpg');
$fileSystemRenameTransfer-&gt;setNewPath('foo/buzz.jpg'); $result = $fileSystemService-&gt;rename($fileSystemRenameTransfer); update(FileSystemContentTransfer $fileSystemContentTransfer) Update an existing file. Return true on success, false on failure. &lt;?php
$fileSystemContentTransfer = new FileSystemContentTransfer();
$fileSystemContentTransfer-&gt;setFileSystemName('media');
$fileSystemContentTransfer-&gt;setPath('foo/bar.jpg');
$fileSystemContentTransfer-&gt;setContent('Lorem Ipsum'); $result = $fileSystemService-&gt;update($fileSystemContentTransfer); write(FileSystemContentTransfer $fileSystemContentTransfer) Write a new file. Return true on success, false on failure. &lt;?php
$fileSystemContentTransfer = new FileSystemContentTransfer();
$fileSystemContentTransfer-&gt;setFileSystemName('media');
$fileSystemContentTransfer-&gt;setPath('foo/bar.jpg');
$fileSystemContentTransfer-&gt;setContent('Lorem Ipsum'); $result = $fileSystemService-&gt;write($fileSystemRenameTransfer); Stream API putStream(FileSystemStreamTransfer $fileSystemStreamTransfer, $stream) Create a file or update if exists using stream. Return true on success, false on failure. &lt;?php
$fileSystemStreamTransfer = new FileSystemStreamTransfer();
$fileSystemStreamTransfer-&gt;setFileSystemName('media');
$fileSystemStreamTransfer-&gt;setPath('foo/bar.jpg'); $stream = fopen('some/file.jpg', 'r+');
$result = $fileSystemService-&gt;putStream($fileSystemStreamTransfer, $stream); if (is_resource($stream)) { fclose($stream);
} readStream(FileSystemStreamTransfer $fileSystemStreamTransfer) Retrieve stream for a file. Return a read-stream for the path, false on failure. &lt;?php
$fileSystemStreamTransfer = new FileSystemStreamTransfer();
$fileSystemStreamTransfer-&gt;setFileSystemName('media');
$fileSystemStreamTransfer-&gt;setPath('foo/bar.jpg'); $stream = $fileSystemService-&gt;readStream($fileSystemStreamTransfer); updateStream(FileSystemStreamTransfer $fileSystemStreamTransfer, $stream) Update an existing file using a stream. Return true on success, false on failure. &lt;?php
$fileSystemStreamTransfer = new FileSystemStreamTransfer();
$fileSystemStreamTransfer-&gt;setFileSystemName('media');
$fileSystemStreamTransfer-&gt;setPath('foo/bar.jpg'); $stream = fopen('some/file.jpg', 'r+');
$result = $fileSystemService-&gt;updateStream($fileSystemStreamTransfer, $stream); if (is_resource($stream)) { fclose($stream);
} writeStream(FileSystemStreamTransfer $fileSystemStreamTransfer, $stream) Write a new file using a stream. Return true on success, false on failure. &lt;?php
$fileSystemStreamTransfer = new FileSystemStreamTransfer();
$fileSystemStreamTransfer-&gt;setFileSystemName('media');
$fileSystemStreamTransfer-&gt;setPath('foo/bar.jpg'); $stream = fopen('some/file.jpg', 'r+');
$result = $fileSystemService-&gt;writeStream($fileSystemStreamTransfer, $stream); if (is_resource($stream)) { fclose($stream);
}</body>
</html>