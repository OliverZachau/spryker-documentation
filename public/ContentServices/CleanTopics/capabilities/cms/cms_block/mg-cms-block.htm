<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Migration Guide - CMS Block Upgrading from Version 1.* to Version 2.* This version allows to save CMS Block-Store relation. Updatespryker/cms-blockmodule to at least Version 2.0.0. Update yourspryker/cms-block-collectormodule to at least Version 2.0.0. You can find additional guide to migration here . Custom CMS Block Collector If you have a custom CMS Block Collector, make sure that it collects CMS Blocks only when the related CMS Block has an entity in thespy_cms_block_storetable for the desired store. Runvendor/bin/console transfer:generateto update and generate transfer object changes. Transfer object changes CmsBlocktransfer object has now aStoreRelationproperty which allows to retrieve/define the stores assigned to the current CMS Block. Install the database changes by runningvendor/bin/console propel:diff. Propel should generate a migration file with the changes. Apply the database changes:vendor/bin/console propel:migrate. Generate and update ORM models:vendor/bin/console propel:model:build. You will find some new classes in your project under\Orm\Zed\CmsBlock\Persistencenamespace. It’s important to make sure that they extend the base classes from the Spryker core, e.g.: \Orm\Zed\CmsBlock\Persistence\SpyCmsBlockStoreextends\Spryker\Zed\CmsBlock\Persistence\Propel\AbstractSpyCmsBlockStore \Orm\Zed\CmsBlock\Persistence\SpyCmsBlockStoreQueryextends\Spryker\Zed\CmsBlock\Persistence\Propel\AbstractSpyCmsBlockStoreQuery The newly createdspy_cms_block_storetable defines 1 row per CMS Block-store association. Populate this table according to your requirements. Example data Assumptions You have the following CMS Blocks: Block_1, Block_2. You have the following stores: AT, DE, US. Thespy_cms_block_storecan have a configuration like this: FK_CMS_BLOCK FK_STORE Block_1 AT Block_1 DE Block_1 US Block_2 AT This example defines "Block_1" to be enabled in all of your stores, but restricts "Block_2" to AT store only. IMPORTANT:even if you have 1 store, the associations between CMS Blocks and stores have to be defined. Example migration query To populate the newspy_cms_block_storetable to have all CMS Blocks in all stores as an initial configuration, run the following query: PostgreSQL:
INSERT INTO spy_cms_block_store (id_cms_block_store, fk_cms_block, fk_store) SELECT nextval('id_cms_block_store_pk_seq'), id_cms_block, id_store FROM spy_cms_block, spy_store; MySQL:
INSERT INTO spy_cms_block_store (fk_cms_block, fk_store) SELECT id_cms_block, id_store FROM spy_cms_block, spy_store; Additionally, the following internal classes/methods have changed. Take a look if you have customized them: CmsBlockGlossaryManager::getCmsBlockEntity() CmsBlockReader::findCmsBlockById() CmsBlockQueryContainer::queryCmsBlockByIdWithTemplateWithGlossary() CmsBlockMapper CmsBlockWriter You can find more details for these changes on CMS Block module release page . CMS Block is ready to be used in multi-store environment. Additionally you might want to update thespryker/cms-block-guiAdministration Intervace to manage CMS Blocks and their store configuration. You can find further information about multi-store CMS Blocks here , and Zed Admin UI module migration guide here . See also: Learn how to migrate CMS Block Collector Learn how to migrate CMS Block GUI Learn more about Multi-store CMS Block Learn how to use CMS blocks Last review date: Jan. 31st, 2018</body>
</html>