<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>To integrate the prepayment method into the checkout, we are required to provide implementations for these 2 plugins: CheckoutPreCondition PaymentSaveOrder Add the following 2 plugins in Zed, inside theCommunication/Plugin/Checkoutfolder of the new added(Undefined variable: General.bundle/module).PrepaymentPreCheckPlugin: Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout; use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPreCheckPluginInterface; class PrepaymentPreCheckPlugin extends AbstractPlugin implements CheckoutPreCheckPluginInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer * * @return \Generated\Shared\Transfer\CheckoutResponseTransfer */ public function checkCondition(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer) { return $checkoutResponseTransfer; } } PrepaymentSaveOrderPlugin: Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout; use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutSaveOrderPluginInterface; class PrepaymentSaveOrderPlugin extends AbstractPlugin implements CheckoutSaveOrderPluginInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer * * @return void */ public function saveOrder(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer) { }
} Next, inject these 2 plugins in thePayment(Undefined variable: General.bundle/module)by creating aPaymentDependencyInjectorunderDependency/Injectorfolder: Click to expand the code sample &lt;?php
namespace Pyz\Zed\PaymentMethods\Dependency\Injector; use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\PrepaymentPreCheckPlugin;
use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\PrepaymentSaveOrderPlugin;
use Spryker\Zed\Kernel\Container;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Spryker\Zed\Kernel\Dependency\Injector\AbstractDependencyInjector;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPluginCollection;
use Spryker\Zed\Payment\PaymentDependencyProvider; class PaymentDependencyInjector extends AbstractDependencyInjector
{ /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function injectBusinessLayerDependencies(Container $container) { $container = $this-&gt;injectPaymentPlugins($container); return $container; } /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ protected function injectPaymentPlugins(Container $container) { $container-&gt;extend(PaymentDependencyProvider::CHECKOUT_PLUGINS, function (CheckoutPluginCollection $pluginCollection) { $pluginCollection-&gt;add(new PrepaymentPreCheckPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_PRE_CHECK_PLUGINS); $pluginCollection-&gt;add(new PrepaymentSaveOrderPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_ORDER_SAVER_PLUGINS); return $pluginCollection; }); return $container; } } Link the prepayment state machine to process the orders submitted with the payment method we’re implementing. We’ll use the prepayment state machine that’s delivered with Demoshop. Add this configuration in theSalesConfigclass: /** * @var array */ protected static $stateMachineMapper = [ //.. PaymentMethodsConstants::PAYMENT_PREPAYMENT_FORM_PROPERTY_PATH =&gt; OmsConfig::ORDER_PROCESS_PREPAYMENT_01, ];</body>
</html>