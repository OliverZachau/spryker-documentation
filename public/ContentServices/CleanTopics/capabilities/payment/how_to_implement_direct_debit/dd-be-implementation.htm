<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Persist payment details
The payment details for the direct debit payment method need to be persisted in the database. We’ll define a new table to store this data; inside thePersistence/Propel/Schema/folder in Zed add thespy_directdebit_schema.xmlfile with the following content: &lt;?xml version="1.0"?&gt;
&lt;database xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="zed" defaultIdMethod="native" xsi:noNamespaceSchemaLocation="http://static.spryker.com/schema-01.xsd" namespace="Orm\Zed\PaymentMethods\Persistence" package="src.Orm.Zed.PaymentMethods.Persistence"&gt; &lt;table name="spy_payment_directdebit"&gt; &lt;column name="id_payment_directdebit" type="INTEGER" autoIncrement="true" primaryKey="true"/&gt; &lt;column name="fk_sales_order" required="true" type="INTEGER"/&gt; &lt;column name="bank_account_holder" type="VARCHAR"/&gt; &lt;column name="bank_account_bic" type="VARCHAR" size="100"/&gt; &lt;column name="bank_account_iban" type="VARCHAR" size="50"/&gt; &lt;foreign-key name="spy_payment_directdebit-fk_sales_order" foreignTable="spy_sales_order"&gt; &lt;reference foreign="id_sales_order" local="fk_sales_order"/&gt; &lt;/foreign-key&gt; &lt;behavior name="timestampable"/&gt; &lt;id-method-parameter value="spy_payment_directdebit_pk_seq"/&gt; &lt;/table&gt; &lt;/database&gt; To perform a database migration and for the query object to be generated, run the following command: vendor/bin/console propel:install We’ll continue with adding the implementation for saving direct debit payment details in the persistence layer. Create thePaymentMethodsPersistenceFactoryclass inside the persistence layer: &lt;?php namespace Pyz\Zed\PaymentMethods\Persistence; use Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery;
use Spryker\Zed\Kernel\Persistence\AbstractPersistenceFactory; /** * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainer getQueryContainer() */
class PaymentMethodsPersistenceFactory extends AbstractPersistenceFactory
{ /** * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery */ public function createPaymentDirectDebitQuery() { return SpyPaymentDirectDebitQuery::create(); } } Implement thePaymentMethodsQueryContainer: &lt;?php namespace Pyz\Zed\PaymentMethods\Persistence; use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer; /** * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsPersistenceFactory getFactory() */
class PaymentMethodsQueryContainer extends AbstractQueryContainer implements PaymentMethodsQueryContainerInterface
{ /** * @param int $idSalesOrder * * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery */ public function queryPaymentBySalesOrderId($idSalesOrder) { return $this -&gt;queryDirectDebit() -&gt;filterByFkSalesOrder($idSalesOrder); } /** * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery */ protected function queryDirectDebit() { return $this-&gt;getFactory()-&gt;createPaymentDirectDebitQuery(); } } Add the interface for the query container: &lt;?php namespace Pyz\Zed\PaymentMethods\Persistence; use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface; interface PaymentMethodsQueryContainerInterface extends QueryContainerInterface
{ /** * @param int $idSalesOrder * * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery */ public function queryPaymentBySalesOrderId($idSalesOrder);
} Save Direct Debit Payment Details We’ll add the logic for saving and viewing the direct debit payment details in the business layer and expose it through thePaymentMethodsFacade. In theBusiness/Model/folder add theDirectDebitclass, where we’ll implement the logic for viewing the direct debit payment details. Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Business\Model; use Generated\Shared\Transfer\DirectDebitPaymentTransfer;
use Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainer; class DirectDebit implements DirectDebitInterface
{ /** * @var \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface */ protected $queryContainer; /** * @param \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface $queryContainer */ public function __construct(PaymentMethodsQueryContainerInterface $queryContainer) { $this-&gt;queryContainer = $queryContainer; } /** * @param int $salesOrderId * * @return \Generated\Shared\Transfer\DirectDebitPaymentTransfer */ public function getPaymentForOrderId($salesOrderId) { $entity = $this-&gt;queryContainer-&gt;queryPaymentBySalesOrderId($salesOrderId)-&gt;findOne(); $directDebitTransfer = new DirectDebitPaymentTransfer(); $directDebitTransfer-&gt;fromArray($entity-&gt;toArray(), true); return $directDebitTransfer; } /** * @param int $salesOrderId * * @return bool */ public function hasPaymentForOrderId($salesOrderId) { $entity = $this-&gt;queryContainer-&gt;queryPaymentBySalesOrderId($salesOrderId)-&gt;findOne(); return $entity !== null; } } In theBusiness/Model/folder add theOrderSaverclass where we’ll implement the logic for persisting the direct debit payment details. Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Business\Model; use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebit;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants; class OrderSaver implements OrderSaverInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer * * @return void */ public function saveOrderPayment(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer) { if ($quoteTransfer-&gt;requirePayment()-&gt;getPayment()-&gt;requirePaymentMethod()-&gt;getPaymentMethod() == PaymentMethodsConstants::PAYMENT_METHOD_DIRECTDEBIT) { $this-&gt;saveDirectDebit($quoteTransfer, $checkoutResponseTransfer); } } /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer * * @throws \Propel\Runtime\Exception\PropelException * * @return void */ protected function saveDirectDebit(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer) { $entity = new SpyPaymentDirectDebit(); $directDebitTransfer = $quoteTransfer-&gt;requirePayment()-&gt;getPayment()-&gt;requirePaymentdirectdebit()-&gt;getPaymentdirectdebit(); $entity-&gt;fromArray($directDebitTransfer-&gt;toArray()); $entity -&gt;setFkSalesOrder($checkoutResponseTransfer-&gt;getSaveOrder()-&gt;getIdSalesOrder()); $entity-&gt;save(); }
} Implement thePaymentMethodsBusinessFactoryto get instances for these 2 classes: Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Business; use Pyz\Zed\PaymentMethods\Business\Model\DirectDebit;
use Pyz\Zed\PaymentMethods\Business\Model\OrderSaver;
use Spryker\Zed\Kernel\Business\AbstractBusinessFactory; /** * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface getQueryContainer() */
class PaymentMethodsBusinessFactory extends AbstractBusinessFactory
{ /** * @return \Pyz\Zed\PaymentMethods\Business\Model\OrderSaverInterface */ public function createOrderSaver() { return new OrderSaver(); } /** * @return \Pyz\Zed\PaymentMethods\Business\Model\DirectDebitInterface */ public function createDirectDebit() { return new DirectDebit($this-&gt;getQueryContainer()); } } Expose the save/retrieve direct debit payment details through thePaymentMethodsFacade: Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Business; use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Business\AbstractFacade; /** * @method \Pyz\Zed\PaymentMethods\Business\PaymentMethodsBusinessFactory getFactory() */
class PaymentMethodsFacade extends AbstractFacade implements PaymentMethodsFacadeInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer * * @return void */ public function saveOrderPayment(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer) { $this-&gt;getFactory()-&gt;createOrderSaver()-&gt;saveOrderPayment($quoteTransfer, $checkoutResponseTransfer); } /** * @param int $idSalesOrder * * @return \Generated\Shared\Transfer\DirectDebitPaymentTransfer */ public function getOrderDirectDebit($idSalesOrder) { return $this-&gt;getFactory()-&gt;createDirectDebit()-&gt;getPaymentForOrderId($idSalesOrder); } /** * @param int $idSalesOrder * * @return bool */ public function hasOrderDirectDebit($idSalesOrder) { return $this-&gt;getFactory()-&gt;createDirectDebit()-&gt;hasPaymentForOrderId($idSalesOrder); } } List direct debit payment details in Zed UI In Zed, when looking over the details on a submitted order, we would like to see the payment details. Extend the order details page by adding thePaymentMethods/Presentation/Sales/list.twigtemplate with the following content: Click to expand the code sample {% if (idPayment) %} &lt;div class="row"&gt; &lt;div class="col-sm-12"&gt; {% embed '@Gui/Partials/widget.twig' with { widget_title: 'Direct Debit' | trans } %} {% block widget_content %} &lt;table class="footable table table-striped toggle-arrow-tiny"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;strong&gt;{{ 'Account Holder' | trans }}&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;{{ paymentDetails.bankAccountHolder }}&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;strong&gt;{{ 'IBAN' | trans }}&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;{{ paymentDetails.bankAccountIban }}&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;strong&gt;{{ 'BIC' | trans }}&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;{{ paymentDetails.bankAccountBic }}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; {% endblock %} {% endembed %} &lt;/div&gt; &lt;/div&gt;
{% endif %} Add the corresponding controller action for this view inPaymentMethods/Communication/Controller/SalesController.php: Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Communication\Controller; use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request; /** * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface getQueryContainer() * @method \Pyz\Zed\PaymentMethods\Business\PaymentMethodsFacadeInterface getFacade() */
class SalesController extends AbstractController
{ /** * @param \Symfony\Component\HttpFoundation\Request $request * * @return array */ public function listAction(Request $request) { $orderTransfer = $request-&gt;request-&gt;get('orderTransfer'); $idSalesOrder = $this-&gt;castId($orderTransfer-&gt;requireIdSalesOrder()-&gt;getIdSalesOrder()); if ($this-&gt;getFacade()-&gt;hasOrderDirectDebit($idSalesOrder)) { $directDebitTransfer = $this-&gt;getFacade()-&gt;getOrderDirectDebit($idSalesOrder); return [ 'idPayment' =&gt; $directDebitTransfer-&gt;getIdPaymentDirectdebit(), 'paymentDetails' =&gt; $directDebitTransfer, ]; } return [ 'idPayment' =&gt; null, 'paymentDetails' =&gt; null, ]; }
} Checkout plugins To integrate the direct debit method into the checkout, we need to provide implementations for these 2 plugins: CheckoutPreCondition PaymentSaveOrder Add the following 2 plugins in Zed, inside theCommunication/Plugin/Checkout/folder of the new added(Undefined variable: General.bundle/module).DirectDebitPreCheckPlugin: &lt;?php namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout; use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPreCheckPluginInterface; class DirectDebitPreCheckPlugin extends AbstractPlugin implements CheckoutPreCheckPluginInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer * * @return \Generated\Shared\Transfer\CheckoutResponseTransfer */ public function checkCondition(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer) { return $checkoutResponseTransfer; } } TheDirectDebitSaveOrderPlugin: Click to expand the code sample &lt;?php namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout; use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutSaveOrderPluginInterface; /** * @method \Pyz\Zed\PaymentMethods\Business\PaymentMethodsFacade getFacade() */
class DirectDebitSaveOrderPlugin extends AbstractPlugin implements CheckoutSaveOrderPluginInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer * * @return void */ public function saveOrder(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer) { $this-&gt;getFacade()-&gt;saveOrderPayment($quoteTransfer, $checkoutResponseTransfer); }
} Next, inject these 2 plugins in thePayment (Undefined variable: General.bundle/module)by creating aPaymentDependencyInjectorunder theDependency/Injector/folder: Click to expand the code sample &lt;?php
namespace Pyz\Zed\PaymentMethods\Dependency\Injector; use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\DirectDebitPreCheckPlugin;
use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\DirectDebitSaveOrderPlugin;
use Spryker\Zed\Kernel\Container;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Spryker\Zed\Kernel\Dependency\Injector\AbstractDependencyInjector;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPluginCollection;
use Spryker\Zed\Payment\PaymentDependencyProvider; class PaymentDependencyInjector extends AbstractDependencyInjector
{ /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function injectBusinessLayerDependencies(Container $container) { $container = $this-&gt;injectPaymentPlugins($container); return $container; } /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ protected function injectPaymentPlugins(Container $container) { $container-&gt;extend(PaymentDependencyProvider::CHECKOUT_PLUGINS, function (CheckoutPluginCollection $pluginCollection) { $pluginCollection-&gt;add(new DirectDebitPreCheckPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_PRE_CHECK_PLUGINS); $pluginCollection-&gt;add(new DirectDebitSaveOrderPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_ORDER_SAVER_PLUGINS); return $pluginCollection; }); return $container; } } State Machine Next, we’ll need to design a state machine that’s dedicated for processing orders that use direct debit as a payment type. Add theDirectDebit.xmlfile inside theconfig/Zed/oms/ folder, with the following content: Click to expand the code sample &lt;?xml version="1.0"?&gt;
&lt;statemachine xmlns="spryker:oms-01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="spryker:oms-01 http://static.spryker.com/oms-01.xsd"&gt; &lt;process name="DirectDebit" main="true"&gt; &lt;states&gt; &lt;state name="new" reserved="true"/&gt; &lt;state name="payment issued" /&gt; &lt;state name="payment received" /&gt; &lt;state name="order shipped" /&gt; &lt;state name="ready for return" /&gt; &lt;state name="completed" /&gt; &lt;state name="cancelled" /&gt; &lt;state name="refunded" /&gt; &lt;state name="returned" /&gt; &lt;state name="payment clarification needed" /&gt; &lt;/states&gt; &lt;transitions&gt; &lt;transition&gt; &lt;source&gt;new&lt;/source&gt; &lt;target&gt;payment issued&lt;/target&gt; &lt;event&gt;capture direct debit&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;payment issued&lt;/source&gt; &lt;target&gt;payment received&lt;/target&gt; &lt;event&gt;payment received&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;payment issued&lt;/source&gt; &lt;target&gt;payment clarification needed&lt;/target&gt; &lt;event&gt;clarify payment&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;payment clarification needed&lt;/source&gt; &lt;target&gt;payment issued&lt;/target&gt; &lt;event&gt;capture direct debit&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;payment clarification needed&lt;/source&gt; &lt;target&gt;cancelled&lt;/target&gt; &lt;event&gt;cancel&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;payment received&lt;/source&gt; &lt;target&gt;order shipped&lt;/target&gt; &lt;event&gt;ship order&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;order shipped&lt;/source&gt; &lt;target&gt;ready for return&lt;/target&gt; &lt;event&gt;ready for return&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;ready for return&lt;/source&gt; &lt;target&gt;completed&lt;/target&gt; &lt;event&gt;item not returned&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;new&lt;/source&gt; &lt;target&gt;cancelled&lt;/target&gt; &lt;event&gt;cancel&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;payment received&lt;/source&gt; &lt;target&gt;refunded&lt;/target&gt; &lt;event&gt;refund&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;refunded&lt;/source&gt; &lt;target&gt;cancelled&lt;/target&gt; &lt;event&gt;cancel&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;returned&lt;/source&gt; &lt;target&gt;refunded&lt;/target&gt; &lt;event&gt;refund&lt;/event&gt; &lt;/transition&gt; &lt;transition&gt; &lt;source&gt;ready for return&lt;/source&gt; &lt;target&gt;returned&lt;/target&gt; &lt;event&gt;return received&lt;/event&gt; &lt;/transition&gt; &lt;/transitions&gt; &lt;events&gt; &lt;event name="capture direct debit" manual="true" /&gt; &lt;event name="payment received" manual="true" /&gt; &lt;event name="ship order" manual="true" /&gt; &lt;event name="ready for return" onEnter="true" /&gt; &lt;event name="item not returned" timeout="30days" /&gt; &lt;event name="cancel" manual="true" /&gt; &lt;event name="refund" manual="true" /&gt; &lt;event name="return received" manual="true" /&gt; &lt;event name="clarify payment" manual="true" /&gt; &lt;/events&gt; &lt;/process&gt;
&lt;/statemachine&gt; Add this new state machine to theOmsConfig: &lt;?php const ORDER_PROCESS_DIRECTDEBIT = 'DirectDebit'; /** * @return array */ public function getActiveProcesses() { return [ //.. static::ORDER_PROCESS_DIRECTDEBIT, ]; } Link the direct debit state machine to process the orders submitted with the payment method we’re implementing. Add this configuration in theSalesConfigclass: /** * @var array */ protected static $stateMachineMapper = [ //.. PaymentMethodsConstants::PAYMENT_DIRECTDEBIT_FORM_PROPERTY_PATH =&gt; OmsConfig::ORDER_PROCESS_DIRECTDEBIT, ];</body>
</html>