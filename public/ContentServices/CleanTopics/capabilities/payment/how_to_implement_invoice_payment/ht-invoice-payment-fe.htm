<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Creating the Form In Yves, we’ll start by building the form. Add the new(Undefined variable: General.bundle/module)also in Yves and add aForm/folder where we’ll place the implementation for building the form. First add the data provider, inside theForm/DataProvider/folder: Click to expand the code sample &lt;?php
namespace Pyz\Yves\PaymentMethods\Form\DataProvider; use Generated\Shared\Transfer\QuoteTransfer;
use Pyz\Yves\Checkout\Dependency\DataProvider\DataProviderInterface; class InvoiceDataProvider implements DataProviderInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * * @return \Generated\Shared\Transfer\QuoteTransfer */ public function getData(QuoteTransfer $quoteTransfer) { return $quoteTransfer; } /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * * @return array */ public function getOptions(QuoteTransfer $quoteTransfer) { return []; } } Then implement the form: Click to expand the code sample &lt;?php namespace Pyz\Yves\PaymentMethods\Form; use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Pyz\Yves\Checkout\Dependency\CheckoutAbstractSubFormType;
use Pyz\Yves\Checkout\Dependency\SubFormInterface;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface; class InvoiceSubForm extends CheckoutAbstractSubFormType implements SubFormInterface
{ /** * @const string */ const PAYMENT_PROVIDER = PaymentMethodsConstants::PROVIDER; /** * @const string */ const PAYMENT_METHOD = PaymentMethodsConstants::PAYMENT_METHOD_INVOICE; /** * @return string */ public function getPropertyPath() { return PaymentMethodsConstants::PAYMENT_INVOICE_FORM_PROPERTY_PATH; } /** * @return string */ public function getName() { return static::PAYMENT_PROVIDER . '_' . static::PAYMENT_METHOD; } /** * @return string */ public function getTemplatePath() { return static::PAYMENT_PROVIDER . '/' . static::PAYMENT_METHOD; } /** * @param \Symfony\Component\OptionsResolver\OptionsResolverInterface $resolver * * @return void */ public function setDefaultOptions(OptionsResolverInterface $resolver) { parent::setDefaultOptions($resolver); $resolver-&gt;setDefaults([ SubFormInterface::OPTIONS_FIELD_NAME =&gt; [], ]); }
} To plug this form into checkout, add a plugin for it inside thePlugin/folder: Click to expand the code sample &lt;?php namespace Pyz\Yves\PaymentMethods\Plugin; use Spryker\Yves\Kernel\AbstractPlugin;
use Spryker\Yves\StepEngine\Dependency\Plugin\Form\SubFormPluginInterface; /** * @method \Pyz\Yves\PaymentMethods\PaymentMethodsFactory getFactory() */
class InvoiceSubFormPlugin extends AbstractPlugin implements SubFormPluginInterface
{ /** * @return \Pyz\Yves\PaymentMethods\Form\InvoiceSubForm */ public function createSubForm() { return $this-&gt;getFactory()-&gt;createInvoiceForm(); } /** * @return \Pyz\Yves\Checkout\Dependency\DataProvider\DataProviderInterface */ public function createSubFormDataProvider() { return $this-&gt;getFactory()-&gt;createInvoiceFormDataProvider(); } } Payment Handler To be able to handle this new payment type, add theInvoiceHandlerclass inside theHandler/folder: Click to expand the code sample &lt;?php namespace Pyz\Yves\PaymentMethods\Handler; use Generated\Shared\Transfer\QuoteTransfer;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Symfony\Component\HttpFoundation\Request; class InvoiceHandler
{ /** * @const string */ const PAYMENT_PROVIDER = PaymentMethodsConstants::PROVIDER; /** * @const string */ const PAYMENT_METHOD = PaymentMethodsConstants::PAYMENT_METHOD_INVOICE; /** * @param \Symfony\Component\HttpFoundation\Request $request * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * * @return \Generated\Shared\Transfer\QuoteTransfer */ public function addPaymentToQuote(Request $request, QuoteTransfer $quoteTransfer) { $quoteTransfer-&gt;getPayment() -&gt;setPaymentProvider(static::PAYMENT_PROVIDER) -&gt;setPaymentMethod(static::PAYMENT_METHOD); return $quoteTransfer; }
} To plug this payment handler into checkout, add a plugin for it under thePlugin/folder: Click to expand the code sample &lt;?php namespace Pyz\Yves\PaymentMethods\Plugin; use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
use Spryker\Yves\Kernel\AbstractPlugin;
use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginInterface;
use Symfony\Component\HttpFoundation\Request; /** * @method \Pyz\Yves\PaymentMethods\PaymentMethodsFactory getFactory() */
class InvoiceHandlerPlugin extends AbstractPlugin implements StepHandlerPluginInterface
{ /** * @param \Symfony\Component\HttpFoundation\Request $request * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * * @return \Generated\Shared\Transfer\QuoteTransfer */ public function addToDataClass(Request $request, QuoteTransfer $quoteTransfer) { $this-&gt;getFactory()-&gt;createInvoiceHandler()-&gt;addPaymentToQuote($request, $quoteTransfer); } } Invoice Twig Template Add the Twig template that will be rendered when invoice payment method is selected under the configured path: in Yves, createinvoice.twigtemplate file inPaymentMethods/Theme/thenApplicationConstants::YVES_THEMEconfig value directory. Adjust the path according to the theme you are currently using. &lt;div class="payment-subform paymentmethods-invoice-form"&gt; {# Place the details regarding invoice here #} {{ form_widget(form.paymentmethods_invoice) }} {{ form_errors(form.paymentmethods_invoice) }}
&lt;/div&gt; Don’t forget to add the factory and the dependency provider for this new added(Undefined variable: General.bundle/module)in Yves.</body>
</html>