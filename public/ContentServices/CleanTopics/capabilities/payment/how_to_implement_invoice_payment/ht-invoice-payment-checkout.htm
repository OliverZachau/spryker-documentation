<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>The next step is to integrate the invoice payment into Checkout. In thePaymentMethods/Dependency/Injectorfrom Yves add theCheckoutDependencyInjectorthat will inject the invoice form and handler into theCheckout(Undefined variable: General.bundle/module): Click here to expand the code sample &lt;?php namespace Pyz\Yves\PaymentMethods\Dependency\Injector; use Spryker\Shared\Kernel\ContainerInterface;
use Spryker\Shared\Kernel\Dependency\Injector\DependencyInjectorInterface;
use Spryker\Yves\Checkout\CheckoutDependencyProvider;
use Pyz\Yves\PaymentMethods\Plugin\InvoiceHandlerPlugin;
use Pyz\Yves\PaymentMethods\Plugin\InvoiceSubFormPlugin;
use Spryker\Yves\StepEngine\Dependency\Plugin\Form\SubFormPluginCollection;
use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginCollection;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants; class CheckoutDependencyInjector implements DependencyInjectorInterface
{ /** * @param \Spryker\Shared\Kernel\ContainerInterface|\Spryker\Yves\Kernel\Container $container * * @return \Spryker\Shared\Kernel\ContainerInterface|\Spryker\Yves\Kernel\Container */ public function inject(ContainerInterface $container) { $container = $this-&gt;injectPaymentSubForms($container); $container = $this-&gt;injectPaymentMethodHandler($container); return $container; } /** * @param \Spryker\Shared\Kernel\ContainerInterface $container * * @return \Spryker\Shared\Kernel\ContainerInterface */ protected function injectPaymentSubForms(ContainerInterface $container) { $container-&gt;extend(static::PAYMENT_SUB_FORMS, function (SubFormPluginCollection $paymentSubForms) { $paymentSubForms-&gt;add(new InvoiceSubFormPlugin()); return $paymentSubForms; }); return $container; } /** * @param \Spryker\Shared\Kernel\ContainerInterface $container * * @return \Spryker\Shared\Kernel\ContainerInterface */ protected function injectPaymentMethodHandler(ContainerInterface $container) { $container-&gt;extend(static::PAYMENT_METHOD_HANDLER, function (StepHandlerPluginCollection $paymentMethodHandler) { $paymentMethodHandler-&gt;add(new InvoiceHandlerPlugin(), PaymentMethodsConstants::PROVIDER); return $paymentMethodHandler; }); return $container; }
} If you recreated this example in Demoshop, you’ll need to do some adjustments on theselectPayment()fromcheckout.js.</body>
</html>