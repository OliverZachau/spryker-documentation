<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>FilterPreferences - Search In Zed there’s a section (Search and Filters -&gt; Filter Preferences) for managing the product attributes that you’d like to filter by in the shop. There are several filter types that the framework supports at the moment: single-select: filter for one value at a time (e.g. radio group), multi-select: filter multiple values at a time (e.g. checkbox group), range: filter using numeric ranges. Similar to search preferences, after adding/updating all necessary filters, you’ll need to apply the changes by clicking on the “Synchronize filter preferences” button. This will trigger an action that searches for all products that have those attributes and that were modified since the last synchronization and touches them. This means that next time, the search collector execution will update the necessary products, so they will be available when submitting a filtered search query. To be able to use the dynamic filters, there are several things that you need to take care of. Make sure you use the necessary plugins for faceted navigation and filters . Make sure to register\Spryker\Zed\ProductSearch\Communication\Plugin\ProductSearchConfigExtensionCollectorPluginunderSpryker\Zed\Collector\CollectorDependencyProvider::STORAGE_PLUGINS. This collector plugin will collect product search related configuration information from the database and persist it in the Redis storage, so the front-end can access this information fast enough whenever a search query is executed. To make use of the collected data (i.e. read it from redis) and extend the static search configuration, you’ll need to add an instance of\Spryker\Client\ProductSearch\Plugin\Config\ProductSearchConfigExpanderPlugintoPyz\Client\Search\SearchDependencyProvider::createSearchConfigExpanderPlugins()as shown below. &lt;?php namespace Pyz\Client\Search; use Spryker\Client\Kernel\Container;
use Spryker\Client\ProductSearch\Plugin\Config\ProductSearchConfigExpanderPlugin;
use Spryker\Client\Search\SearchDependencyProvider as SprykerSearchDependencyProvider; class SearchDependencyProvider extends SprykerSearchDependencyProvider
{ /** * @param \Spryker\Client\Kernel\Container $container * * @return \Spryker\Client\Search\Dependency\Plugin\SearchConfigExpanderPluginInterface[] */ protected function createSearchConfigExpanderPlugins(Container $container) { $searchConfigExpanderPlugins = parent::createSearchConfigExpanderPlugins($container); $searchConfigExpanderPlugins[] = new ProductSearchConfigExpanderPlugin(); return $searchConfigExpanderPlugins; } } After these steps you should be able to retrieve the necessary data to render filters, after executing a search request.</body>
</html>