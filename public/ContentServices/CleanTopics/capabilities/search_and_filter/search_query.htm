<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Once we have all necessary data in Elasticsearch, it’s time to display them inYves. In order to achieve this, we first need to query Elasticsearch, which will return raw data for us that we need to Process Query Result to display it in our templates. In theSearchClientyou can find thesearch()method(\Spryker\Client\Search\SearchClientInterface::search()). This is the method that you need to call to execute any search query. It expects to receive an instance of\Spryker\Client\Search\Dependency\Plugin\QueryInterfaceas first parameter, which represents the query itself, and a collection of\Spryker\Client\Search\Dependency\Plugin\ResultFormatterPluginInterfaceinstances which will be applied on the response data to format it. Querying Elasticsearch The first thing we need to do is to implement theQueryInterface. To communicate with Elasticsearch, Spryker uses the Elastica library as aData Query Language. Inside theQueryInterfaceyou need to create an instance of\Elastica\Query, configure it to fit your needs, then return it withgetSearchQuery(). This is the point where configuring the query is completely up to you, use Elastica to alter the query for your needs, add filters, aggregations, boosts, sorting, pagination or anything else you like and Elasticsearch enables you. TheQueryInterfaceinstance is a stateful class; sometimesgetSearchQuery()method is called multiple times and alters the original query (see: Expandig queries), so you need to make sure that it returns the same instance. This can be achieved by creating the\Elastica\Queryinstance atconstruction time and just return it in the getSearchQuery() method. Click to expand the code sample &lt;?php namespace Pyz\Client\Catalog\Plugin\Query; use Elastica\Query;
use Elastica\Query\MatchAll;
use Generated\Shared\Search\PageIndexMap;
use Spryker\Client\Kernel\AbstractPlugin;
use Spryker\Client\Search\Dependency\Plugin\QueryInterface; class MatchAllQueryPlugin extends AbstractPlugin implements QueryInterface
{ /** * @var \Elastica\Query */ protected $query; /** * @param string $searchString */ public function __construct() { $this--&gt;query = $this-&gt;createSearchQuery(); } /** * @return \Elastica\Query */ public function getSearchQuery() { return $this--&gt;query; } /** * @return \Elastica\Query */ protected function createSearchQuery() { $query = new Query(); $query = $this-&gt;addMatchAllQuery($query); $query-&gt;setSource([PageIndexMap::SEARCH_RESULT_DATA]); return $query; } /** * @param \Elastica\Query $baseQuery * * @return \Elastica\Query */ protected function addMatchAllQuery(Query $baseQuery) { $baseQuery-&gt;setQuery(new MatchAll()); return $baseQuery; } } In the example above, a simple query is created, which will return all the documents from our mapping type. To execute this query you need to call thesearch()method of theSearchClient. Expanding Queries Query expanders are a way to reuse partial queries to build more complex ones. The suggested way to create queries is to create the simplest possible query as a base query for your usecase, then use query expanders to expand it with other reusable behaviors, such as pagination, sorting, etc. You can create a new expander by implementing\Spryker\Client\Search\Dependency\Plugin\QueryExpanderPluginInterface. Again, if you use query expanders, make sure that your base query is expandable, so it provides the same instance by callinggetSearchQuery()multiple times. To expand a base query with a collection of expanders, you’ll need to useexpandQuery()method from theSearchClient. &lt;?php // ... /** * @var \Spryker\Client\Search\SearchClientInterface */ protected $searchClient; // ... /** * @param \Spryker\Client\Search\Dependency\Plugin\QueryInterface $baseQuery * @param \Spryker\Client\Search\Dependency\Plugin\QueryExpanderPluginInterface[] $queryExpanders * @param array $requestParameters * * @return \Spryker\Client\Search\Dependency\Plugin\QueryInterface */ protected function expandBaseQuery(QueryInterface $baseQuery, array $queryExpanders, array $requestParameters) { $searchQuery = $this -&gt;searchClient -&gt;expandQuery($baseQuery, $queryExpanders, $requestParameters); return $searchQuery; } // ... Spryker provides the following query expander plugins: Filtering by Store The Filter by Store feature is a background capability that enables filtering content according to the request’s store. To filter content according to the request’s store, use:\Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\StoreQueryExpanderPlugin Filtering by Locale The Filter by Locale feature is a background capability that enables filtering content according to the request’s locale. To filter content according to the request’s store, use:\Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\LocalizedQueryExpanderPlugin Filtering by "Is Active" Flag To display only active records in search results you can use\Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\IsActiveQueryExpanderPlugin. Add this to expander plugin stack, for example\Pyz\Client\Catalog\CatalogDependencyProvider::createSuggestionQueryExpanderPlugins. You also have to export is-active field by your search collector. The value for it is boolean. Filtering by "Is Active" Within a Given Date Range To display only record which are active within given date range use\Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\IsActiveInDateRangeQueryExpanderPluginAdd this plugin to expander plugin stack, for example\Pyz\Client\Catalog\CatalogDependencyProvider::createSuggestionQueryExpanderPluginsYou also have to export `active-from` and `active-to` by your search collector. The value is any valid Elasticsearch Date datatype value you can read more about it here . Faceted Navigation and Filters The Faceted Navigation and Filtering feature adds the ability to re-filter search results by specific criteria. Commonly displayed on the left side of the catalog page. The responsibility of\Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\FacetQueryExpanderPluginis to add the necessary aggregations to your query based on a predefined configuration (see: Configure Search Features section). You can use this plugin to get the necessary data for faceted navigation of your search results. If you use this plugin, also make sure to add the\Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\FacetResultFormatterPluginto your result formatter collection, which takes care of processing the returned raw aggregation data. In order to optimize facet aggregations, Search module combines all fields in groups of simple faceted aggregations (e.g. string-facet). But in some cases you need more control on facet generation. To manage each facet filter separately, findaggregationParamsfield inFacetConfigTransfer. If no custom parameters are set to a facet config, it will be grouped by default. But if your project requires more, feel free to replace default behavior in provided extension points.FacetQueryExpanderPlugin,FacetResultFormatterPluginare good points to start. Paginating the Results Provides information about paginating the catalog pages and their current state. \Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\PaginatedQueryExpanderPlugintakes care of paginating your results based on the predefined configuration. If you use this plugin, also make sure to add the\Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\PaginatedResultFormatterPluginto your result formatter collection. Sorting the Results Provides information and functionality necessary for sorting results. \Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\SortedQueryExpanderPlugintakes care of sorting your results based on the predefined configuration. The necessary result formatter for this plugin is\Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\SortedResultFormatterPlugin Spelling Suggestion Adds a spelling correction suggestion to search results. Use\Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\SpellingSuggestionQueryExpanderPluginto let Elasticsearch provide “did you mean” suggestions for full-text search typos. The suggestions are collected from thesuggestion_termsfield ofpageindex map, so you need to make sure to store only those information inside this field that you’d like to use for this purpose. The necessary result formatter for this plugin is\Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\SpellingSuggestionResultFormatterPlugin Suggestions by Page Type Provides results by page type such as products, category and CMS pages. Use\Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\SuggestionByTypeQueryExpanderPluginto return sets of documents matching a full-text search query grouped by type, i.e. “product”, “category”, “cms page”, etc. Typical usage for this plugin is suggesting the top results by type when the user is typing to the search field. The necessary result formatter for this plugin is\Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\SuggestionByTypeResultFormatterPlugin Autocompletion Will add the functionality to predict the rest of the word or search string. \Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\CompletionQueryExpanderPluginprovides top completion terms for full-text search queries. Typical usage for this plugins is autocompleting the input of the user with the top result when they type something to the full-text search field and also to provide more suggestions for them as they type. The suggestions are collected from thecompletion_termsfield ofpageindex map, so you need to make sure to store only those information inside this field that you’d like to use for this purpose. The necessary result formatter for this plugin is\Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\CompletionResultFormatterPlugin Autocompletion preparations In order to enable autocompletion when the user types, you'll need to add some analyzers to the full-text search fields. Without doing this the standard analyzer of Elasticsearch will only provide suggestions after each completed word. The solution to provide mid-word suggestions is to add edge ngram filter to the fields in which we are searching. To add this behavior to ourpageindex, you'll need to add the following settings to yoursrc/Pyz/Shared/Search/IndexMap/search.jsonfile. Changing the analyzers is not possible for existing indexes, so you'll need to set it up from the ground. Click to expand the code sample { "settings": { "analysis": { "analyzer": { "fulltext_index_analyzer": { "tokenizer": "standard", "filter": [ "lowercase", "fulltext_index_ngram_filter" ] }, "fulltext_search_analyzer": { "tokenizer": "standard", "filter": [ "lowercase" ] } }, "filter": { "fulltext_index_ngram_filter": { "type": "edge_ngram", "min_gram": 2, "max_gram": 20 } } } }, "mappings": { "page": { "properties": { "full-text": { "analyzer": "fulltext_index_analyzer", "search_analyzer": "fulltext_search_analyzer" }, "full-text-boosted": { "analyzer": "fulltext_index_analyzer", "search_analyzer": "fulltext_search_analyzer" } } } }
} Process Query Result After you’ve created your query, you also need to take care of processing the raw response fromElasticsearch. This is done by providing a collection of\Spryker\Client\Search\Dependency\Plugin\ResultFormatterPluginInterface. To create one, you need to extend\Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\AbstractElasticsearchResultFormatterPlugin It’s also possible to not provide any result formatters; in this case the raw response will be returned at the end. Click to expand the code sample &lt;?php namespace Pyz\Client\Catalog\Plugin\ResultFormatter; use Elastica\Result;
use Elastica\ResultSet;
use Generated\Shared\Search\PageIndexMap;
use Spryker\Client\Search\Plugin\Elasticsearch\ResultFormatter\AbstractElasticsearchResultFormatterPlugin; class DummyResultFormatterPlugin extends AbstractElasticsearchResultFormatterPlugin
{ const NAME = 'test'; /** * @return string */ public function getName() { return static::NAME; } /** * @param \Elastica\ResultSet $searchResult * @param array $requestParameters * * @return array */ protected function formatSearchResult(ResultSet $searchResult, array $requestParameters) { $results = []; foreach ($resultSet-&gt;getResults() as $result) { $results[] = $this-&gt;formatResult($result); } return $results; } /** * @param \Elastica\Result $result * * @return mixed */ protected function formatResult(Result $result) { // do something with the result ... return $result; } } To execute the previously created query along with this result formatter plugin, you need to call thesearch()method of theSearchClientand provide this formatter to its second parameter. When you use result formatter plugins, the result of theSearchClient::search()method will be an associative array, where the keys are the name of each result formatters (provided bygetName()method) and the values are the response for each result formatter. This way in your controller, where at the end you get the response, you can simply provide everything you got right to the template to care of. Last review date: Oct. 2nd, 2017</body>
</html>