<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>There might be instances when you need to go beyond product search or you have very specific requirements regarding search. You’re not tied to the basic mapping that ships with Spryker. You can easily roll your own and set up custom analyzer very easily. The underlaying library that gets used by Spryker is called Elastica and you can use it to set up custom mapping and analyzers as you like. Custom Analyzers The Elasticsearch indexes get installed during installation of collectors. To add custom analyzers you will need to overrideSpryker\Zed\Collector\Business\Internal\InstallElasticsearch. Let’s create a quick example setting up a German analyzer. Create a file calledInstallElasticsearch.phpinside theCollector (Undefined variable: General.bundle/module)on the project level touch src/Pyz/Zed/Collector/Business/Internal/InstallElasticsearch.php Override thecreateIndex()method and provide your custom analyzer setup along with index creation. Click to expand the code sample &lt;?php namespace Pyz\Zed\Collector\Business\Internal; use Spryker\Zed\Collector\Business\Internal as SprykerInstallElasticsearch; class InstallElasticsearch extends SprykerInstallElasticsearch { protected createIndex() { $index = $this-&gt;client-&gt;getIndex($this-&gt;indexName); if (!$index-&gt;exists()) { $index-&gt;create( [ 'number_of_shards' =&gt; 4, 'number_of_replicas' =&gt; 1, 'analysis' =&gt; [ 'filter' =&gt; [ 'german_stop' =&gt; [ 'type' =&gt; 'stop', 'stopwords' =&gt; '_german_', ], 'german_stemmer' =&gt; [ 'type' =&gt; 'stemmer', 'language' =&gt; 'light_german', ], ], ], 'analyzer' =&gt; [ 'german' =&gt; [ 'tokenizer' =&gt; 'standard', 'filter' =&gt; [ 'lowecase', 'german_stop', 'german_normalization', 'german_stemmer', ] ], ], ] ); } } } The$indexvariable holds an instance ofElastica\Index. The array that is passed to thecreate()method of that instance can contain any Elasticsearch setting. As you can see from the example above it gets used to set up the number of replicas and shards as well. Elasticsearch provides analyzers for a lot of languages. Detailed information on how to properly set up analyzers can be found in the documentation at http://www.elastic.io/ Custom Mapping If you have diverging requirements for product search than what Spryker is offering, you might want to set up a custom mapping. Either you have different requirements regarding aggregations/facets or you want a more fine grained document with multiple fields for each product attribute. It’s easy to override the default mapping and create your own. The default mapping is defined inSpryker\Zed\ProductSearch\Business\Internal\InstallProductSearchand you will have to extend this class on project level. Create a file calledInstallProductSearch.phpinside theProductSearch (Undefined variable: General.bundle/module)on project level touch src/Pyz/Zed/ProductSearch/Business/Internal/InstallProductSearch.php OverridecreateProductType()method and install your custom mapping Click to expand the code sample &lt;?php
namespace Pyz\Zed\ProductSearch\Business\Internal; use Elastica\Index;
use Elastica\Type\Mapping;
use Elastica\Type;
use Spryker\Zed\ProductSearch\Business\Internal\InstallProductSearch as SprykerInstallProductSearch; class InstallProductSearch extends SprykerInstallProductSearch
{ /** * @throws \RuntimeException * * @param \Elastica\Index $index * * @return void */ protected function createProductType(Index $index) { $index = $this-&gt;client-&gt;getIndex($this-&gt;indexName); if (!$index-&gt;exists()) { throw new \RuntimeException(sprintf('Index %s is missing', $this-&gt;indexName)); } $type = $index-&gt;getType($this-&gt;indexType); if ($type-&gt;exists() === true) { return; } $mapping = new Mapping($type); $mapping-&gt;setProperties([ 'title' =&gt; [ 'type' =&gt; 'string', 'analyzer' =&gt; 'german', ], 'description' =&gt; [ 'type' =&gt; 'string', 'analyzer' =&gt; 'german', ], 'price' =&gt; [ 'type' =&gt; 'integer', ], ]); $mapping-&gt;send(); } Extend Existing Mapping If you want to use the existing mapping that comes with Spryker but want to add additional fields, or change properties for existing fields, you will also need to overrideSpryker\Zed\ProductSearch\Business\Internal\InstallProductSearch. Follow the steps in the previous paragraph and add the file to your project level implementation. Instead of replacing the implementation ofcreateProductType()we will extend it. Unfortunately there’s a pitfall here. Elasticseach doesn’t allow to alter a mapping since that would lead to an inconsistent state of documents that are already indexed. However, there’s a workaround to still achieve out goal. We can load the currently installed mapping, delete the document type (which will also remove all documents of that type from the index) and then reinstall the mapping. Here’s a simple example that uses our previously definedgermananalyzer for thefull-textfield Click to expand the code sample &lt;?php namespace Pyz\Zed\ProductSearch\Business\Internal; use Elastica\Index;
use Elastica\Type\Mapping;
use Elastica\Type;
use Spryker\Zed\ProductSearch\Business\Internal\InstallProductSearch as SprykerInstallProductSearch; class InstallProductSearch extends SprykerInstallProductSearch
{ /** * @param \Elastica\Index $index * * @return void */ protected function createProductType(Index $index) { parent::createProductType($index); $type = $index-&gt;getType($this-&gt;indexType); $mappingProperties = $this-&gt;getExistingMappingProperties($type); $mappingProperties['full-text'] = [ 'type' =&gt; 'string', 'analyzer' =&gt; 'german', ]; $type-&gt;delete(); $mapping = new Mapping($type); $mapping-&gt;setProperties($mappingProperties); $mapping-&gt;send(); } /** * @param Elastica\Type $type * * @return array */ protected function getExistingMappingProperties(Type $type) { $mapping = $type-&gt;getMapping(); return $mapping[this-&gt;indexType]['properties']; } }</body>
</html>