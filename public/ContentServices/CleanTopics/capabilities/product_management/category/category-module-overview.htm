<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Categories are modeled in an hierarchical structure, a tree. For this, the category node entity was introduced - it links a category to its parent category. A category can be assigned to multiple category nodes. Category nodes have the following concerns: Structure of the category nodes Mapping of categories to products (a product can be assigned to multiple category nodes and a category node can contain several products) Mapping of URLs to category nodes Avoid circular dependencies on category nodes Reference a category (however a category can be referenced by several category nodes) Categories have the following characteristics: Categories can be active/inactive (this flag acts as a soft delete functionality that can be undone anytime) Category attributes define name and meta keywords for every locale (a category is visible for a language only if it has the attributes defined for the locale in which the application is rendered) Triggered Events There are a few events that are triggered by this(Undefined variable: General.bundle/module). You to install the [Event](/core/(Undefined variable: General.bundles/modules)/event)(Undefined variable: General.bundle/module)to listen to events. Category.before.create- before category is created/persisted.CategoryTransferpassed with prepared data for creating new category. Category.before.update- before category is updated.CategoryTransferpassed with prepared data for update. Category.before.delete- before category is deleted.CategoryTransferpassed with id of category being deleted. Category.after.create- after category is created.CategoryTransferpassed with newly created category id stored. Category.after.update- after category update.CategoryTransferpassed. Category.after.delete- after category delete.CategoryTransferpassed. Extension Points (Plugins) It is possible to extend certain behavior though plugins. The Category(Undefined variable: General.bundle/module)provides three plugin interfaces that can be used in project implementations: \Spryker\Zed\Category\Dependency\Plugin\CategoryRelationReadPluginInterface
\Spryker\Zed\Category\Dependency\Plugin\CategoryRelationUpdatePluginInterface
\Spryker\Zed\Category\Dependency\Plugin\CategoryRelationDeletePluginInterface Custom project implementations of these plugin interfaces have to be provided by\Pyz\Zed\Category\CategoryDependencyProviderfrom the respective methods: \Pyz\Zed\Category\CategoryDependencyProvider::getRelationReadPluginStack()
\Pyz\Zed\Category\CategoryDependencyProvider::getRelationUpdatePluginStack()
\Pyz\Zed\Category\CategoryDependencyProvider::getRelationDeletePluginStack() A description of the specification for each plugin interface can be found in its method annotations. There are reference implementations of each plugin interface inSpryker Commerce OS (Undefined variable: General.bundle/module)s: CategoryRelationReadPluginInterface \Spryker\Zed\ProductCategory\Communication\Plugin\ReadProductCategoryRelationPlugin
\Spryker\Zed\Cms\Communication\Plugin\RemoveCmsBlockCategoryRelationPlugin CategoryRelationDeletePluginInterface Spryker\Zed\ProductCategory\Communication\Plugin\RemoveProductCategoryRelationPlugin
\Spryker\Zed\Cms\Communication\Plugin\RemoveCmsBlockCategoryRelationPlugin CategoryRelationUpdatePluginInterface \Spryker\Zed\ProductCategory\Communication\Plugin\UpdateProductCategoryRelationPlugin This extension point serves for post updating of categories. The plugin interface set for this extension point looks like this: namespace Spryker\Zed\Category\Dependency\Plugin; use Generated\Shared\Transfer\CategoryTransfer; interface CategoryRelationUpdatePluginInterface
{ /** * Specification: * - Update relations on category update * * @api * * @param \Generated\Shared\Transfer\CategoryTransfer $categoryTransfer * * @return void */ public function update(CategoryTransfer $categoryTransfer);
} For example, Navigation is connected with updating categories, so there is a plugin in theCategoryNavigationConnectormodule that is calledUpdateNavigationRelationPlugin. It implements the interface as follows: namespace Spryker\Zed\CategoryNavigationConnector\Communication\Plugin; use Generated\Shared\Transfer\CategoryTransfer;
use Spryker\Zed\Category\Dependency\Plugin\CategoryRelationUpdatePluginInterface;
use Spryker\Zed\Kernel\Communication\AbstractPlugin; /** * @method \Spryker\Zed\CategoryNavigationConnector\Business\CategoryNavigationConnectorFacadeInterface getFacade() * @method \Spryker\Zed\CategoryNavigationConnector\Communication\CategoryNavigationConnectorCommunicationFactory getFactory() */
class UpdateNavigationRelationPlugin extends AbstractPlugin implements CategoryRelationUpdatePluginInterface
{ /** * @param \Generated\Shared\Transfer\CategoryTransfer $categoryTransfer $categoryTransfer * * @return void */ public function update(CategoryTransfer $categoryTransfer) { $this-&gt;getFacade()-&gt;updateCategoryNavigationNodesIsActive($categoryTransfer); }
} And then in theCategoryDependencyProvider, in the functiongetRelationUpdatePluginStack, you can register this plugin (or any plugin implementing the above interface) for it to execute post updating of categories. See also: Get a general idea about the Category feature Migrate to a newer version of the Category module Get a general idea about the Category Filters Enable the Category Filters in your project Create and manage categories in the Administration Interface Last review date: Jan. 22nd, 2018</body>
</html>