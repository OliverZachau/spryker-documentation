<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Upgrading from Version 3.* to Version 4.* Install new module Resolve deprecations Database migration Data migration 1. Install new module Install new module by adding the following into your composer.json"spryker/category": "^4.0.0"and running composer update. 2. Resolve deprecations Before upgrading to the new version, make sure that you do not use any deprecated code from version 3.*. Check the description of the deprecated code to see what you will need to use instead. Here is the list of removed deprecations:\Spryker\Shared\Category\CategoryConstants::RESOURCE_TYPE_CATEGORY_NODE (use \Spryker\Shared\Category\CategoryConfig::RESOURCE_TYPE_CATEGORY_NODE) \Spryker\Shared\Category\CategoryConstants::RESOURCE_TYPE_NAVIGATION (use \Spryker\Shared\Category\CategoryConfig::RESOURCE_TYPE_NAVIGATION) \Spryker\Zed\Category\Communication\Form\CategoryLocalizedAttributeType::setDefaultOptions() (\Spryker\Zed\Category\Communication\Form\CategoryLocalizedAttributeType::configureOptions()) 3. Database migration Run Propel migrations.vendor/bin/console propel:diff, manual review is necessary for the generated migration file.vendor/bin/console propel:migratevendor/bin/console propel:model:build 4. Data migration We have prepared a migration script to add a template to your categories. Please check that the script covers your category implementation and adjust it. Click here to expand the script &lt;?php /** * Copyright © 2016-present Spryker Systems GmbH. All rights reserved. * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file. */ namespace Pyz\Zed\Category\Communication\Console; use Exception;
use Orm\Zed\Category\Persistence\SpyCategoryQuery;
use Orm\Zed\Category\Persistence\SpyCategoryTemplateQuery;
use Spryker\Zed\Category\CategoryConfig;
use Spryker\Zed\Kernel\Communication\Console\Console;
use Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery\Criteria;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface; /** * @method \Spryker\Zed\Category\Business\CategoryFacadeInterface getFacade() */
class CategoryTemplateMigration extends Console
{ const COMMAND_NAME = 'category-template:migrate'; /** * @var \Symfony\Component\Console\Output\OutputInterface */ protected $output; /** * @param \Symfony\Component\Console\Input\InputInterface $input * @param \Symfony\Component\Console\Output\OutputInterface $output * * @return void */ public function execute(InputInterface $input, OutputInterface $output) { $this-&gt;output = $output; $this-&gt;getFacade()-&gt;syncCategoryTemplate(); $this-&gt;assignTemplateToAllCategories(); $output-&gt;writeln('Successfully finished.'); } /** * @return void */ protected function configure() { parent::configure(); $this-&gt;setName(static::COMMAND_NAME); $this-&gt;setDescription(''); } /** * @throws \Exception * * @return void */ protected function assignTemplateToAllCategories() { $spyCategoryTemplate = SpyCategoryTemplateQuery::create() -&gt;filterByName(CategoryConfig::CATEGORY_TEMPLATE_DEFAULT) -&gt;findOne(); if (empty($spyCategoryTemplate)) { throw new Exception('Please specify CATEGORY_TEMPLATE_DEFAULT in your category template list configuration'); } $query = SpyCategoryQuery::create() -&gt;filterByFkCategoryTemplate(null, Criteria::ISNULL); $this-&gt;output-&gt;writeln('Will update ' . $query-&gt;count() . ' categories without template.'); foreach ($query-&gt;find() as $category) { $category-&gt;setFkCategoryTemplate($spyCategoryTemplate-&gt;getIdCategoryTemplate()); $category-&gt;save(); } } /** * @return array */ protected function getTemplateList() { return $this-&gt;getFactory() -&gt;getConfig() -&gt;getTemplateList(); } } Copy the script tosrc/Pyz/Zed/Category/Communication/Console/CategoryTemplateMigration.phpand register it inPyz\Zed\Console\ConsoleDependencyProvider &lt;?php
namespace Pyz\Zed\Console; class ConsoleDependencyProvider extends SprykerConsoleDependencyProvider
{ public function getConsoleCommands(Container $container) { $commands = [ ... CategoryTemplateMigration() ]; ... }
}
?&gt; Run the console script to add templates to your categories:vendor/bin/console category-template:migrate See also: Get a general idea about the categories Extend categories through plugins Create and manage categories in the Administration Interface</body>
</html>