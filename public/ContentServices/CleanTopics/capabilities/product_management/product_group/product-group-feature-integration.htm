<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Prerequisites To prepare your project to work with Product groups: Require the Product Group bundles in yourcomposer.json by running composer requirespryker/product-group spryker/product-group-collector. Install the new database tables. By runningvendor/bin/console propel:diff. Propel should generate a migration file with the changes. Apply the database changes: runvendor/bin/console propel:migrate. Generate ORM models: runvendor/bin/console propel:model:build. After running this command you’ll find some new classes in your project under\Orm\Zed\ProductGroup\Persistencenamespace. It’s important that you make sure that they extend the base classes from the Spryker core, e.g.: \Orm\Zed\ProductGroup\Persistence\SpyProductGroupextends \Spryker\Zed\ProductGroup\Persistence\Propel\AbstractSpyProductGroup \Orm\Zed\ProductGroup\Persistence\SpyProductAbstractGroupextends\Spryker\Zed\ProductGroup\Persistence\Propel\AbstractSpyProductAbstractGroup \Orm\Zed\ProductGroup\Persistence\SpyProductGroupQueryextends\Spryker\Zed\ProductGroup\Persistence\Propel\AbstractSpyProductGroupQuery \Orm\Zed\ProductGroup\Persistence\SpyProductAbstractGroupQueryextends\Spryker\Zed\ProductGroup\Persistence\Propel\AbstractSpyProductAbstractGroupQuery Runvendor/bin/console transfer:generateto get the new transfer objects. Activate the product group collectors by adding theProductGroupCollectorStoragePluginand theProductAbstractGroupsCollectorStoragePluginto the storage collector plugin stack, see example below: &lt;?php namespace Pyz\Zed\Collector; use Spryker\Shared\ProductGroup\ProductGroupConfig;
use Spryker\Zed\Kernel\Container;
use Spryker\Zed\ProductGroupCollector\Communication\Plugin\ProductAbstractGroupsCollectorStoragePlugin;
use Spryker\Zed\ProductGroupCollector\Communication\Plugin\ProductGroupCollectorStoragePlugin;
// ... class CollectorDependencyProvider extends SprykerCollectorDependencyProvider
{ /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function provideBusinessLayerDependencies(Container $container) { // ... $container[self::STORAGE_PLUGINS] = function (Container $container) { return [ // ... ProductGroupConfig::RESOURCE_TYPE_PRODUCT_GROUP =&gt; new ProductGroupCollectorStoragePlugin(), ProductGroupConfig::RESOURCE_TYPE_PRODUCT_ABSTRACT_GROUPS =&gt; new ProductAbstractGroupsCollectorStoragePlugin(), ]; }; // ... }
} Data Setup You should now be able to use the Zed API of ProductGroup(Undefined variable: General.bundle/module)to manage product groups, and the collectors should also be able to export them to the KV storage. This is a good time to implement an installer in your project to group products in a way how you’ll want to show them in your shop frontend. Check out our Demoshop implementation for examples and ideas. Usage in Yves The KV storage should by now have some product groups we can display in our frontend. The ProductGroup(Undefined variable: General.bundle/module)is shipped with a twig extension that provides thespyProductGroupItems()twig function. This function collects necessary data from the KV storage and renders it in the specified way. spyProductGroupItems()accepts two parameters: $idProductAbstract: Reference of an abstract product by its ID field. $template: Template path used to render the product group items (i.e. "@ProductGroup/partials/product-group-items.twig"). To enable this twig function, you’ll need to register\Spryker\Yves\ProductGroup\Plugin\Provider\ProductGroupTwigServiceProviderin your application’s bootstrap. &lt;?php namespace Pyz\Yves\Application; use Spryker\Yves\ProductGroup\Plugin\Provider\ProductGroupTwigServiceProvider;
// ... class YvesBootstrap
{ /** * @return void */ protected function registerServiceProviders() { // ... $this-&gt;application-&gt;register(new ProductGroupTwigServiceProvider()); }
} Example, of rendering product group items in a Yves twig template (i.e. on catalog and product detail pages): {{ spyProductGroupItems(idProductAbstract, '@ProductGroup/partials/product-group-items.twig') }} Rendering Product Group Items Templates The templates used to render product group items use theproductGroupItemstemplate variable. The variable is an array that contains abstract products from the same group(s) that the subject product is in. The abstract products are read from the KV storage (as they were stored by the storage product collector) for the current locale. The following code examples show the Demoshop implementation of how to render product group items. Our demo products have acolorCodeattribute that we use as the group item selector in the shop. You could use any other attribute as well for group selector. InPyz/Yves/ProductGroup/Theme/default/partials/product-group-items.twigwe simply traverse the product group items and display a list of links to the PDP of each product in the group. The links represent the color of each product. {% block content %} {% if productGroupItems|length %} &lt;div data-component="product-group"&gt; &lt;ul class="product-group"&gt; {% for productGroupItem in productGroupItems %} &lt;li data-product-group-item-preview="{{ productGroupItem.imageSets.default[0].externalUrlSmall }}"&gt; &lt;a href="{{ productGroupItem.url }}" {% if productGroupItem.colorCode %}style="background-color: {{ productGroupItem.colorCode }};"{% endif %}&gt;&lt;/a&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; &lt;/div&gt; {% endif %}
{% endblock %} In the catalog pages of our Demoshop we also added custom styling and Javascript to display the image of an item on mouseover, but what and how you want to display for each item in the group is entirely up to your implementation.</body>
</html>