<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Prerequisites To prepare your project to work with Product Reviews: Require the Product Review modules in yourcomposerby running composer require spryker/product-review composer require spryker/product-review-collector composer require spryker/product-review-gui Install the new database tables by runningvendor/bin/console propel:diff. Propel should generate a migration file with the changes. Runvendor/bin/console propel:migrateto apply the database changes. Generate ORM models by runningvendor/bin/console propel:model:build. This command will generate some new classes in your project under\Orm\Zed\ProductReview\Persistencenamespace. It is important to make sure that they extend the base classes from the Spryker core, e.g.: \Orm\Zed\ProductReview\Persistence\SpyProductReviewextends\Spryker\Zed\ProductReview\Persistence\Propel\AbstractSpyProductReview \Orm\Zed\ProductReview\Persistence\SpyProductReviewQueryextends\Spryker\Zed\ProductReview\Persistence\Propel\AbstractSpyProductReviewQuery Runvendor/bin/console transfer:generateto generate the new transfer objects. Activate the product review collectors by adding theProductReviewCollectorSearchPluginand theProductAbstractReviewCollectorStoragePluginto the Storage and Search Collector plugin stack. Example: collector plugin list extension &lt;?php namespace Pyz\Zed\Collector; use Spryker\Zed\Collector\CollectorDependencyProvider as SprykerCollectorDependencyProvider; use Spryker\Zed\Kernel\Container; use Spryker\Zed\ProductReviewCollector\Communication\Plugin\ProductReviewCollectorSearchPlugin; use Spryker\Zed\ProductReviewCollector\Communication\Plugin\ProductAbstractReviewCollectorStoragePlugin; // ... class CollectorDependencyProvider extends SprykerCollectorDependencyProvider { /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function provideBusinessLayerDependencies(Container $container) { // ... $container[static::SEARCH_PLUGINS] = function (Container $container) { return [ // ... ProductReviewConfig::RESOURCE_TYPE_PRODUCT_REVIEW =&gt; new ProductReviewCollectorSearchPlugin(), ]; }; $container[static::STORAGE_PLUGINS] = function (Container $container) { return [ // ... ProductReviewConfig::RESOURCE_TYPE_PRODUCT_ABSTRACT_REVIEW =&gt; new ProductAbstractReviewCollectorStoragePlugin(), ]; }; // ... } } Runvendor/bin/console setup:searchto set up Search before you run Search collectors. Make sure the new Zed user interface assets are built by runningnpm run zed(or antelope build zed for older versions). Update Zed’s navigation cache to show the new items for the Product Review management user interface by runningvendor/bin/console application:build-navigation-cache. You should now be able to use the Zed API of Product Reviews to approve, reject and delete reviews, and the collectors should also be able to push approved reviews and ratings into Storage and Search. Check out our Demoshop implementation for frontend implementation example and idea. Usage in Yves Submitting a Product Review To store an already validated product review, populate a\Generated\Shared\Transfer\ProductReviewTransfertransfer object and send it to Zed by calling the\Spryker\Client\ProductReview\ProductReviewClientInterface::submitCustomerReviewmethod. This action will create a new pending product review in your persistent storage. The saved product review will be exported to Search and Storage after it was approved on Zed UI. Make sure that the providedratingvalue does not exceed the configured maximum rating limit. Example of how to store a validated customer review: &lt;?php /** * @method \Pyz\Yves\ProductReview\ProductReviewFactory getFactory() */ class SubmitController extends Pyz\Yves\Application\Controller\AbstractController { /** * @param \Symfony\Component\HttpFoundation\Request $request */ public function submitAction(Request $request) { $customerReference = $this-&gt;getFactory()-&gt;getCustomerClient()-&gt;getCustomer()-&gt;getCustomerReference(); $this-&gt;getFactory()-&gt;getProductReviewClient()-&gt;submitCustomerReview( (new ProductReviewRequestTransfer()) -&gt;setCustomerReference($customerReference) -&gt;setLocaleName($this-&gt;getLocale()) -&gt;setIdProductAbstract($request-&gt;attributes-&gt;get('idProductAbstract')) -&gt;setSummary($request-&gt;attributes-&gt;get('summary')) -&gt;setDescription($request-&gt;attributes-&gt;get('description')) -&gt;setRating($request-&gt;attributes-&gt;get('rating')) -&gt;setNickname($request-&gt;attributes-&gt;get('nickname')) ); } } Displaying an Average Rating To display the average rating stored in Storage, you will need to usespyProductAbstractReviewandspyProductAbstractReviewMaximumRatingtwig extensions shipped byProductReviewmodule. spyProductAbstractReviewtwig extension takes product abstract ID as first argument and injects the correspondingProductAbstractReviewTransfertransfer object into the twig template provided as the second argument. spyProductAbstractReviewMaximumRatingtwig extension allows you to retrieve the configured maximum rating on demand. To register these plugins, you need to addProductAbstractReviewTwigServiceProviderservice provider to your\Pyz\Yves\Application\YvesBootstrap.php. Example of how to register twig extensions: &lt;?php namespace Pyz\Yves\Application; use Spryker\Yves\ProductReview\Plugin\Provider\ProductAbstractReviewTwigServiceProvider; class YvesBootstrap { /** * @return void */ protected function registerServiceProviders() { // ... $this-&gt;application-&gt;register(new ProductAbstractReviewTwigServiceProvider()); } } Now you will be able to call the registeredspyProductAbstractReviewandspyProductAbstractReviewMaximumRatingtwig extensions in your twig templates. Below is the examplespyProductAbstractReviewcall. @ProductReview/index/index.twig: &lt;div&gt;Product name: {{product.name}}&lt;/div&gt;
{{ spyProductAbstractReview(product.idProductAbstract, '@ProductReview/partials/average-rating.twig') }} ThespyProductAbstractReviewtwig extension will render the template provided as a second argument and inject theproductAbstractReviewTransfervariable. Below is the example average-rating.twig implementation. @ProductReview/partials/average-rating.twig: {% block content %} {% if productAbstractReviewTransfer %} Average product rating is {{ productAbstractReviewTransfer.averageRating }} out of {{ spyProductAbstractReviewMaximumRating() }} {% endif %}
{% endblock %} Displaying Reviews and Rating Summary To display previously posted and already approved reviews from Search, you will need to call\Spryker\Client\ProductReview\ProductReviewClientInterface::findProductReviewsInSearchmethod. To alter the retrieved number of product reviews per page, change the Client configuration . Example of product review retrieval: namespace Pyz\Yves\ProductReview\Controller; use Generated\Shared\Transfer\ProductReviewSearchRequestTransfer;
use Pyz\Yves\Application\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request; /** * @method \Spryker\Client\ProductReview\ProductReviewClientInterface getClient() */
class IndexController extends AbstractController
{ /** * @param \Symfony\Component\HttpFoundation\Request $request * * @return array */ public function indexAction(Request $request) { $productReviews = $this-&gt;getClient()-&gt;findProductReviewsInSearch( (new ProductReviewSearchRequestTransfer()) -&gt;setIdProductAbstract($request-&gt;attributes-&gt;get('idProductAbstract')); -&gt;setRequestParams($request-&gt;query-&gt;all()) ); return [ 'productReviews' =&gt; $productReviews['productReviews'], 'pagination' =&gt; $productReviews['pagination'], 'ratingAggregation' =&gt; $productReviews['ratingAggregation'], ]; } } Last review date: Aug. 28, 2017</body>
</html>