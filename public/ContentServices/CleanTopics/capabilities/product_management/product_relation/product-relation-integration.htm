<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Register a new collector plugin. How to is in Yves Datastore Collector - Product Relation . Then register a new twig service plugin \Spryker\Yves\ProductRelation\Plugin\ProductRelationTwigServiceProviderinside the\Pyz\Yves\Application\YvesBootstrap::registerServiceProvidersplugin stack. This will allow to use the UI carousel component to display relations. Add this new twig extension to your templates. By default, it is included in the product detail and cart overview pages of our demoshop. To render the component, include the provided twig function as shown bellow: Product detail-product_relation("related-products", {idProductAbstract : product.idProductAbstract}, 'Similar products', '@ProductRelation/partial/product_relation_carousel.twig'). Cart Overview-product_relation("up-selling", {quote : quoteTransfer}, 'You might also be interested in these products', '@ProductRelation/partial/product_relation_carousel.twig'). Each type accepts a number of parameters: “up-selling” -abstractProductIdswhich is an array of abstract product ids(['abstractProductIds' =&gt; [1,2,3]])orquotewhich is quote transfer object(['quote' =&gt; $quoteTransfer]). “related-products” - idProductAbstract (['idProductAbstract' =&gt; 1]). Include javascript carousel componentslick.jsInpackage.jsoninclude "dependencies": { ... "slick-carousel": "~1.6.0", } and runnpm install Create new component underassets/Yves/default/app/components/carousel/_carousel.scsswith contents .carousel { font-size:14px; .image-container { width: 150px; height: 180px; } .slick-slide { margin-left: 10px; } .product-name { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } } include this style file in/assets/Yves/default/app/style/index.scsslike@import '../components/carousel/carousel'; assets/Yves/default/app/components/carousel/index.js- configures the slick.js javascript carousel component. var $ = require('jquery'); var carousel = require('slick-carousel'); module.exports = { name: 'carousel', view: { init: function($root) { this.$root = $root; this.$root.slick({ infinite: true, slidesToShow: 6, slidesToScroll: 6, responsive: [ { breakpoint: 1024, settings: { slidesToShow: 3, slidesToScroll: 3 } }, { breakpoint: 600, settings: { slidesToShow: 2, slidesToScroll: 2 } }, { breakpoint: 480, settings: { slidesToShow: 1, slidesToScroll: 1 } } ] }); }, } }; Include this js file inassets/Yves/default/app/index.js: run([ ... require('./components/carousel') ]); Create file /assets/Yves/default/vendor/slick-carousel.scsswith contents $slick-assets-relative-path: "../../../../node_modules/slick-carousel/slick/"; $slick-font-path: "#{$slick-assets-relative-path}fonts/"; $slick-font-family: "slick"; $slick-loader-path: $slick-assets-relative-path; $slick-arrow-color: black; $slick-dot-color: black; $slick-dot-color-active: black; $slick-prev-character: "\2190"; $slick-next-character: "\2192"; $slick-dot-character: "\2022"; $slick-dot-size: 30px; $slick-opacity-default: 0.75; $slick-opacity-on-hover: 1; $slick-opacity-not-active: 0.25; @import '~slick-carousel/slick/slick.scss'; @import '~slick-carousel/slick/slick-theme.scss'; .slick-list { .slick-loading &amp; { background: none !important; } } Runnpm run yvesto generate javascript and css. To reference an example implementation, see the latest demoshop . Add template for rendering html src/Pyz/Yves/ProductRelation/Theme/default/partial/product_relation_carousel.twig {% if productRelations %} &lt;div class="row"&gt; &lt;div class="small-12 columns"&gt; &lt;div class="callout"&gt; &lt;h3&gt;{{ name }}&lt;/h3&gt; &lt;div class="row align-spaced"&gt; &lt;div class="small-11 columns"&gt; &lt;div class="carousel" data-component="carousel"&gt; {% for relation in productRelations %} {% include "@catalog/catalog/partials/product.twig" with { detailsUrl: relation.url, name:relation.name, priceValue: relation.price, product: relation, imageUrl: (relation.imageSets|length ? relation.imageSets.default[0].externalUrlSmall : '') } %} {% endfor %} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {% endif %} This is sample a template and has to be updated for the project. You may also want to adjust the product relations updater script (how often it should run). The relations have a periodic updaterproduct-relation:updatewhich is started by Jenkins.</body>
</html>