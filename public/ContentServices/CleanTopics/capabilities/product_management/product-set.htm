<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Overview The Product Sets feature allows you to put together multiple products for the purpose of emphasizing that the set of products can be bought together. Product Sets usually have their own separate list and detail pages in the shop frontend where customers can add containing products to the cart. This feature is supported by 3 modules: ProductSet(Undefined variable: General.bundle/module) Manages the Product Set’s core functionalities such as persisting all related data to database and reading from it. It also provides Client functionality to list Product Sets from Search. ProductSetCollector(Undefined variable: General.bundle/module) Provides full Collector logic to export Product Sets to Search and Storage. ProductSetGui(Undefined variable: General.bundle/module) Provides a Zed UI to manage (create, list, update, delete and reorder) Product Sets. Feature Integration Prerequisites To prepare your project to work with Product Sets: 1. Require the Product Set(Undefined variable: General.bundle/module)s in yourcomposer.jsonby running: composer require spryker/product-set spryker/product-set-collector spryker/product-set-gui 2. Install the new database tables by running: vendor/bin/console propel:diff Propel should generate a migration file with the changes. 3. Apply the database changes, run: vendor/bin/console propel:migrate 4. To generate ORM models, run: vendor/bin/console propel:model:build 5. After running this command, new classes are added. (The classes are located in your project under the\Orm\Zed\ProductSet\Persistencenamespace. Make sure that they extend the base classes from the Spryker core, e.g.: \Orm\Zed\ProductSet\Persistence\SpyProductSetextends\Spryker\Zed\ProductSet\Persistence\Propel\AbstractSpyProductSet \Orm\Zed\ProductSet\Persistence\SpyProductSetDataextends\Spryker\Zed\ProductSet\Persistence\Propel\AbstractSpyProductSetData \Orm\Zed\ProductSet\Persistence\SpyProductAbstractSetextends\Spryker\Zed\ProductSet\Persistence\Propel\AbstractSpyProductAbstractSet \Orm\Zed\ProductSet\Persistence\SpyProductSetQueryextends\Spryker\Zed\ProductSet\Persistence\Propel\AbstractSpyProductSetQuery \Orm\Zed\ProductSet\Persistence\SpyProductSetDataQueryextends\Spryker\Zed\ProductSet\Persistence\Propel\AbstractSpyProductSetDataQuery \Orm\Zed\ProductSet\Persistence\SpyProductAbstractSetQueryextends\Spryker\Zed\ProductSet\Persistence\Propel\AbstractSpyProductAbstractSetQuery 6. To get the new transfer objects, run: vendor/bin/console transfer:generate 7. To rebuild Zed navigation, run: vendor/bin/console navigation:build-cache 8. Activate the Product Set collectors: Adding theProductSetCollectorStoragePluginto the storage collector plugin stack andProductSetCollectorSearchPluginto the search collector plugin stack, see example below: &lt;?php namespace Pyz\Zed\Collector; use Spryker\Shared\ProductSet\ProductSetConfig;
use Spryker\Zed\Kernel\Container;
use Spryker\Zed\ProductSetCollector\Communication\Plugin\ProductSetCollectorSearchPlugin;
use Spryker\Zed\ProductSetCollector\Communication\Plugin\ProductSetCollectorStoragePlugin;
// ... class CollectorDependencyProvider extends SprykerCollectorDependencyProvider
{ /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function provideBusinessLayerDependencies(Container $container) { // ... $container[self::SEARCH_PLUGINS] = function (Container $container) { return [ // ... ProductSetConfig::RESOURCE_TYPE_PRODUCT_SET =&gt; new ProductSetCollectorSearchPlugin(), ]; }; $container[self::STORAGE_PLUGINS] = function (Container $container) { return [ // ... ProductSetConfig::RESOURCE_TYPE_PRODUCT_SET =&gt; new ProductSetCollectorStoragePlugin(), ]; }; // ... }
} Data Setup You should now be able to use the ProductSet(Undefined variable: General.bundle/module)’s Zed API to manage Product Sets, and the collectors should also be able to export them to the KV storage and Elasticsearch. In Zed you can also manage Product Sets under Products / Product Sets menu point. This is a good time to implement an installer in your project to put products together in sets representing how you want them to be displayed in your shop frontend. Check out our Demoshop implementation for examples and ideas. Listing Products Sets in Yves The KV storage and Elasticsearch should by now have some Product Sets you can list and display in your shop. The exported documents in Search by default, do not support the configurable search features as products (full-text search, faceted navigation, sorting and pagination). However, since their data structure is the same it is possible to implement the same features with a custom implementation. For simple listing theProductSet (Undefined variable: General.bundle/module)provides a Client API to list Product Sets from Elasticsearch. By calling theProductSetClient::getProductSetList()method, a limited set of documents can be listed in Yves. The results are sorted in descending order by the Product Set’sweightattribute. The executed search query works the same way as described in Search Query . If you need to extend the query, for example by filtering current store and locale, you will need to add the necessary query expander plugins, like in the example below. Also, to format the raw response from Elasticsearch we also need to provide a result formatter plugin. A result formatter plugin, is also provided by theProductSet (Undefined variable: General.bundle/module). Take a look at the following example to see how to activate the plugins: &lt;?php namespace Pyz\Client\ProductSet; use Spryker\Client\ProductSet\Plugin\Elasticsearch\ResultFormatter\ProductSetListResultFormatterPlugin;
use Spryker\Client\ProductSet\ProductSetDependencyProvider as SprykerProductSetDependencyProvider;
use Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\LocalizedQueryExpanderPlugin;
use Spryker\Client\Search\Plugin\Elasticsearch\QueryExpander\StoreQueryExpanderPlugin; class ProductSetDependencyProvider extends SprykerProductSetDependencyProvider
{ /** * @return array */ protected function getProductSetListResultFormatterPlugins() { return [ new ProductSetListResultFormatterPlugin(), ]; } /** * @return array */ protected function getProductSetListQueryExpanderPlugins() { return [ new LocalizedQueryExpanderPlugin(), new StoreQueryExpanderPlugin(), ]; } } Sorting Product Sets There's a Zed UI to be able to easily sort Product Sets compared to each other under the Reorder Product Sets page Next Steps Integrating the Product Set feature in Yves is completely up to your project’s requirements. The following points summarize how we integrated this feature into our Demoshop: Added controller (\Pyz\Yves\ProductSet\Controller\ListController) and template to list Product Sets on a specific URL (provided by\Pyz\Yves\ProductSet\Plugin\Provider\ProductSetControllerProvider). This controller uses the predefinedProductSetClient::getProductSetList()client method, as described Listing Products Sets in Yves . The URL of the list page was added to the main navigation demo data. To be able to display Product Sets on their own assigned URL, we’ve added a resource creator (\Pyz\Yves\ProductSet\ResourceCreator\ProductSetResourceCreator) and added it to the existing resource creator list (\Pyz\Yves\Collector\CollectorFactory::createResourceCreators()). This will ensure URL matching and URL generation of Product Sets. Added controller (\Pyz\Yves\ProductSet\Controller\DetailController) and template to display Product Set Detail Page on their assigned URLs. The controller receives a hydratedStorageProductSetTransferobject and a list ofStorageProductTransferobjects provided by the resource creator. On the Product Set Detail Page we had to ensure that it’s possible to select variants of the abstract products in the Set. The variant selection logic is part of the resource creating process. We’ve added “Add to cart” buttons per each product and also an “Add all to cart” when all variants are selected. To handle adding multiple items to cart at once, we’ve added a custom cart controller action (\Pyz\Yves\Cart\Controller\CartController::addItemsAction()). Check out our Demoshop for more detailed examples and ideas regarding the complete Yves integration. Under the Hood Database Schema TheProductSet (Undefined variable: General.bundle/module)provides aspy_product_settable that stores some non-localized data about Product Set entities. Localized data is stored in thespy_product_set_datatable. These tables, along with their related URLs and Product Image Sets, contain all necessary data about Product Set entities that you can list in Yves or show their representing Detail Pages. The products that Product Sets represent are stored in thespy_product_abstract_settable along with their sorting position.</body>
</html>