<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Overview TheNavigationmodule manages multiple navigation menus that can be displayed on the frontend (Yves). Every navigation section can contain its own nested structure of navigation nodes. Navigation nodes have types that help define what kind of link they represent. The following node types are available: Label: These nodes do not link to any specific URL, they are used for grouping other nodes. Category: Nodes can be assigned to category node URLs. CMS Page: Nodes can be assigned to CMS page URLs. Link: These nodes link to internal pages in Yves, i.e. login, registration, etc. External URL: These nodes link to external URLs (typically tabs opened in a new browser). You can control and adjust Navigation node appearance and add icons by assigning custom CSS classes to them. This feature is shipped with three modules: Navigation moduleprovides database structure and a public API to manage what’s in the database. It also provides a small toolkit for rendering navigation menus in the frontend. NavigationGuimodule provides a Zed UI to manage navigation menus. NavigationCollectormodule provides full collector logic for exporting navigation menus to the KV storage (Redis). Feature Integration Prerequisites To prepare your project to work with Navigation: Require the Navigation modules in yourcomposer.json. Install the new database tables. By runningvendor/bin/console propel:diff.Propel will generate a migration file with the changes. Apply the database changes: runvendor/bin/console propel:migrate. Generate ORM models: runvendor/bin/console propel:model:build. After running this command you’ll find some new classes in your project under`\Orm\Zed\Navigation\Persistence`namespace. It’s important to make sure that they extend the base classes from the Spryker core, e.g.: \Orm\Zed\Navigation\Persistence\SpyNavigationextends\Spryker\Zed\Navigation\Persistence\Propel\AbstractSpyNavigation \Orm\Zed\Navigation\Persistence\SpyNavigationNodeextends\Spryker\Zed\Navigation\Persistence\Propel\AbstractSpyNavigationNode \Orm\Zed\Navigation\Persistence\SpyNavigationNodeLocalizedAttributesextends\Spryker\Zed\Navigation\Persistence\Propel\AbstractSpyNavigationNodeLocalizedAttributes \Orm\Zed\Navigation\Persistence\SpyNavigationQueryextends\Spryker\Zed\Navigation\Persistence\Propel\AbstractSpyNavigationQuery \Orm\Zed\Navigation\Persistence\SpyNavigationNodeQueryextends\Spryker\Zed\Navigation\Persistence\Propel\AbstractSpyNavigationNodeQuery \Orm\Zed\Navigation\Persistence\SpyNavigationNodeLocalizedAttributesQueryextends\Spryker\Zed\Navigation\Persistence\Propel\AbstractSpyNavigationNodeLocalizedAttributesQuery Runvendor/bin/console transfer:generateto get the new transfer objects. Make sure that the new Zed UI assets are also prepared for use by running thenpm run zedcommand (orantelope build zedfor older versions). To make the navigation management UI available in Zed navigation, runvendor/bin/console application:build-navigation-cachecommand. Activate the navigation menu collector by adding theNavigationMenuCollectorStoragePluginto the storage collector plugin stack, see example below: &lt;?php namespace Pyz\Zed\Collector; use Spryker\Shared\Navigation\NavigationConfig;
use Spryker\Zed\Kernel\Container;
use Spryker\Zed\NavigationCollector\Communication\Plugin\NavigationMenuCollectorStoragePlugin;
// ... class CollectorDependencyProvider extends SprykerCollectorDependencyProvider
{ /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function provideBusinessLayerDependencies(Container $container) { // ... $container[self::STORAGE_PLUGINS] = function (Container $container) { return [ // ... NavigationConfig::RESOURCE_TYPE_NAVIGATION_MENU =&gt; new NavigationMenuCollectorStoragePlugin(), ]; }; // ... }
} Data Setup You should now be able to manage navigation menus from Zed UI, and the collectors should also be able to export the navigation menus to the KV storage. This is a good time to implement an installer in your project to install a selection of frequently used navigation menus. Check out our Demoshop implementation for examples and ideas. Usage in Yves The KV storage should by now have some navigation menus we can display in our frontend. The Navigation module ships with a twig extension that provides thespyNavigation()twig function which renders a navigation menu. spyNavigation()accepts two parameters: $navigationKey: Reference of a navigation menu by itskeyfield (i.e."MAIN_NAVIGATION"). $template: Template path used to render the navigation menu (i.e."@application/layout/navigation/main.twig"). To enable the navigation twig function, register\Spryker\Yves\Navigation\Plugin\Provider\NavigationTwigServiceProviderin your application’s bootstrap. &lt;?php namespace Pyz\Yves\Application; use Spryker\Yves\Navigation\Plugin\Provider\NavigationTwigServiceProvider;
// ... class YvesBootstrap
{ /** * @return void */ protected function registerServiceProviders() { // ... $this-&gt;application-&gt;register(new NavigationTwigServiceProvider()); }
} Example of rendering navigation in a yves twig template: {{ spyNavigation('MAIN_NAVIGATION', '@application/layout/navigation/main.twig') }} Rendering Navigation Templates The templates used to render a navigation menu use the navigationTree template variable to traverse thenavigation tree. The variable contains an instance of\Generated\Shared\Transfer\NavigationTreeTransferwith only one localized attribute per node for the current locale. The following code examples show the Demoshop implementation of how to renderMAIN_NAVIGATIONwhich is a multi-level navigation menu. For styling we used the Menu and Dropdown components from Foundation framework. InPyz/Yves/Application/Theme/default/layout/navigation/main.twigwe traverse the root navigation nodes of the navigation tree and for each root node we render their children nodes as well. &lt;div class="callout show-for-large"&gt; &lt;div class="row"&gt; &lt;div class="large-12 columns"&gt; &lt;ul class="menu"&gt; {% for node in navigationTree.nodes %} {% embed '@Application/layout/navigation/_partials/base-node.twig' %} {% block url %} &lt;li {% if node.children|length %}data-toggle="navigation-node-{{ node.navigationNode.idNavigationNode }}-children"{% endif %} class="{{ class }}"&gt; &lt;a href="{{ url }}"&gt;{{ title }}&lt;/a&gt; &lt;/li&gt; {% endblock %} {% block link %} &lt;li {% if node.children|length %}data-toggle="navigation-node-{{ node.navigationNode.idNavigationNode }}-children"{% endif %} class="{{ class }}"&gt; &lt;a href="{{ link }}"&gt;{{ title }}&lt;/a&gt; &lt;/li&gt; {% endblock %} {% block externalUrl %} &lt;li {% if node.children|length %}data-toggle="navigation-node-{{ node.navigationNode.idNavigationNode }}-children"{% endif %} class="{{ class }}"&gt; &lt;a href="{{ externalUrl }}" target="_blank"&gt;{{ title }}&lt;/a&gt; &lt;/li&gt; {% endblock %} {% block other %} &lt;li {% if node.children|length %}data-toggle="navigation-node-{{ node.navigationNode.idNavigationNode }}-children"{% endif %} class="menu-text {{ class }}"&gt; {{ title }} &lt;/li&gt; {% endblock %} {% endembed %} {% endfor %} &lt;/ul&gt; {% for node in navigationTree.nodes %} {% if node.navigationNode.isActive %} {% if node.children|length %} &lt;div class="dropdown-pane" id="navigation-node-{{ node.navigationNode.idNavigationNode }}-children" data-dropdown data-hover="true" data-hover-pane="true"&gt; {% include '@Application/layout/navigation/_partials/nodes.twig' with {nodes: node.children} %} &lt;/div&gt; {% endif %} {% endif %} {% endfor %} &lt;/div&gt; &lt;/div&gt;
&lt;/div&gt; The children nodes are rendered recursively byPyz/Yves/Application/Theme/default/layout/navigation/_partials/nodes.twig. &lt;ul class="vertical menu {% if nested|default(false) %}nested{% endif %}"&gt; {% for node in nodes %} {% embed '@Application/layout/navigation/_partials/base-node.twig' %} {% block nodeContainer %} &lt;li id="navigation-node-{{ node.navigationNode.idNavigationNode }}" data-id-navigation-node="{{ node.navigationNode.idNavigationNode }}" class="{{ class }}"&gt; {{ parent() }} {% if node.children|length %} {% include '@Application/layout/navigation/_partials/nodes.twig' with {nodes: node.children, nested:true} %} {% endif %} &lt;/li&gt; {% endblock %} {% block url %} &lt;a href="{{ url }}"&gt;{{ title }}&lt;/a&gt; {% endblock %} {% block link %} &lt;a href="{{ link }}"&gt;{{ title }}&lt;/a&gt; {% endblock %} {% block externalUrl %} &lt;a href="{{ externalUrl }}" target="_blank"&gt;{{ title }}&lt;/a&gt; {% endblock %} {% block other %} &lt;span class="menu-text"&gt;{{ title }}&lt;/span&gt; {% endblock %} {% endembed %} {% endfor %}
&lt;/ul&gt; To prevent code duplication we implemented thePyz/Yves/Application/Theme/default/layout/navigation/_partials/base-node.twigtemplate which we use to render a node by embedding it in the templates above. This is also the place where we take the visibility controller parameters into account :valid_from,valid_to,is_active. {% set class = node.navigationNode.navigationNodeLocalizedAttributes[0].cssClass %}
{% set url = node.navigationNode.navigationNodeLocalizedAttributes[0].url %}
{% set externalUrl = node.navigationNode.navigationNodeLocalizedAttributes[0].externalUrl %}
{% set link = node.navigationNode.navigationNodeLocalizedAttributes[0].link %}
{% set title = node.navigationNode.navigationNodeLocalizedAttributes[0].title %}
{% set today = "now"|date("Ymd") %} {% if node.navigationNode.isActive and (node.navigationNode.validFrom is empty or node.navigationNode.validFrom|date("Ymd") ‹= today) and (node.navigationNode.validTo is empty or node.navigationNode.validTo|date("Ymd") &gt;= today)
%} {% block nodeContainer %} {% if url %} {% block url %}{% endblock %} {% elseif link %} {% block link %}{% endblock %} {% elseif externalUrl %} {% block externalUrl %}{% endblock %} {% else %} {% block other %}{% endblock %} {% endif %} {% endblock %}
{% endif %} Under the Hood Database Schema The Navigation module provides thespy_navigationtable that stores navigation menus. They have anamefield which is only used for backend display and they also have akeyfield used to reference the navigation menus from Yves. Every navigation entity contains some nodes stored in thespy_navigation_nodetable. The structure of the navigation tree depends on thefk_parent_navigation_nodeand thepositionfields which define if a node has a parent on its level, in what position they are ordered. Each navigation node has attributes that can be different per displayed locale. This information is stored in thespy_navigation_node_localized_attributestable. Thevalid_from,valid_to, andis_activefields allow to toggle the node's and its descendants visibility. See also: Navigation Overview Graphic User Interface - Navigation Creating and Managing a Navigation Tree Migration Guide - Navigation Module Migration Guide - NavigationGui Module Last review date: Sep. 21st, 2017</body>
</html>