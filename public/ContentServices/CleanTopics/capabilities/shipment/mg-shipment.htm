<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Upgrading from Version 5.* to Version 6.* In version 6, multi-currency prices are introduced for shipment methods, allowing to set up different net and gross price per shipment method for each preconfigured currency. Thespy_shipment_method.default_pricedatabase column becomes deprecated. Shipment method prices are stored inspy_shipment_method_pricedatabase table instead.spy_shipment_method_pricedatabase table holds a store + currency specific gross and net price for each shipment method. Database structure is as follows: Updatespryker/shipmentmodule to at least 6.0.0 version. Update database Install the database changes by runningvendor/bin/console propel:diff. Propel should generate a migration file with the changes. Apply the database changes:vendor/bin/console propel:migrate. Generate and update ORM models:vendor/bin/console propel:model:build. You will find some new classes in your project under\Orm\Zed\Shipment\Persistencenamespace. It’s important that you make sure that they extend the base classes from the Spryker core, e.g.: \Orm\Zed\Shipment\Persistence\SpyShipmentMethodPriceextends\Spryker\Zed\Shipment\Persistence\Propel\AbstractSpyShipmentMethodPrice \Orm\Zed\Shipment\Persistence\SpyShipmentMethodPriceQueryextends\Spryker\Zed\Shipment\Persistence\Propel\AbstractSpyShipmentMethodPriceQuery Runvendor/bin/console transfer:generateto update and generate transfer object changes. Transfer object changes PropertydefaultPriceinShipmentMethodtransfer object is replaced byprices, andstoreCurrencyPriceproperties. pricestransfer object property contains the shipment method related prices fromspy_shipment_method_pricedatabase table as aMoneyValuetransfer object collection. storeCurrencyPricetransfer object property contains 1 specific price, based on the preconfigured store + price mode and for the requested currency. ShipmentMethodtransfer object now contains ashipmentMethodKeyproperty, accordingly to the new database structure. Replace the usages ofShipmentMethod.defaultPricetransfer object property in your custom codes, depending on your requirements. Migrate your old database structure by creating aspy_shipment_method_pricerow for each of yourspy_shipment_methodrows. The number of thespy_shipment_method_pricerows per shipment method should match the number of store and currency pair set up in the configuration. Depending on your requirements, you can set gross/net prices as0/null/any integer value as cents. Example: Migration &lt;?php /** * Copyright © 2016-present Spryker Systems GmbH. All rights reserved. * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file. */ namespace Spryker\Zed\Shipment\Communication\Console; use Orm\Zed\Shipment\Persistence\SpyShipmentMethod;
use Orm\Zed\Shipment\Persistence\SpyShipmentMethodPrice;
use Orm\Zed\Shipment\Persistence\SpyShipmentMethodPriceQuery;
use Orm\Zed\Shipment\Persistence\SpyShipmentMethodQuery;
use Spryker\Zed\Kernel\Communication\Console\Console;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion; /** * @method \Spryker\Zed\Shipment\Communication\ShipmentCommunicationFactory getFactory() */
class MigrateShipmentMethodPricesConsole extends Console
{ const COMMAND_NAME = 'shipment:price:migrate'; const COMMAND_DESCRIPTION = 'Console command to migrate shipment prices to multi currency implementation.'; /** * @var int[] Keys are currency iso codes, values are currency ids. */ protected static $idCurrencyCache = []; /** * @return void */ protected function configure() { $this-&gt;setName(static::COMMAND_NAME); $this-&gt;setDescription(static::COMMAND_DESCRIPTION); parent::configure(); } /** * @param \Symfony\Component\Console\Input\InputInterface $input * @param \Symfony\Component\Console\Output\OutputInterface $output * * @return void */ protected function execute(InputInterface $input, OutputInterface $output) { $storeTransferCollection = $this-&gt;getFactory()-&gt;getStoreFacade()-&gt;getAllStores(); $shipmentMethodCollection = SpyShipmentMethodQuery::create()-&gt;find(); if (count($shipmentMethodCollection) === 0) { $output-&gt;writeln('There are no shipment methods to migrate.'); return; } if (count($storeTransferCollection) === 0) { $output-&gt;writeln('There are no stores set up to migrate.'); return; } $question = new ConfirmationQuestion( sprintf('Migrate %s shipment methods? (y|n)', count($shipmentMethodCollection)), false ); if (!$this-&gt;getQuestionHelper()-&gt;ask($input, $output, $question)) { $output-&gt;writeln('Aborted.'); return; } $storeCurrencies = $this-&gt;getStoreCurrencies($storeTransferCollection); $defaultIdStore = $this-&gt;getDefaultIdStore(); $defaultIdCurrency = $this-&gt;getDefaultIdCurrency(); foreach ($shipmentMethodCollection as $shipmentMethodEntity) { $this-&gt;processShipmentMethod($shipmentMethodEntity, $storeCurrencies, $defaultIdStore, $defaultIdCurrency); $output-&gt;writeln(sprintf('Shipment method %d is migrated.', $shipmentMethodEntity-&gt;getIdShipmentMethod())); } $output-&gt;writeln('done.'); } /** * @param \Orm\Zed\Shipment\Persistence\SpyShipmentMethod $shipmentMethodEntity * @param array $storeCurrencies * @param int $defaultIdStore * @param int $defaultIdCurrency * * @return void */ protected function processShipmentMethod(SpyShipmentMethod $shipmentMethodEntity, array $storeCurrencies, $defaultIdStore, $defaultIdCurrency) { foreach ($storeCurrencies as list($idStore, $idCurrency)) { $shipmentMethodPriceEntity = SpyShipmentMethodPriceQuery::create() -&gt;filterByFkShipmentMethod($shipmentMethodEntity-&gt;getIdShipmentMethod()) -&gt;filterByFkStore($idStore) -&gt;filterByFkCurrency($idCurrency) -&gt;findOneOrCreate(); $isDefaultStoreCurrency = $idStore === $defaultIdStore &amp;&amp; $idCurrency === $defaultIdCurrency; $this-&gt;setNetPrice($shipmentMethodPriceEntity); $this-&gt;setGrossPrice($shipmentMethodPriceEntity, $shipmentMethodEntity, $isDefaultStoreCurrency); $shipmentMethodPriceEntity-&gt;save(); } } /** * @param \Orm\Zed\Shipment\Persistence\SpyShipmentMethodPrice $shipmentMethodPrice * * @return void */ protected function setNetPrice(SpyShipmentMethodPrice $shipmentMethodPrice) { if ($shipmentMethodPrice-&gt;getDefaultNetPrice() !== null) { return; } $shipmentMethodPrice-&gt;setDefaultNetPrice(0); } /** * @param \Orm\Zed\Shipment\Persistence\SpyShipmentMethodPrice $shipmentMethodPrice * @param \Orm\Zed\Shipment\Persistence\SpyShipmentMethod $shipmentMethod * @param bool $isDefaultStoreCurrency * * @return void */ protected function setGrossPrice(SpyShipmentMethodPrice $shipmentMethodPrice, SpyShipmentMethod $shipmentMethod, $isDefaultStoreCurrency) { if ($shipmentMethodPrice-&gt;getDefaultGrossPrice() !== null) { return; } $shipmentMethodPrice-&gt;setDefaultGrossPrice($isDefaultStoreCurrency ? (int)$shipmentMethod-&gt;getDefaultPrice() : 0); } /** * Returns with a list of available store-currency id pairs. * * Example: * Store 1 has currency 5, 6 * Store 2 has currency 10 * Result: [ * [1, 5], * [1, 6], * [2, 10] * ] * * @param \Generated\Shared\Transfer\StoreTransfer[] $storeTransferCollection * * @return array */ protected function getStoreCurrencies(array $storeTransferCollection) { $currencies = []; foreach ($storeTransferCollection as $storeTransfer) { foreach ($storeTransfer-&gt;getAvailableCurrencyIsoCodes() as $isoCode) { $currencies[] = [$storeTransfer-&gt;getIdStore(), $this-&gt;getIdCurrencyByIsoCode($isoCode)]; } } return $currencies; } /** * @param string $currencyIsoCode * * @return int */ protected function getIdCurrencyByIsoCode($currencyIsoCode) { if (!isset(static::$idCurrencyCache[$currencyIsoCode])) { static::$idCurrencyCache[$currencyIsoCode] = $this-&gt;getFactory() -&gt;getCurrencyFacade() -&gt;fromIsoCode($currencyIsoCode) -&gt;getIdCurrency(); } return static::$idCurrencyCache[$currencyIsoCode]; } /** * @return int */ protected function getDefaultIdCurrency() { return $this-&gt;getIdCurrencyByIsoCode( $this-&gt;getFactory() -&gt;getStoreFacade() -&gt;getCurrentStore() -&gt;getDefaultCurrencyIsoCode() ); } /** * @return int */ protected function getDefaultIdStore() { return $this-&gt;getFactory()-&gt;getStoreFacade()-&gt;getCurrentStore()-&gt;getIdStore(); } /** * @return \Symfony\Component\Console\Helper\QuestionHelper */ protected function getQuestionHelper() { return $this-&gt;getHelper('question'); } } Register the prepared multi-currency handlingMoneyCollectFormTypeform type in your project. Here is the example of MoneyCollectionTypePlugin registration: &lt;?php
namespace Pyz\Zed\Shipment; use Spryker\Zed\Kernel\Container;
use Spryker\Zed\Money\Communication\Plugin\Form\MoneyCollectionFormTypePlugin;
use Spryker\Zed\Shipment\ShipmentDependencyProvider as SprykerShipmentDependencyProvider; class ShipmentDependencyProvider extends SprykerShipmentDependencyProvider
{ /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Communication\Form\FormTypeInterface */ protected function createMoneyCollectionFormTypePlugin(Container $container) { return new MoneyCollectionFormTypePlugin(); }
} ShipmentFacadeInterface::createMethodmethod now expects "prices"MoneyValuetransfer object collection to be set in the providedShipmentMethodtransfer object. Update your custom calls to this method accordingly. ShipmentFacadeInterface::updateMethodmethod now expects "prices"MoneyValuetransfer object collection to be set in the providedShipmentMethodtransfer object. Update your custom calls to this method accordingly. ShipmentFacadeInterface::getAvailableMethodsmethod applies multi-currency feature: Does not populatetaxRatetransfer object property anymore inshipment methodtransfer objects. Excludes shipment methods which would end up withNULLvalue for the request'scurrencyand preconfigured store + price mode. Amend your custom calls toShipmentFacadeInterface::getAvailableMethodsmethod accordingly to your requirements. Important: CheckoutAvailableShipmentMethodsPluginis an adapter toShipmentFacadeInterface::getAvailableMethods. If you use this plugin, you will need to amend its usage in your code. MethodForm::setDefaultOptionsdeprecated method was removed, useMethodForm::configureOptionsinstead. ShipmentDependencyProvider::STOREstatic dependency access was replaced with properStoreFacadeInterfacebridged access. Amend your implementation if you have customized it. Note:MethodForm.defaultPriceform field was replaced with its multi-currency representation. Amend your implementation if you have customized it. Note:MethodFormform now works onShipmentMethodtransfer object instead of simple array. Amend your implementation if you have customized it. Note:ShipmentMethodDeliveryTimePluginInterfaceinterface now expects the returned delivery time in seconds. Amend your implementations of this plugin accordingly. DemoShop example implementation of the plugin and its usage inShipmentFormDataProvider::getDeliveryTimemethod are also updated. Go to Shipment management Zed Admin UI to verify your shipment method prices. Upgrading from Version 4.* to Version 5.* In version 5, shipment lost the direct foreign keysales.fk_shipment_methodto thesales_ordertable, it was replaced with thespy_sales_shipmenttable where all shipment information is stored. A newSalesOrderHydrationplugin was added to populateOrderTransferwith shipment informationShipmentOrderHydratePlugin. The new shipment table structure requires manual data migration, we have provided migration script, you can read how to migrate shipment data in sales migration guide . Upgrading from Version 2.* to Version 3.* The tax plugins are using the version 3.* of the Tax module. You need to upgrade the Tax module. See also: Get acquainted with Shipment Learn more about Shipment concepts Learn more about Shipment Methods Plugins Last review date: Oct. 16th, 2017</body>
</html>