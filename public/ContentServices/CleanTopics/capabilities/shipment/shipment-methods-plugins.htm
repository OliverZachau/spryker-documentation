<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>The main concerns regarding shipping services are : availability: is the shipping method available to deliver the order? price: how is the delivery price calculated ? delivery time: when will the order be delivered ? For each of these concerns, an optional plugin is linked to each shipping method : Availability Plugin: returns a boolean value which implies if the active shipping method is available and should be visible to the customers in the list of available shipping services. Price Calculation Plugin: shipping services can consider different criteria in calculating the price for delivery (such as size of the package, weight, etc.). When a price plugin is paired to a shipping method, the related Zed Admin UI preconfigured prices are omitted. Delivery Time Plugin: the estimated delivery time information of the purchased items is important for the customers. The delivery time can vary depending on the region, shipping service type, or day of the week. Delivery time is measured in seconds as integer (Example: 1 day = 86400; 5 days = 5 * 86400). Availability Plugin For each availability plugin linked to a shipment method, a class with the same name must exist on the project side in the Shipment(Undefined variable: General.bundle/module)(Pyz/Zed/Shipment/Communication/Plugin/Availability). The class must implementShipmentMethodAvailabilityPluginInterfaceand must extendAbstractPluginclass, as in the example below : &lt;?php
namespace Pyz\Zed\Shipment\Communication\Plugin\Availability; use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Shipment\Communication\Plugin\ShipmentMethodAvailabilityPluginInterface; class DHLExpressPlugin extends AbstractPlugin implements ShipmentMethodAvailabilityPluginInterface
{ /** * @param ShipmentMethodAvailabilityInterface $shipmentMethodAvailability * * @return bool */ public function isAvailable(ShipmentMethodAvailabilityInterface $shipmentMethodAvailability) { ... } } Price Calculation Plugin For each price calculation plugin linked to a shipment method, a class with the same name must exist on the project side in the Shipment(Undefined variable: General.bundle/module)(Pyz/Zed/Shipment/Communication/Plugin/PriceCalculation). The class must implementShipmentMethodPricePluginInterfaceand must extendAbstractPluginclass, as in the example below : &lt;?php
namespace Pyz\Zed\Shipment\Communication\Plugin\PriceCalculation; use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Shipment\Communication\Plugin\ShipmentMethodAvailabilityPluginInterface;
use Spryker\Zed\Shipment\Communication\Plugin\ShipmentMethodPricePluginInterface; class DHLExpressPlugin extends AbstractPlugin implements ShipmentMethodPricePluginInterface
{ /** * @param ShipmentMethodAvailabilityInterface $shipmentMethodAvailability * * @return int */ public function getPrice(ShipmentMethodAvailabilityInterface $shipmentMethodAvailability) { //.. } } Delivery Time Plugin For each availability plugin linked to a shipment method, a class with the same name must exist on the project side in the Shipment(Undefined variable: General.bundle/module)(Pyz/Zed/Shipment/Communication/Plugin/DeliveryTime). The class must implementShipmentMethodDeliveryTimePluginInterfaceand must extendAbstractPluginclass, as in the example below : &lt;?php
namespace Pyz\Zed\Shipment\Communication\Plugin\DeliveryTime; use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Shipment\Communication\Plugin\ShipmentMethodAvailabilityPluginInterface;
use Spryker\Zed\Shipment\Communication\Plugin\ShipmentMethodDeliveryTimePluginInterface; class DHLExpressPlugin extends AbstractPlugin implements ShipmentMethodDeliveryTimePluginInterface
{ /** * @param ShipmentMethodAvailabilityInterface $shipmentMethodAvailability * * @return int */ public function getTime(ShipmentMethodAvailabilityInterface $shipmentMethodAvailability) { //.. } } Plugin Registration The plugins must be registered in the ShipmentDependencyProvider, by overriding the following 3 operations : &lt;?php
/** * @param Container $container * * @return array */
protected function getAvailabilityPlugins(Container $container)
{ return [ 'Plugin name visible in form' =&gt; new YourAvailabilityPlugin(), ];
} /** * @param Container $container * * @return array */
protected function getPricePlugins(Container $container)
{ return [ 'Plugin name visible in form' =&gt; new YourPricePlugin(), ];
} /** * @param Container $container * * @return array */
protected function getDeliveryTimePlugins(Container $container)
{ return [ 'Plugin name visible in form' =&gt; new YourDeliveryTimePlugin(), ];
} See also: Get a general idea about the Shipment feature Get a overview of the Shipment module Migrate to a newer version of the Shipment module Last review date: Oct. 27th, 2017</body>
</html>