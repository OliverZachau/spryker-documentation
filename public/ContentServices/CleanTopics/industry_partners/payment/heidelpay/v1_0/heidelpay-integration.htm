<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Configuration You can copy over configs to your config from the Heidelpay's moduleconfig.dist.phpfile. The most important configuration items are explained in the table below, make sure to get the required configuration items from Heidelpay: Configuration key* Description Obtained from Heidelpay? Value for debugging CONFIG_HEIDELPAY_SECURITY_SENDER Hash which is needed for making requests to Heidelpay payment system Yes See "Authentifizierungsdaten" section in https://dev.heidelpay.de/sandbox-environment/ CONFIG_HEIDELPAY_USER_LOGIN Merchant login to the Heidelpay payment system Yes See "Authentifizierungsdaten" section in https://dev.heidelpay.de/sandbox-environment/ CONFIG_HEIDELPAY_USER_PASSWORD Merchant password to theHeidelpay payment system Yes See "Authentifizierungsdaten" section in https://dev.heidelpay.de/sandbox-environment/ CONFIG_HEIDELPAY_TRANSACTION_CHANNEL_[YOUR_CHANNEL_NAME]** Transaction channel hash used for specified payment method in Heidelpay payment system, necessary for making API requests. Yes See "Authentifizierungsdaten" section for each payment method in https://dev.heidelpay.de/sandbox-environment/ CONFIG_HEIDELPAY_APPLICATION_SECRET Internal secret key, used by Heidelpay to "sign" API requests Recommended "debug_secret" CONFIG_HEIDELPAY_PAYMENT_RESPONSE_URL A response URL used by Heidelpay to send Payment results to the system when the order is made. Make sure it is accessible from outside! No If your dev (staging/whatever) system is not accessible from outside, see "Usage from localhost" section below to figure out how to debug the system when developing locally. CONFIG_YVES_CHECKOUT_ASYNC_RESPONSE_URL A response URL used by Secure Credit Card payment method on the payment step of the checkout. Heidelpay payment system will use it to send asynchronous credit card registration response. No If your dev (staging/whatever) system is not accessible from outside, see "Usage from localhost" section below to figure out how to debug the system when developing locally. * Configuration keys are used as follows: $config[HeidelpayConstants::CONFIGURATION_KEY_HERE] = 'CONFIGURATION VALUE HERE' ** Repeat this configuration for each payment method you're going to use. Based on the payment methods you're going to use, remove unnecessary processes fromOmsConstants::ACTIVE_PROCESSESandSalesConstants::PAYMENT_METHOD_STATEMACHINE_MAPPING. Please see example of the configuration below: // ---------- Navigation
$YVES_HOST_PROTOCOL = 'http'; $config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_SUCCESS_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/checkout/success';
$config[HeidelpayConstants::CONFIG_YVES_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES];
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_PAYMENT_FAILED_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/payment-failed?error_code=%s';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_IDEAL_AUTHORIZE_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/ideal-authorize';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_SUMMARY_STEP_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/checkout/summary';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_ASYNC_RESPONSE_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/cc-register-response'; // ---------- Error handling
$config[ErrorHandlerConstants::DISPLAY_ERRORS] = true;
$config[ErrorHandlerConstants::ERROR_RENDERER] = WebExceptionErrorRenderer::class; // Heidelpay related
$YVES_HOST_PROTOCOL = 'http';
$config[ApplicationConstants::HOST_YVES] = 'your.great-shop-site.com'; $config[HeidelpayConstants::CONFIG_HEIDELPAY_SECURITY_SENDER] = '31HA07BC8142C5A171745D00AD63D182';
$config[HeidelpayConstants::CONFIG_HEIDELPAY_USER_LOGIN] = '31ha07bc8142c5a171744e5aef11ffd3';
$config[HeidelpayConstants::CONFIG_HEIDELPAY_USER_PASSWORD] = '93167DE7'; $config[HeidelpayConstants::CONFIG_HEIDELPAY_TRANSACTION_CHANNEL_CC_3D_SECURE] = '31HA07BC8142C5A171749A60D979B6E4';
$config[HeidelpayConstants::CONFIG_HEIDELPAY_TRANSACTION_CHANNEL_PAYPAL] = '31HA07BC8142C5A171749A60D979B6E4';
$config[HeidelpayConstants::CONFIG_HEIDELPAY_TRANSACTION_CHANNEL_IDEAL] = '31HA07BC8142C5A171744B56E61281E5';
$config[HeidelpayConstants::CONFIG_HEIDELPAY_TRANSACTION_CHANNEL_SOFORT] = '31HA07BC8142C5A171749CDAA43365D2'; // Shop configuration values
$config[HeidelpayConstants::CONFIG_HEIDELPAY_APPLICATION_SECRET] = 'application_secret';
$config[HeidelpayConstants::CONFIG_HEIDELPAY_SANDBOX_REQUEST] = true; $config[HeidelpayConstants::CONFIG_HEIDELPAY_LANGUAGE_CODE] = 'DE';
$config[HeidelpayConstants::CONFIG_HEIDELPAY_PAYMENT_RESPONSE_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/payment'; $config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_SUCCESS_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/checkout/success';
$config[HeidelpayConstants::CONFIG_YVES_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES];
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_PAYMENT_FAILED_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/payment-failed?error_code=%s';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_IDEAL_AUTHORIZE_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/ideal-authorize';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_PAYMENT_STEP_PATH] = '/checkout/payment';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_SUMMARY_STEP_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/checkout/summary';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_ASYNC_RESPONSE_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/cc-register-response'; $config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_PAYMENT_FRAME_CUSTOM_CSS_URL] = '';
$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_PAYMENT_FRAME_PREVENT_ASYNC_REDIRECT] = "FALSE";
$config[HeidelpayConstants::CONFIG_ENCRYPTION_KEY] = "encryption_key"; Add dependencies to src/Pyz/Yves/Checkout/CheckoutDependencyProvider.php: class CheckoutDependencyProvider extends SprykerCheckoutDependencyProvider {
... /** * @param \Spryker\Yves\Kernel\Container $container * * @return \Spryker\Yves\Kernel\Container */ protected function providePlugins(Container $container)
... return $pimplePlugin-&gt;getApplication(); }; + $container[static::PAYMENT_SUB_FORMS] = function () {
+ $paymentSubFormPlugin = new SubFormPluginCollection();
+
+ $paymentSubFormPlugin-&gt;add(new HeidelpaySofortSubFormPlugin());
+ $paymentSubFormPlugin-&gt;add(new HeidelpayPaypalAuthorizeSubFormPlugin());
+ $paymentSubFormPlugin-&gt;add(new HeidelpayPaypalDebitSubFormPlugin());
+ $paymentSubFormPlugin-&gt;add(new HeidelpayIdealSubFormPlugin());
+ $paymentSubFormPlugin-&gt;add(new HeidelpayCreditCardSecureSubFormPlugin());
+
+ return $paymentSubFormPlugin;
+ };
+
+
+ $container[static::PAYMENT_METHOD_HANDLER] = function () {
+ $paymentMethodHandler = new StepHandlerPluginCollection();
+
+ $paymentMethodHandler-&gt;add(new HeidelpayHandlerPlugin(), PaymentTransfer::HEIDELPAY_SOFORT);
+ $paymentMethodHandler-&gt;add(new HeidelpayHandlerPlugin(), PaymentTransfer::HEIDELPAY_PAYPAL_AUTHORIZE);
+ $paymentMethodHandler-&gt;add(new HeidelpayHandlerPlugin(), PaymentTransfer::HEIDELPAY_PAYPAL_DEBIT);
+ $paymentMethodHandler-&gt;add(new HeidelpayHandlerPlugin(), PaymentTransfer::HEIDELPAY_IDEAL);
+ $paymentMethodHandler-&gt;add(new HeidelpayHandlerPlugin(), PaymentTransfer::HEIDELPAY_CREDIT_CARD_SECURE);
+
+ return $paymentMethodHandler;
+ };
+ return $container; } Add dependency to src/Pyz/Zed/Oms/OmsDependencyProvider.php: class OmsDependencyProvider extends SprykerOmsDependencyProvider { /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function provideBusinessLayerDependencies(Container $container)
... +
+ $container-&gt;extend(static::CONDITION_PLUGINS, function (ConditionCollectionInterface $conditionCollection) {
+ $conditionCollection
+ -&gt;add(new IsAuthorizationCompletedPlugin(), 'Heidelpay/IsAuthorizationCompleted')
+ -&gt;add(new IsDebitCompletedPlugin(), 'Heidelpay/IsDebitCompleted')
+ -&gt;add(new IsCaptureApprovedPlugin(), 'Heidelpay/IsCaptureApproved');
+
+
+ return $conditionCollection;
+ });
+
+ $container-&gt;extend(static::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) {
+ $commandCollection
+ -&gt;add(new AuthorizePlugin(), 'Heidelpay/Authorize')
+ -&gt;add(new DebitPlugin(), 'Heidelpay/Debit')
+ -&gt;add(new CapturePlugin(), 'Heidelpay/Capture');
+ return $commandCollection;
+ });
+ return $container; } Add dependencies to src/Pyz/Zed/Payment/PaymentDependencyProvider.php: ... +class PaymentDependencyProvider extends SprykerPaymentDependencyProvider
+{
+
+
+ public function provideBusinessLayerDependencies(Container $container)
+ {
+ $container = parent::provideBusinessLayerDependencies($container);
+ $container-&gt;extend(static::CHECKOUT_PLUGINS, function (CheckoutPluginCollection $pluginCollection) {
+ $pluginCollection-&gt;add(new HeidelpaySaveOrderPlugin(), HeidelpayConfig::PROVIDER_NAME, PaymentDependencyProvider::CHECKOUT_ORDER_SAVER_PLUGINS);
+ $pluginCollection-&gt;add(new HeidelpayPostSavePlugin(), HeidelpayConfig::PROVIDER_NAME, PaymentDependencyProvider::CHECKOUT_POST_SAVE_PLUGINS);
+ return $pluginCollection;
+ });
+
+
+ }
+} Add Heidelpay's controller provider to the Yve's bootstrap: ...
use SprykerEco\Yves\Heidelpay\Plugin\Provider\HeidelpayControllerProvider; class YvesBootstrap
{
...
protected function getControllerProviderStack($isSsl)
{ return [ ... new HeidelpayControllerProvider($isSsl), ];
}
... Setup database and DTOs The Heidelpay-Bundle will integrate 3 new tables to your database scheme. Make sure that you integrate them in accordance with your project migration guideline. (e.g. run consolepropel:diffto see the migrations needed). console propel:diff &amp;&amp; console propel:migrate &amp;&amp; console propel:model:build You also have to genreate data transfer objects which is related with Heidelpay console tr:ge Change payment step template Change the following lines to change behavior on the payment selection step: +++ b/src/Pyz/Yves/Checkout/Theme/default/checkout/payment.twig
@@ -11,22 +11,17 @@ &lt;div class="callout"&gt; &lt;ul class="no-bullet"&gt;
- {% for name, choices in paymentForm.paymentSelection.vars.choices %}
-
- &lt;h4&gt;{{ ('checkout.payment.provider.' ~ name) | trans }}&lt;/h4&gt;
-
- {% for key, choice in choices %}
- &lt;li&gt; &amp;nbsp;
- {{ form_widget(paymentForm.paymentSelection[key], {'attr': {'class': '__toggler'}}) }}
- {{ form_label(paymentForm.paymentSelection[key]) }}
- &lt;div class="__toggler-target"&gt;
- &lt;div class="row columns"&gt;
- {{ checkout.include_subform(paymentForm[paymentForm.paymentSelection[key].vars.value]) }}
- &lt;/div&gt;
+ {% for method in paymentForm.paymentSelection %}
+ &lt;li&gt;
+ {{ form_widget(method, {'attr': {'class': '__toggler'}}) }}
+ {{ form_label(method) }}
+ &lt;div class="__toggler-target"&gt;
+ &lt;div class="row columns"&gt;
+ {{ checkout.include_subform(paymentForm[method.vars.value]) }} &lt;/div&gt;
- &lt;/li&gt;
- {% endfor %}
-
+ {% if not loop.last %}&lt;hr&gt;{% endif %}
+ &lt;/div&gt;
+ &lt;/li&gt; {% endfor %} &lt;/ul&gt; &lt;/div&gt; See also: Payment Integration - Heidelpay Heidelpay - Installation Heidelpay - Integration to Your Project Heidelpay - Credit Card Secure Hedelpay - iDeal Heidelpay - Paypal Debit Workflow Heidelay - Sofort (Online Transfer) Heidelpay - Workflow for Errors ,Last review date: Dec. 6th, 2017</body>
</html>