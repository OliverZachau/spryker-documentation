<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Please refer toconfig/Shared/config.dist.phpfor example of module configuration. To setup the Amazon Pay initial configuration, use the credentials you received after registering as an Amazon seller: $config[AmazonPayConstants::CLIENT_ID] = '';
$config[AmazonPayConstants::CLIENT_SECRET] = '';
$config[AmazonPayConstants::SELLER_ID] = '';
$config[AmazonPayConstants::ACCESS_KEY_ID] = '';
$config[AmazonPayConstants::SECRET_ACCESS_KEY] = ''; Next, specify your country and shop: $config[AmazonPayConstants::REGION] = 'DE';
$config[AmazonPayConstants::STORE_NAME] = 'The Shop'; For development purposes sandbox mode must be enabled: $config[AmazonPayConstants::SANDBOX] = true; TheERROR_REPORT_LEVELparameter is used for internal purposes and specifies the log verbosity level. There are three options: Log all API responses. Log errors only. Disable logging. $config[AmazonPayConstants::ERROR_REPORT_LEVEL] = 'ERRORS_ONLY'; In order to configure look-and-feel of Amazon Pay button, you may use following config values: $config[AmazonPayConstants::WIDGET_BUTTON_TYPE] = AmazonPayConstants::WIDGET_BUTTON_TYPE_FULL;
$config[AmazonPayConstants::WIDGET_BUTTON_SIZE] = AmazonPayConstants::WIDGET_BUTTON_SIZE_MEDIUM;
$config[AmazonPayConstants::WIDGET_BUTTON_COLOR] = AmazonPayConstants::WIDGET_BUTTON_COLOR_DARK_GRAY; According to Amazon Pay restrictions, a module can run either on a localhost domain or on SSL. If it is not possible to use localhost, then SSL should be installed and configured. For testing purposes, register a test account in the dashboard. OMS Configuration Please activate the following processes. If you plan to use only one, then drop the other one. $config[OmsConstants::ACTIVE_PROCESSES][] = 'AmazonPayPaymentAsync01';
$config[OmsConstants::ACTIVE_PROCESSES][] = 'AmazonPayPaymentSync01'; Default implementation for commands and options should be added toPyz/Zed/Oms/OmsDependencyProvider.php Commands: $container-&gt;extend( OmsDependencyProvider::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) { $commandCollection -&gt;add(new CancelOrderCommandPlugin(), 'AmazonPay/CancelOrder') -&gt;add(new CloseOrderCommandPlugin(), 'AmazonPay/CloseOrder') -&gt;add(new RefundOrderCommandPlugin(), 'AmazonPay/RefundOrder') -&gt;add(new ReauthorizeExpiredOrderCommandPlugin(), 'AmazonPay/ReauthorizeExpiredOrder') -&gt;add(new CaptureCommandPlugin(), 'AmazonPay/Capture') -&gt;add(new UpdateSuspendedOrderCommandPlugin(), 'AmazonPay/UpdateSuspendedOrder') -&gt;add(new UpdateNewOrderStatusCommandPlugin(), 'AmazonPay/UpdateNewOrderStatus') -&gt;add(new UpdateAuthorizationStatusCommandPlugin(), 'AmazonPay/UpdateAuthorizationStatus') -&gt;add(new UpdateCaptureStatusCommandPlugin(), 'AmazonPay/UpdateCaptureStatus') -&gt;add(new UpdateRefundStatusCommandPlugin(), 'AmazonPay/UpdateRefundStatus'); return $commandCollection; }
); Conditions: $container-&gt;extend(OmsDependencyProvider::CONDITION_PLUGINS, function (ConditionCollectionInterface $conditionCollection) { $conditionCollection -&gt;add(new IsClosedConditionPlugin(), 'AmazonPay/IsClosed') -&gt;add(new IsCloseAllowedConditionPlugin(), 'AmazonPay/IsCloseAllowed') -&gt;add(new IsCancelledConditionPlugin(), 'AmazonPay/IsCancelled') -&gt;add(new IsCancelNotAllowedConditionPlugin(), 'AmazonPay/IsCancelNotAllowed') -&gt;add(new IsCancelledOrderConditionPlugin(), 'AmazonPay/IsOrderCancelled') -&gt;add(new IsAuthOpenConditionPlugin(), 'AmazonPay/IsAuthOpen') -&gt;add(new IsAuthDeclinedConditionPlugin(), 'AmazonPay/IsAuthDeclined') -&gt;add(new IsAuthPendingConditionPlugin(), 'AmazonPay/IsAuthPending') -&gt;add(new IsAuthSuspendedConditionPlugin(), 'AmazonPay/IsAuthSuspended') -&gt;add(new IsAuthExpiredConditionPlugin(), 'AmazonPay/IsAuthExpired') -&gt;add(new IsAuthClosedConditionPlugin(), 'AmazonPay/IsAuthClosed') -&gt;add(new IsAuthTransactionTimedOutConditionPlugin(), 'AmazonPay/IsAuthTransactionTimedOut') -&gt;add(new IsAuthSuspendedConditionPlugin(), 'AmazonPay/IsPaymentMethodChanged') -&gt;add(new IsCaptureCompletedConditionPlugin(), 'AmazonPay/IsCaptureCompleted') -&gt;add(new IsCaptureDeclinedConditionPlugin(), 'AmazonPay/IsCaptureDeclined') -&gt;add(new IsCapturePendingConditionPlugin(), 'AmazonPay/IsCapturePending') -&gt;add(new IsRefundCompletedConditionPlugin(), 'AmazonPay/IsRefundCompleted') -&gt;add(new IsRefundDeclinedConditionPlugin(), 'AmazonPay/IsRefundDeclined') -&gt;add(new IsRefundPendingConditionPlugin(), 'AmazonPay/IsRefundPending'); return $conditionCollection;
}); All commands and conditions are inSprykerEco\Zed\AmazonPay\Communication\Plugin\Oms\namespace. IPN Configuration In order to allow everyone to send push notifications, please extendconfig_default.XXX.phpfor desired environments: $config[AclConstants::ACL_USER_RULE_WHITELIST][] = [ 'bundle' =&gt; 'amazonpay', 'controller' =&gt; 'ipn', 'action' =&gt; 'endpoint', 'type' =&gt; 'allow',
]; Depending on your SSL configuration, you may have to extend as well: $config[ApplicationConstants::ZED_SSL_EXCLUDED][] = 'amazonpay/ipn/endpoint';
$config[ApplicationConstants::YVES_SSL_EXCLUDED]['aie'] = '/amazonpay/ipn/endpoint'; See also: Get a general idea about Amazon Pay Configure Amazon Pay API Obtaining Amazon Order Reference and Shipping Addresses details Learn how Amazon Pay Refund works Rendering the "Pay with Amazon" button on the Cart page Learn how Amazon Pay Sandbox Simulations work Learn about Amazon Pay state machine for synchronous and asynchronous flows Learn about OMS commands Check out Amazon Pay example email notifications Last review date: Nov. 13th, 2017</body>
</html>