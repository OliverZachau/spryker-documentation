<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Default and Local Configuration Files Underconfig/Sharedyou’ll find several files that are used for the system’s configuration, that can be used by both Yves and Zed. The files are merged in a fixed order if they exist. So the entries ofconfig_default.phpare overwritten by the entries inconfig_default-[environment].phpetc. These configuration files are used for global configuration, like database credentials, URLs or the search engine ports. For settings that are used inside a specific(Undefined variable: General.bundle/module), use the(Undefined variable: General.bundle/module)configuration instead. There are several files that allow you to add the needed configuration for the exact use-case you want. Filename Purpose Example file name on gitignore config_default.php Configuration that is used for all environments, all locations and for all stores. Usually that’s the place to put default data for the whole project. config_default.php no config_default-[environment].php Configuration that is used for a specific environment but for all stores. Usually this place is used for global flags, e.g. tracking is active on production and staging only. config_default-production.php no config_default-[storename].php Configuration that contains the default information for each store. config_default_DE.php no config_default-[environment]_[storename].php Configuration for a specific environment and a specific store. config_default-production_DE.php no config_local.php Configuration that only applies to one location (e.g. your laptop or a concrete server). On the server this file is usually written automatically by the provisioning system like Saltstack or Puppet. This is the right place for confidential information like database login or payment credentials which must not be committed to the repository. config_local.php yes config_local_[storename].php Confidential information which only applies for one store goes into here. config_local_DE.php yes These configuration files are merged on the fly in a fixed order. First the system reads the content of theconfig_default.php, then it reads the content of the currentconfig_default-[environment].phpfile and so on. All entries which are defined more than once are overwritten. You can have a look intoSpryker\Shared\Library\Configto see exactly how it works. Constant Interfaces As you can see in the configuration files, the whole configuration is a big array with keys and values. To enable traceability (which entry is used where?) it is a good practice to use constants as keys. These constants are defined in shared interfaces which are provided by the related(Undefined variable: General.bundle/module). &lt;?php
namespace Pyz\Shared\MyBundle; interface MyBundleConstants
{ const ANY_CONSTANT = 'ANY_CONSTANT'; const ANOTHER_CONSTANT = 'ANOTHER_CONSTANT';
} Now you can use the constant inside of the configuration files like this: &lt;?php // inside of config_default.php
use Pyz\Shared\MyBundle\MyBundleConstants; $config[MyBundleConstants::ANY_CONSTANT] = 'Foo';
$config[MyBundleConstants::ANOTHER_CONSTANT] = ['Bar', 'Baz']; Additional Configuration Files There are some other configuration files for specific purposes. Filename Purpose console_env_local.php This file returns the default environment for command line calls. This file is on gitignore. It is optional. If it is missing you need to explicitly pass the environment to all command line calls . default_store.php This file returns the default store which is used for all command line calls . stores.php This file contains an array with all stores and their configuration like locale, date format, currency, etc. How to Retrieve the Configuration Static Method You can retrieve the configuration from the configuration files with a static method: ?php use Spryker\Shared\Config; $value = Config::get($key); (Undefined variable: General.Bundle/Module)Config (Client/Yves/Zed/Shared/Service) Each module ships with special classes which gives access to the configuration. Here you can also add more configuration which needs more programming. For instance when you need to parse a CSV file to get more configuration, this code would be here. Although you can use the same global mechanism like in Yves to read the documentation, it is a better practice to access it through the(Undefined variable: General.bundle/module)config file. This snippet can be used to create a new module config. Just replace MyModule with your current module name. &lt;?php
namespace Pyz\Zed\MyBundle;
use Pyz\Shared\MyBundle\MyBundleConstants;
use Spryker\Zed\Kernel\AbstractBundleConfig;
class MyModuleConfig extends AbstractBundleConfig
{ public function getFoo() { return $this-&gt;get(MyBundleConstants::ANY_CONSTANT); // Equivalent to Config::get($MyBundleConstants::ANY_CONSTANT); }
} The same is valid for other layers: Client, Yves, Shared, Service. Module Shared Configuration From kernel version 3.14 it is possible to create shared configuration classes, which are shared between application layers. That means you can access them in Yves, Zed, Client. To use it, create Config class in your module Shared namespace, for example, &lt;?php namespace Spryker\Shared\ModuleName; use Spryker\Shared\Kernel\AbstractSharedConfig; class ModuleNameConfig extends AbstractSharedConfig { /** * @return string */ public function getConfigurationValue() { return 'value'; } } Then you can use it in your application configuration as follows: &lt;?php namespace Spryker\Zed\ModuleName; use Spryker\Zed\Kernel\AbstractBundleConfig; /** * @method \Spryker\Shared\ModuleName\ModuleNameConfig getSharedConfig() */ class ModuleNameConfig extends AbstractBundleConfig { /** * @return string */ public function getConfigurationValue() { return $this-&gt;getSharedConfig()-&gt;getConfigurationValue(); } } The same way it can also be included to Yves, Client configuration classes. Last review date: Nov. 27th, 2017</body>
</html>