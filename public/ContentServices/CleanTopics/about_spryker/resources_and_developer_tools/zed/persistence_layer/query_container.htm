<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>A query container holds all the database queries of the current(Undefined variable: General.bundle/module). Each(Undefined variable: General.bundle/module)has exactly one query container, which also acts as an entry point to the persistence layer. Internally it uses query objects and returns unterminated queries. As you can see in the example below, the query container consists ofquery-methodswhich get query objects from the factory , add some filters or joins and return the unterminated query object. Unterminated means you don’t execute the query withfind(),findOne()orcount(). use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer; /** * @method \Pyz\Zed\MyBundle\Persistence\MyBundlePersistenceFactory getFactory() */
class MyBundleQueryContainer extends AbstractQueryContainer implements MyBundleQueryContainerInterface
{ public function queryTemplateByPath($path) { $query = $this-&gt;getFactory()-&gt;createTemplateQuery(); $query-&gt;filterByTemplatePath($path); return $query; }
} How to Use a Query Container The query container of the current unterminated query is available via$this-&gt;getQueryContainer()in the factory of the communication and the business layer and can be injected into any model. https://www.gliffy.com/go/html5/9809427 Execute the Query You can adjust the query itself, but you should avoid to add more filters or joins because this is a responsibility of the query container only. &lt;?php
$templateQuery = $this-&gt;queryTemplateByPath($path);
$templateQuery-&gt;limit(100);
$templateQuery-&gt;offset(10);
$templateCollection = $templateQuery-&gt;find(); // or findOne() You can also change the output format, e.g. to array instead of collection: &lt;?php
$formatter = new SimpleArrayFormatter();
$templateQuery-&gt;setFormatter(); Implementing a Query cContainer Snippet to Create a New Query Container To create a new query container you can copy and paste the following snippet and replaceMy(Undefined variable: General.Bundle/Module)with your(Undefined variable: General.bundle/module)name. &lt;?php
namespace Pyz\Zed\MyBundle\Persistence; use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer; /** * @method MyBundlePersistenceFactory getFactory() */
class MyBundleQueryContainer extends AbstractQueryContainer implements MyBundleQueryContainerInterface
{
} Conventions for Query Containers There are some conventions which should be followed here: All methods have the prefixquery*(). All public methods are exposed in the related interface (e.g.MyBundleQueryContainerInterface). Queries are returned unterminated, so that the user can add restrictions (limit, offset) and can choose how to terminate (count(),find(),findAll()). Query containers do not access higher layers. So no usage of a facade here. Query containers do not contain any logic which is not needed to build queries. See also: Database overview Defining Database Schema Learn about Entities and their usage Saving Entities with transactions Learn about Entity Manager and how to use it Learn about Repository class and how to use it Creating query objects</body>
</html>