<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Since Kernel version 3.2 it's possible to use a Repository class in your persistence layer. The repository implements the repository pattern , which means you have clear separation between business and persistence layers. Propel entities are not allowed outside the persistence layer. We are using transfer objects instead. This separation enables switching to different database systems or ORMs, you could even use NOSQL to store your data. Each module must have the Repository class inPersistence/ModuleNameRepository. The repository must extend\Spryker\Zed\Kernel\Persistence\AbstractRepositorywhich will provide a few helper methods when working with Propel entities. See Blog module for reference - it was build using the Repository. For example,BlogRepositoryclass: use Spryker\Zed\Kernel\Persistence\AbstractRepository; /** * @method \Spryker\Zed\Blog\Persistence\BlogPersistenceFactory getFactory() */ class BlogRepository extends AbstractRepository implements BlogRepositoryInterface { /** * @param string $firstName * * @return \Generated\Shared\Transfer\SpyBlogEntityTransfer */ public function findBlogByName($firstName) { $customerQuery = $this-&gt;queryBlogByName($firstName) -&gt;joinWithSpyBlogComment(); return $this-&gt;buildQueryFromCriteria($customerQuery)-&gt;find()[0]; } } EntityTransfers With the Publish and Synchronize feature we have added a new transfer generation for EntityTransfers. The EntityTransfers are direct representation of SQL tables, EntityTransfer has all properties and relations defined, also it holds FQCN to the Propel entity it is mapped to. This FQCN is used when mapping entity when data is persisted. Names of Entity Transfers start withSpy, followed by the table name, and then theEntityTransfersuffix. For example,SpyBlogEntityTransferwould map to SpyBlog Propel entity. Abstract Repository Class There are a few helper methods in\Spryker\Zed\Kernel\Persistence\AbstractRepository,public function buildQueryFromCriteria(ModelCriteria $modelCriteria, CriteriaTransfer $criteriaTransfer = null); ModelCriteriais a pre-built concrete propel query. TheCriteriaTransferis the basic query filtering, limit, offset, ordering. It will use custom formatter\Spryker\Zed\Kernel\Persistence\Repository\TransferObjectFormatterto transform database data to EntityTransfers. It will be then returned by repository itself, which saves you from manual mapping of data to transfer when data represented in transfers and entities is exactly the same.public function populateCollectionWithRelation(array &amp;$collection, &amp;relation, Criteria &amp;criteria = null)will populate&amp;collectionwith related data. For example, you need to return a list of blog posts with all the comments. Then you can make the main query like this: $collection = $this-&gt;buildQueryFromCriteria($blogQuery, $blogCriteriaFilterTransfer-&gt;getCriteria()) -&gt;find(); Then add another call: $comments = $this-&gt;populateCollectionWithRelation($collection, 'SpyBlogComment'); The last statement will update blog collection with related comments. This will produce two queries: one for blog posts and another for comments. If, for example, you need to populate each comment with the related customer data, run: $this-&gt;populateCollectionWithRelation($comments, 'SpyBlogCustomer'); This will populate comments with customer data, and the whole blog collection will have three level of relations: - SpyBlog[] - SpyBlogComment[] - SpyBlogCustomer[] This is a recommended approach to populate lists when limited usage is required, because Propel does not allow to limit usage when join "with*" is used. Manual Mapping When you have custom transfers which cannot be automatically mapped to entities, you have to create customer mapper classes. For example create\Spryker\Zed\Blog\Persistence\Propel\Mapper\BlogMapperwhich will know how to map from transfer to propel entity - create it in Factory. namespace Spryker\Zed\Blog\Persistence; use Spryker\Zed\Kernel\Persistence\AbstractPersistenceFactory; class BlogPersistenceFactory extends AbstractPersistenceFactory { /** * @return \Spryker\Zed\Blog\Persistence\Propel\Mapper\BlogMapper */ public function createBlogMapper() { return new BlogMapper(); } } Conventions Querying When returning filtered collections by certain field usefind{Entity}CollectionBy{field}($field, CriteriaTransfer $criteriaTransfer). For examplefindBlogCollectionByFirstName($firstName, CriteriaTransfer $criteriaTransfer = null) When returning single item:find{Entity}By{field}. For example:public function findBlogByName($firstName) When counting recordspublic function count{Entity}By{Name}({name}). For example:public function countBlogByName($firstName) Those three queries share the same queries. For better reusability it's recommended to extract this logic to a protected method. For example: /** * @param string $name * * @return \Orm\Zed\Blog\Persistence\SpyBlogQuery */ protected function queryBlogByName($name) { return $this-&gt;getFactory() -&gt;createBlogQuery() -&gt;filterByName($name); } Repository Availability The repository is available in all ZED layers where Spryker classes are resolvable. Get it in factories, controllers, facades or plugins using getRepository method. If you want to use some of the methods from Repository, you have to create a Facade method in a corresponding module which would delegate to Repository. See also: Database Overview Defining Database Schema Learn about Entities and their usage Saving Entities with transactions Learn about Entity Manager and how to use it Implementing and using a query container Creating query objects Last review date: Mar. 21st, 2018</body>
</html>