<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>AbstractFacade Every facade extendsSpryker\Zed\Kernel\Business\AbstractFacadewhich provides an important method: Method Purpose $this-&gt;getFactory() Returns the factory which is needed to access the underlying models. Methods Inside a facade, the methods tell a story about the(Undefined variable: General.bundle/module). They expose the(Undefined variable: General.bundle/module)'s functions and delegate calls to internal models. A typical method looks like this: &lt;?php
class GlossaryFacade extends AbstractFacade
{ /** * @param string $keyName * @return bool */ public function deleteKey($keyName) { $keyManager = $this-&gt;getFactory()-&gt;createKeyManager(); return $keyManager-&gt;deleteKey($keyName); }} When you look at thedeleteKey()method, please observe the following: The name of the method expresses exactly what happens. It uses the terms of the related terminology, but it is easy to grasp what happens (“A key will be deleted”). The method does not contain any control logic, like if or foreach statements; it just delegates to the business model and calls the right method. The business model KeyManager is created using the factory so it does not need to know how the class is created. Parameters and return values The main idea of the facade is to hide the implementation details. Typical return values of facade methods are: native types (bool, int, float, string, array) transfer objects To hide and protect the underlying models and data structure, we never return business models or any propel entities/queries. Transfer Objects Each(Undefined variable: General.bundle/module)ships with its own interface for each transfer object that is used. Transfer objects are much more descriptive compared to arrays. &lt;?php
class GlossaryFacade extends AbstractFacade
{ /** * @param CmsGlossaryTransfer $transferTranslation * @return CmsGlossaryTransfer */ public function saveTranslation(CmsGlossaryTransfer $translationTransfer) { $translationManager = $this-&gt;getFactory()-&gt;createTranslationManager(); return $translationManager-&gt;saveTranslation($translationTransfer); }
} Encapsulation The idea of the business layer is to present a facade to all clients and to hide the internal details. This is the main requirement for future updates and it keeps the bundles decoupled. So when you look at a(Undefined variable: General.bundle/module)from another(Undefined variable: General.bundle/module)you will only see the facade.</body>
</html>