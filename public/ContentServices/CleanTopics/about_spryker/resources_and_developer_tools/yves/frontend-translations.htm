<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Textual translations are handled by the Glossary-(Undefined variable: General.bundle/module). You can use theGlossaryFacadein Zed to add entries to Glossary (or you can use the Zed UI). &lt;?php
class GlossaryFacade extends AbstractFacade
{ public function createTranslation($keyName, LocaleTransfer $locale, $value, $isActive = true){ ... } // there are several other methods in this facade
} An entry in the glossary has a key and translations per locale, like this: &lt;?php
['say.hello' =&gt; [ 'de_DE =&gt; 'Hallo', 'en_US' =&gt; 'Hello']
] Before it can be used in Yves, this data must be exported to the KV-storage. You can use the Redis Desktop Manager to have a look inside and see the values. Source: https://www.gliffy.com/go/html5/9959279 Usage in Twig templates The translation function is provided by Symfony translation component . Simple translation You can use the key in a Twig template in Yves: {{ 'say.hello' | trans }} Sometimes you need to list all keys which are used in a template. Currently there is no good solution, but this regex will do the job pretty good: {{.?"(.*)".?\|.?trans.?}} Translation with placeholders When you have a dynamic part in the translation, you can use placeholders. Entry in glossary: Key Value “my.name” “My name is %name%” Now replace it with a value in the Twig template: {{ "auth.my.name" | trans({'%name%' : 'Fabian'}, "app") }} This will show “My name is Fabian” Translation with ajax requests To use an AJAX request, you need to send translated content directly from the controller. In Yves you can locate the translator and use it directly: &lt;?php public function ajaxAction()
{ $app = $this-&gt;getLocator()-&gt;application()-&gt;pluginPimple()-&gt;getApplication(); $text = $app-&gt;trans('what.ever'); return $this-&gt;jsonResponse['text' =&gt; $text];
}</body>
</html>