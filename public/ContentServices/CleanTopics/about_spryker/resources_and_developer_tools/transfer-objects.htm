<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Transfer objects are simple data containers. Their purpose is to retrieve a standardized way to access data and to get more expressive method signatures. They are available everywhere in the system. How to use transfer objects Simple usage The example shows a typical use case for a transfer object. The customer object is created and the setter are used to set email, first and last name. &lt;?php
$customerTransfer = new CustomerTransfer();
$customerTransfer -&gt;setEmail('john.doe@spryker.com') -&gt;setFirstName('John') -&gt;setLastName('Doe'); echo $customerTransfer-&gt;getFirstName(); // echos 'John' Object Nesting Transfer objects can be nested. For instance a cart object contains several items like this: &lt;?php
// first cart item
$cartItem1 = new ItemTransfer();
$cartItem1-&gt;setSku('123abc')-&gt;setQuantity(1); // second cart item
$cartItem2 = new ItemTransfer();
$cartItem2-&gt;setSku('888abc')-&gt;setQuantity(1); // a cart with two items
$cartTransfer = new CartTransfer();
$cartTransfer-&gt;addItem($cartItem1)-&gt;addItem($cartItem2); // returns ItemTransfer[] as ArrayObject
$items = $cartTransfer-&gt;getItems(); Check required fields In general a transfer object must not know which fields are required, because it can be used for different use cases. But when you use a transfer object, you always expect the existence of specific parameters. This can be checked with a special require-method for each property: &lt;?php
// This throws a RequiredTransferPropertyException if the first name is not set:
$customerTransfer-&gt;requireFirstName()-&gt;getFirstName(); Property constants The transfer object exposes all properties as constants which can be used in forms and tables. &lt;?php
ItemTransfer::SKU; // = 'sku'
CustomerTransfer::FIRST_NAME; // = 'firstName' How to create transfer objects Transfer objects are defined and XML. The concrete classes are generated by a internal script. XML definition Transfer objects are defined in XML. The following example describes a Customer with email, first name, last name and a“isGuest”flag: &lt;?xml version="1.0"?&gt;
&lt;transfers xmlns="spryker:transfer-01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"&gt; &lt;transfer name="Customer"&gt; &lt;property name="email" type="string"/&gt; &lt;property name="firstName" type="string"/&gt; &lt;property name="lastName" type="string"/&gt; &lt;property name="isGuest" type="bool"/&gt; &lt;/transfer&gt; &lt;/transfers&gt; Available types You can use any name. The names start with a small letter and use camelCase format. You can use PHP native types:int,string,boolandarray. In case you want to create a nested transfer object just use the name of the transfer object as the type. You can also define collections of objects with the[]symbols. &lt;transfer name="MyTransfer"&gt; &lt;property name="foo" type="int" /&gt; &lt;property name="bar" type="string" /&gt; &lt;property name="baz" type="bool" /&gt; &lt;property name="bat" type="array" /&gt; &lt;property name="item" type="Foo" /&gt; &lt;!-- Foo is the name of another transfer object--&gt; &lt;property name="items" type="Foo[]" /&gt;
&lt;/transfer&gt; File location Most of the(Undefined variable: General.bundles/modules)define transfer objects in a dedicated XML file:(BundleNamespace)/Shared/((Undefined variable: General.Bundle/Module))/Transfer/((Undefined variable: General.bundle/module)).transfer.xml Therefore you can find the XML definition for the CustomerGroup(Undefined variable: General.bundle/module)invendor/spryker/spryker/Bundles/CustomerGroup/src/Spryker/Shared/CustomerGroup/Transfer/customer_group.transfer.xml Adding additional file locations If you have third-party(Undefined variable: General.bundle/module)s using our transfer objects, you can easily add additional source directories in your projects. To do so you can extendSpryker\Zed\Transfer\TransferConfig and return all additional glob-patterns fromgetAdditionalSourceDirectoryGlobPatterns(). Let’s say you have a custom extension package calledmy-vendor/my-packagethat uses transfer objects. Using Composer, by default this package will install undervendor/my-vendor/my-package. If you want your transfer objects to be created from definitions stored undervendor/my-vendor/my-package/src/Transfer, provide the necessary glob-pattern like so: &lt;?php namespace Pyz\Zed\Transfer; use Spryker\Shared\Application\ApplicationConstants;
use Spryker\Shared\Config\Config;
use Spryker\Zed\Transfer\TransferConfig as SprykerTransferConfig; class TransferConfig extends SprykerTransferConfig
{ /** * @return string[] */ protected function getAdditionalSourceDirectoryGlobPatterns() { return [ APPLICARION_ROOT_DIR . '/vendor/my-vendor/my-package/src/Transfer/', ]; } } Naming Please make sure your transfer object definition files end with.transfer.xml(even for your custom packages). Glob patterns the Transfer(Undefined variable: General.bundle/module)usesPHP's glob()function to resolve paths. For more information see: PHP documentation . Transfer object generation To generate the objects there is a console command: vendor/bin/console transfer:generate This call will retrieve all*.transfer.xmlfiles from project- and core-level, merge them and generate PHP classes:src/Generated/Shared/Transfer/(Name)Transfer.php Transfer file expansion Transfer objects can be expanded from different bundles. Any other(Undefined variable: General.bundle/module)can add properties to existing transfer objects. For instance the Tax(Undefined variable: General.bundle/module)may expect a “customer tax-id”. So in thetax.transfer.xmlyou can add the required properties to the customer. Please obey that it is not possible to remove existing properties or to change their type. &lt;?xml version="1.0"?&gt;
&lt;transfers xmlns="spryker:transfer-01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"&gt; &lt;transfer name="Customer"&gt; &lt;property name="taxId" type="int"/&gt; &lt;/transfer&gt; &lt;/transfers&gt; After generation you can set and get the customer’staxIdlike this: &lt;?php
use \Generated\Shared\Transfer\CustomerTransfer; $customerTransfer = new CustomerTransfer();
$customerTransfer-&gt;setTaxId(54321);
$taxId = $customerTransfer-&gt;getTaxId();</body>
</html>