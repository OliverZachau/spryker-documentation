<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>TheContainerGlobalsis a way to inject dependencies which are available inside your Factories . Every dependency added to theContainerGlobalsis available by usinggetProvidedDependency()in your factory. To add something globally you need to create a service provider and add it to the bootstrap of your application. &lt;?php namespace ProjectName\Application\Bundle\ServiceProvider; use Silex\Application;
use Silex\ServiceProviderInterface;
use Spryker\Shared\Kernel\ContainerGlobals; class YourServiceProvider implements ServiceProviderInterface
{ /** * @param \Silex\Application $app * * @return void */ public function register(Application $app) { $containerGlobals = new ContainerGlobals(); $containerGlobals[KEY_FOR_GLOBAL_DEPENDENCY] = $containerGlobals-&gt;share(function () use () { return new ProjectName\Global\Dependency(); }); } ...
} To access this global dependency, call$this-&gt;getProvidedDependency(KEY_FOR_GLOBAL_DEPENDENCY)inside your factory.FormFactoryServiceProvidergives you a full example on how to add aFormFactorythat’s available to all of your factories With this approach you can define such dependencies once, instead of defining them each time for each(Undefined variable: General.bundle/module)that uses them.</body>
</html>