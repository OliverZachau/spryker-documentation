<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>This guide will help you to set up a containerized installation of the Spryker demo shop in Windows This solution can be used for demo and development purposes only. It is not supported in production environment. Installing the Demo Shop To install Spryker demo shop on a Windows machine: Install Docker for Windows. Download Docker installation package. Run the installer and follow the instructions. To complete installation, sign out of Windows, and then sign in again. Start Docker. To do this, clickStart, typedocker, and selectDocker for Windows. View Screenshot The system will ask you to restart your computer in order to enable Hyper-V Virtualization. ClickOK. View Screenshot Docker relies on hardware virtualization. If it is disabled, you will get an error message after restart. To fix it, enable virtualization in BIOS. View error message For instructions on how to enable it, refer to your PC manual. Depending on the motherboard manufacturer, the feature can be calledIntel Virtualization Technologies,VT-x,VT-d,VT-c,AMD-Vetc. Now, you need to configure Docker. Right-click the Docker icon in the System Tray and selectSettings. SelectAdvancedand specify the following settings:&#160;2 CPUs and at least 4096 MB of memory. ClickApply. SelectDaemonand disable theExperimental featuresoption. ClickApply. At this point you need to import the demo shop and launch it. Open Windows Command Prompt. To do this, pressWin+R, typecmdand pressEnter. Create a working folder in your home directory. For this purpose, execute the following commands in the Command Prompt: C:\Users\john.doe&gt;mkdir demoshop
C:\Users\john.doe&gt;cd demoshop Download the docker-compose.yml file and save it to the directory you created on the previous step. Configure and start the demo shop as follows: docker volume create app-sync
docker volume create jenkins-sync
docker-compose up -d To be able to view the demo shop in your web browser, you also need to add the following entries to your hosts file: 127.0.0.1 www.de.demoshop.local
127.0.0.1 os.de.demoshop.local How ClickStart. TypeNotepad. In the search results, right-clickNotepadand selectRun as administrator. Open the following file:C:\Windows\System32\drivers\etc\hosts. Add the entries to the very end of the file. Save the changes. Now, the demo shop is installed and ready to use. To access it, use the following links: http://www.de.demoshop.local/ - shop frontend; http://os.de.demoshop.local:8081/ - administrator interface. If you get a file with textwaiting for deploy pagewhen accessing one of the links above, that means that the demo shop installation is not complete yet. Try again a few minutes later. Updating, Starting and Stopping the Demo Shop To start, stop or update the demo shop, you need to use Windows Command Prompt: Open Windows Command Prompt. To do this, pressWin+R, typecmdand pressEnter. Go to the folder where you installed the Demoshop by executing the following command: cd "%USERPROFILE%\demoshop" Once in the demo shop installation folder, use the following commands: To start the demo shop: docker-compose up To stop the demo shop: docker-compose down To update the demo shop to the latest version: docker-compose down
docker volume rm app-sync
docker volume create app-sync
docker-compose up -d Developing with Docker (docker-sync) To develop with Docker, do the following: Enable Windows subsytem for Linux (WSL): ClickStart, typeTurn Windowsand click theTurn Windows features on and offitem. View screenshot Enable theWindows Subsystem for Linuxoption. Make sure the Developer Mode is enabled: ClickStart, typeFor devand click theFor developers settingsitem. View screenshot Check whether theDeveloper modeoption is selected. Install Bash for Windows. To do this, open the Command Prompt and typelxrun /install. If bash for windows was already installed on your system before the Creators Update, you may need to re-install it to get the latest distro. Launch and update Ubuntu: Bash on Ubuntu on Windowsis now an app on your system. Launch it. Update the OS using the following commands: sudo apt-get update
sudo apt-get upgrade Install Docker in WSL bash. Note that Docker Server is not supported in the WSL environment. Instead, you will need to expose Docker for Windows to WSL on later steps. Install Docker Compose: sudo apt install docker-compose If that method does not work for you, follow these instructions . Install Ruby and Ruby-dev: sudo apt-get install ruby ruby-dev Install Docker-Sync: sudo gem install docker-sync Set your docker host as an ENV variable. To do this, addexport DOCKER_HOST=tcp://127.0.0.1:2375to your~/.bashrcfile of WLS. Now, you need to expose Windows Docker to WSL. Right-click the Docker icon in the System Tray and selectSettings. SelectGeneraland enable optionExpose daemon on tcp://localhost:2375 without TLS. ClickApply. Install Unison. To do this, run the following commands: sudo apt-get install ocaml make emacs
wget https://github.com/bcpierce00/unison/archive/v2.51.2.tar.gz
tar xvf v2.51.2.tar.gz
cd unison-2.51.2
make UISTYLE=text
sudo cp src/unison /usr/local/bin/unison
sudo cp src/unison-fsmonitor /usr/local/bin/unison-fsmonitor Put the docker-sync.yml file in the yourdemoshopfolder (the same folder where thedocker-compose.ymlfile is located). You now have a docker-sync solution via the unison strategy. To start developing using the solution, run the Docker containers using the docker-sync or docker-sync-stack commands. For example, you can use the following to start development: cd /mnt/c/Users/$USER/demoshop
docker-compose up -d
docker-sync start By default, docker-sync synchronizes the demo shop installation inside Docker containerdemoshop_app_1with folderproject. It is located in the same directory where thedocker-compose.ymlanddocker-sync.ymlfiles are located, for exampleC:\Users\john.doe\demoshop\project. If you want to synchronize another folder with the container, specify it in thesyncs\app-sync\srcelement of filedocker-sync.yml. The folder path must be specified in the Linux format relative to the WSL file system, for example: version: "2"
...
syncs: app-sync: ... src: '/mnt/c/projects/myproject' Your Windows drives are already mounted in WSL under/mnt. For instance, yourC:drive is available in the/mnt/c/)folder of WSL. If you make any changes in thedocker-sync.ymlfile, restart the synchronization by first runningdocker-sync clean, and thendocker-sync start. Last review date: Apr. 5th, 2018</body>
</html>