<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>HowTo - Extend a Core(Undefined variable: General.Bundle/Module)That is Used by Another This topic describes how to extend a core(Undefined variable: General.bundle/module)that is used by another core(Undefined variable: General.bundle/module). Extra consideration must be taken when extending core(Undefined variable: General.bundles/modules)that are already in use by another(Undefined variable: General.bundle/module). In the following example we will extend theCart-&gt;Calculation(Undefined variable: General.bundles/modules). Step 1:&#160;Modify the Interface Add afoo()method toCalculationFacadein the project level and call it from the cart-(Undefined variable: General.bundle/module). TheCalculationFacadeneeds to implement theCartToCalculationInterfacebecause this interface is used in the Cart-(Undefined variable: General.bundle/module). You can also add your own interface as follows: &lt;?php
namespace Pyz\Zed\Calculation\Business; use Pyz\Zed\Cart\Dependency\Facade\CartToCalculationInterface;
use Spryker\Zed\Calculation\Business\CalculationFacade as SprykerCalculationFacade; class CalculationFacade extends SprykerCalculationFacade implements CartToCalculationInterface
{ public function foo() { die('&lt;pre&gt;&lt;b&gt;'.print_r('!!', true).'&lt;/b&gt;'.PHP_EOL.__CLASS__.' '.__LINE__); } } Step 2: Add the New Method To the Interface The interface needs to extend the one from core. &lt;?php
namespace Pyz\Zed\Cart\Dependency\Facade; use Spryker\Zed\Cart\Dependency\Facade\CartToCalculationInterface as SprykerCartToCalculationInterface; interface CartToCalculationInterface extends SprykerCartToCalculationInterface
{ public function foo();
} Step 3: Remove the Bridge In the Cart(Undefined variable: General.bundle/module)'s dependency provider, remove the bridge to directly use the facade. class CartDependencyProvider extends SprykerCartDependencyProvider
{ public function provideBusinessLayerDependencies(Container $container) { self::provideBusinessLayerDependencies($container); $container[self::FACADE_CALCULATION] = function (Container $container) { return $container-&gt;getLocator()-&gt;calculation()-&gt;facade(); }; } Bridges are for core-level only. If you use them at the project-level, you are doing it wrong! The described case is only practical when you are “between” two core-bundles and you want to make it right. For you own modules, use the general(Undefined variable: General.bundle/module)-interface (e.g.My(Undefined variable: General.Bundle/Module)Interface).</body>
</html>