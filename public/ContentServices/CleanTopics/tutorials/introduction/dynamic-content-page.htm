<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Challenge Description Create a CMS page that displays some (marketing) text and a list of personalized products as offers. Challenge Solving Highlights Static page For creating a CMS page, follow these steps: Create a CMS template calledpersonalized_products.twigundersrc/Pyz/Shared/Cms/Theme/default/template/. The template must contain at least one placeholder that will represent the marketing text. Go to Zed UI and open the CMS Pages backend. Add a CMS page that uses the/my-offersURL and thepersonalized_productstemplate that we’ve just created. Then add the text you would like to show on the static page. Activate the page. Run the storage collectors to export the static page by runningvendor/bin/console collector:storage:exportfrom your command line. You can have a look into Redis from the Storage backend page. You can see the page here . Personalized Offers To display some personalized product offers, follow the steps below: Create a new Yves(Undefined variable: General.bundle/module)calledSpecialOffers. CreatePyz\Yves\SpecialOffers\Plugin\Provider\SpecialOffersControllerProviderthat defines a new route to get the list of offers. The route should accept an integer parameter for thelimitof how many offers we’d like to display. In order to make theSpecialOffersControllerProviderwork, it needs to be registered underPyz\Yves\Application\YvesBootstrap::registerControllerProviders(). Create a controller and a template for the defined route. At this point you should be able to display template you’ve created through the URL of your new route. To get products, we’ll need to query Elasticsearch. For querying we can use theSpryker\Client\Search\SearchClient::search()method from theSearchClient. We’ll createPyz\Client\SpecialOffers\SpecialOffersClientclass withgetPersonalizedProducts()method that will call thesearch()of the search client. (Read here about how to implement a client.) Thesearch()method requires us to implementSpryker\Client\Search\Dependency\Plugin\QueryInterfacethat returns anElastica\Queryobject. This is the pure representation of our Elasticsearch query.Belowyou’ll find a code snippet for the full implementation of a query that returns random products based on the session ID, e.g. listed products will be different for every user. (In real life this of course shouldn’t be a random list of products, but should contain some filters based on collected user information instead. For detailed info about the query, check Random scoring documentation page from Elasticsearch.) The second parameter of thesearch()method is a stack of result formatter plugins. For our case it’s enough to provide only an instance ofSpryker\Client\Catalog\Plugin\Elasticsearch\ResultFormatter\RawCatalogSearchResultFormatterPluginthat will return only necessary product data from Elasticsearch. Returning back to our controller, now we can execute the search request and provide the result as it is for our template. In the template we should be able to access and iterate through theproductsvariable (provided by theRawCatalogSearchResultFormatterPlugin) and display the products. Check template snippet below, that uses the catalog template to render products. Checking the URL (defined under step 2.) should now show a list of personalized product offers. Putting Everything Together Now that we have a CMS page and can have a list of personalized product offers, we can finish our task by the following steps: Open ourpersonalized_products.twigtemplate and place a{{ render() }}method call where you’d like to display the personalized product offer list. Therender()twig method is provided by Silex (check documentation here ). All we need to provide as parameter is a path to our personalized products route and the limit of the list (i.e.{{ render(path('personalized-products', {'limit': 12})) }}). This will create an internal sub-request to any of the paths that can be matched by the application router. As the final result you should be able to see the CMS page with the marketing text you defined on the backend, and a limited list of personalized product offers. Snippet for Implementing Elasticsearch Query with Personalized (Random) Results src/Pyz/Client/SpecialOffers/Plugin/Elasticsearch/Query/PersonalizedProductsQueryPlugin.php Code Sample &lt;?php namespace Pyz\Client\SpecialOffers\Plugin\Elasticsearch\Query; use Elastica\Query;
use Elastica\Query\BoolQuery;
use Elastica\Query\FunctionScore;
use Elastica\Query\Match;
use Elastica\Query\MatchAll;
use Generated\Shared\Search\PageIndexMap;
use Pyz\Shared\ProductSearch\ProductSearchConfig;
use Spryker\Client\Search\Dependency\Plugin\QueryInterface; class PersonalizedProductsQueryPlugin implements QueryInterface
{ /** * @var int */ protected $limit; /** * @param int $limit */ public function __construct($limit) { $this-&gt;limit = $limit; } /** * @return \Elastica\Query */ public function getSearchQuery() { $boolQuery = (new BoolQuery()) -&gt;addMust((new FunctionScore()) -&gt;setQuery(new MatchAll()) -&gt;addFunction('random_score', ['seed' =&gt; session_id()]) -&gt;setScoreMode('sum')) -&gt;addMust((new Match()) -&gt;setField(PageIndexMap::TYPE, ProductSearchConfig::PRODUCT_ABSTRACT_PAGE_SEARCH_TYPE)); $query = (new Query()) -&gt;setSource([PageIndexMap::SEARCH_RESULT_DATA]) -&gt;setQuery($boolQuery) -&gt;setSize($this-&gt;limit); return $query; } } Snippet for Product Offers Template src/Pyz/Yves/SpecialOffers/Theme/default/personalized-products/index.twig &lt;div class="row"&gt; {% if products is defined %} {% for product in products %} &lt;div class="small-12 medium-6 large-4 xlarge-3 columns"&gt; {% include "@catalog/catalog/partials/product.twig" with { detailsUrl: product.url, name: product.abstract_name, priceValue: product.price, imageUrl: (product.images|length ? product.images.0.external_url_small : '') } %} &lt;/div&gt; {% endfor %} {% endif %}
&lt;/div&gt; References Documentation Description CMS Manual Tutorial on using CMS in Spryker URL Routing in Yves URL Routing in Yves Search Detailed manual about Search with Spryker Cronjob Scheduling Setup cronjobs in Jenkins</body>
</html>