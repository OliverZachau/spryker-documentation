<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Challenge Description Build aHelloWorld(Undefined variable: General.bundle/module)in Yves that will render theHello world!string on the page. Manually building theHelloWorld (Undefined variable: General.bundle/module)in Yves 1. Create a(Undefined variable: General.bundle/module)folder in Yves undersrc/Pyz/Yves/. This will be the location for all the(Undefined variable: General.bundle/module)files. 2. Create anIndexController(as extension ofAbstractController) including anindexAction()action undersrc/Pyz/Yves/HelloWorld/Controller/. This controller action will be called when URL is requested. 3. Create a Twig template in the presentation layersrc/Pyz/Yves/HelloWorld/Theme/default/index/index.twig. The template is needed to show information in the browser. 4. Create a controller provider for our(Undefined variable: General.bundle/module)and register URL/hello-worldin it. URL Routing gives additional details on doing this. 5. Add the controller provider intoYvesBootstrap::getControllerProviderStack(). This ensures that the defined controller is correctly routed by Silex. 6. Open the newly created page http://www.de.demoshop.local/hello-world . Using Code Generator To save even more time, you can use code generator from development tools shipped with Spryker Code Generator 1. To generate an Yves skeleton of the(Undefined variable: General.bundle/module)just execute: console code:generate:module:yves HelloWorld 2. Check the generatedHelloWorldControllerProvider, the Yves route should look like this: &lt;?php
$this-&gt;createController('/hello-world', 'hello-world', 'HelloWorld', 'Index', 'index'); This registers our controller action under/hello-worldURL. 3. Change body ofIndexController::indexActionmethod in our(Undefined variable: General.bundle/module)to return some value to our template: &lt;?php
return [ 'helloWorld' =&gt; 'Hello World!'
]; 4. Now open the generatedindex.twigtemplate of our(Undefined variable: General.bundle/module). Let’s extend the template from the base application layout and render variablehelloWorldwe are returning in the controller: {% extends "@application/layout/layout.twig" %} {% block title %} &lt;h3&gt;{{ helloWorld }}&lt;/h3&gt;
{% endblock %} 5. Add the controller provider intoYvesBootstrap::getControllerProviderStack(). This ensures that the defined controller is correctly routed by Silex. 6. Now we can test the results. Open/hello-worldURL in your browser, you should see “Hello World!” in the page’s header section. 7. Optionally, runvendor/bin/console dev:ide:generate-auto-completionto also get IDE type hinting for the new(Undefined variable: General.bundle/module). References Documentation Description Development Guide Development Guide to start developing with Spryker URL Routing URL Routing in Yves Twig Templating Twig Templating We value people who contribute to improvement of our documentation: Thank you to: Petar Atanasov for taking the time to provide us with your feedback (December 2017). You too can be credited in our documentation by stating that you wish to be mentioned when you send us feedback. Click "Edit on Github" (top right) to send feedback for this page.</body>
</html>