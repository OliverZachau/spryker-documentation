<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Challenge Description Integrate an additional step into the checkout process; a Voucher step where a customer enters a voucher code and gets a discount. Add the Voucher step after the Payment one. To explore further before starting, you can read about the Checkout and the StepEngine modules. Bonus challenge: Add a new shipment plugin to make a shipment method unavailable if the amount of the order is less than 50.00€. Add a new shipment plugin to set shipping cost to 1.00€ if the amount of the order is more than 50.00€. Add a new shipment plugin to set the estimated delivery time to 1 day if the amount of the order is more than 50.00€. Challenge Solving Highlights To add the additional step into the checkout process, follow the steps described below: 1. Add the Voucher Step Let’s get the step running first, then add the execution and the calculation of the discount. Before adding the step, you need to define the route for the step. Go to theCheckoutControllerProviderundersrc/Pyz/Yves/Checkout/Plugin/Providerand add the route for the step. Next, go tosrc/Pyz/Yves/Checkout/Process/Stepsand create the step class. Call itVoucherStep. Don’t forget to extend theAbstractBaseStepto inherit all the necessary functionality. Add the new step toStepFactoryundersrc/Pyz/Yves/Checkout/Process. Create a controller action insrc/Pyz/Yves/Checkout/Controller/CheckoutControllerand call itvoucherAction. You can return any string for now, just to make sure that the step works correctly. We will get back to this action once we build the form in the next step. The step is now created; go to Demoshop, add any product to the cart and go to checkout. The Voucher step should be working now. 2. Add the Voucher Form Spryker uses Symfony forms as a foundation to build and handle forms. One of the main concepts in Symfony forms is binding form fields with data objects. This helps in setting and getting different data fields directly from/to the form. Spryker uses transfer objects as DTOs, you can directly bind them to your forms. Let’s build the form and get the customers input for the voucher. Create the form type insrc/Pyz/Yves/Checkout/Form/Steps/. Call itVoucherForm. Add an input field to the form for the voucher code. Add the voucher form to theFormFactoryundersrc/Pyz/Yves/Checkout/Form/. You can follow the other steps as an example to do so. Create the form twig template undersrc/Pyz/Yves/Checkout/Theme/default/checkout/. Call itvoucher. Add the form in the template and add a submit button into it. The form is done, let’s bind it now to the transfer object. Go tosrc/Pyz/Sharedand create the directoriesCheckout/Transferso that path looks like thissrc/Pyz/Shared/Checkout/Transfer. Create the transfer object schema and call itQuote. The Quote transfer is the main transfer object which is used in the checkout. Now, add the voucher field withtype="string"inside the transfer schema. From the command line runvendor/bin/console transfer:generateto generate the new transfer object. To finish the binding, add the propertyproperty_pathto the voucher field inside the voucher form. Back to the controller, modify the voucher action in order to return the form instead of the string. The step has a form now and receives the voucher code value from the customer. Go to Demoshop and try it out. 3. Add the Step Execution Finally, let’s apply the voucher discount. Implement theexecute()method in theVoucherStepin order to calculate the new grand total after applying the discount. Generate some voucher codes from Zed UI. Go to the Discount back-end page, create a new discount and generate some voucher codes. To apply the voucher discount you added, deactivate all the exclusive discounts. To read more about how the Discount(Undefined variable: General.bundle/module)works, visit this page . The challenge is done and ready for testing! Go to the Demoshop, add any product to cart, go the checkout and enter any of the available voucher codes. You should receive a discount on your order. Bonus Challenge For adding a new shipment availability plugin: Add a new availability plugin inside thePyz/Zed/Shipment/Communication/Plugin/folder, that implementsShipmentMethodAvailabilityPluginInterface. Make the plugin is available through theShipmentDependencyProvider. Enable the availability plugin for one of the shipment methods. For adding a new shipment price plugin: Add a new price plugin inside thePyz/Zed/Shipment/Communication/Plugin/folder, that implementsShipmentMethodPricePluginInterface. Make the plugin available through theShipmentDependencyProvider. Enable the price plugin for one of the shipment methods. For adding a new shipment delivery time plugin: Add a new delivery time plugin inside thePyz/Zed/Shipment/Communication/Plugin/folder, that implementsShipmentMethodDeliveryTimePluginInterface. Make the plugin is available through theShipmentDependencyProvider. Enable the delivery time plugin for one of the shipment methods. References Documentation Description Checkout Checkout(Undefined variable: General.bundle/module)Documentation StepEngine StepEngine(Undefined variable: General.bundle/module)Documentation Symfony Forms Symfony Forms Documentation Yves URL Routing Tutorial on setting up URL routing in Yves Shipment Tutorial on setting up Shipment Plugins</body>
</html>