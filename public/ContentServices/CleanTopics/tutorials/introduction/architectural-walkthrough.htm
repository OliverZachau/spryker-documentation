<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>This is an architecture walkthrough as a coding exercise. Challenge Description Build aHelloSpryker (Undefined variable: General.bundle/module)in Zed that will render theHello Spryker!string, in reverse order, on the screen. The string must be retrieved from the config. Build aHelloSpryker (Undefined variable: General.bundle/module)in Yves that will render theHello Spryker!string, in reverse order, on the screen. Yves must communicate with Zed in order to retrieve the string. Add Zed persistence layer inHelloSpryker (Undefined variable: General.bundle/module). Move the functionality that returns a string in reverse order to a new(Undefined variable: General.bundle/module)(StringFormat). Use this functionality from theHelloSpryker (Undefined variable: General.bundle/module). Challenge Solving Highlights 1. Building the HelloSpryker(Undefined variable: General.Bundle/Module)in Zed Add the(Undefined variable: General.bundle/module)folder in Zed. Add the config class with a methodgetStringholding the default string'Hello Spryker!'. Add the logic for returning the string reversed under the business layer in/Modelsub-folder. Create a business factory under the business layer to create this class. Create aHelloSprykerFacadeunder the business layer and call the business class here. Create a controller with anindexAction()method that will use the facade. Create the Twig templateindex.twigunder the presentation layer inside aHelloSprykersubfolder. Display the string on the screen, navigate to the URL/hello-spryker/hello-sprykerfor this. Add the controller in your navigation on the left by providing anavigation.xmlfile in the Communication folder (see references at the bottom). Runvendor/bin/console application:build-navigation-cacheto generate the new navigation tree. Implementation Tips Make sure you facade only delegates and the factory itself creates the HelloSpryker business class including the necessary constructor arguments: &lt;?php
return new HelloSpryker($this-&gt;getConfig()); The facade method should then just call &lt;?php
return $this-&gt;getFactory()-&gt;createHelloSpryker()-&gt;getReversedString(); Make the Config class configurable in a way that you can provide any string viaconfig_default.php. You would use aHelloSprykerConstantsclass and inside thegetString()method you would use$this-&gt;get(HelloSprykerConstants::STRING, 'Hello Spryker!'). The second argument is the default string in case no config has yet been provided. Constants classes are put into thePyz\Shared\namespace. To test if you can use any string via config now, add this toconfig_default.php, for example: &lt;?php
$config[HelloSprykerConstants::STRING] = 'Foo Bar'; Yourindex.twigtemplate ideally extends from the Gui layout to have the complete layout included: {% extends '@Gui/Layout/layout.twig' %} {% block content %}
&lt;div class="row"&gt; &lt;div class="col-sm-12"&gt; {{ reversedString }} &lt;/div&gt;
&lt;/div&gt;
{% endblock %} 2. Building aHelloSpryker (Undefined variable: General.Bundle/Module)in Yves Add Yves layer: Add the(Undefined variable: General.bundle/module)folder in Yves. Add controller + action. Create the Twig template under the presentation layer (/HelloSpryker/Theme/default/hello-spryker/index.twig). Add route in the controller provider (for URL/hello-spryker). Register the controller provider in YvesBootstrap. Communicate with Zed: Create ahello_spryker.transfer.xmlfile inShared/HelloSpryker/Transferbuilding aHelloSprykerTransferobject which contains areversedStringproperty. Runvendor/bin/console transfer:generateto generate the class. Create client directory for Zed (/Pyz/Client/HelloSpryker/Zed). Add client and stub (see references at the bottom). Add aHelloSprykerDependencyProviderfor Client layer. Add a gateway call in client/stub with an empty transfer object Add aGatewayControllerwith agetReversedStringAction()method in Zed which calls the facade and returns the filled transfer object. Implementation Tips The Yves route you need to set up, can look like this: &lt;?php
$this-&gt;createController('/hello-spryker', 'hello-spryker', 'HelloSpryker', 'HelloSpryker', 'index'); TheHelloSprykerStubclass must have a constructor argument and property forzedStubwhich will be passed in from the Client layer factory. The gateway call could look like this: &lt;?php
$helloSprykerTransfer = new HelloSprykerTransfer(); return $this-&gt;zedStub-&gt;call( '/hello-spryker/gateway/get-reversed-string', $helloSprykerTransfer
); The dependency provider needs to provide the client to the factory: &lt;?php
$container['HelloSpryker client'] = function (Container $container) { return $container-&gt;getLocator()-&gt;helloSpryker()-&gt;client();
}; The GatewayController just populates the passed in transfer object and returns this again: &lt;?php
public function getReversedStringAction(HelloSprykerTransfer $helloSprykerTransfer)
{ $reversedString = $this-&gt;getFacade()-&gt;getReversedString(); $helloSprykerTransfer-&gt;setReversedString($reversedString); return $helloSprykerTransfer;
} The Twig template here should extend the main layout: {% extends "@application/layout/layout.twig" %} {% block title %} &lt;h3&gt;{{ helloSpryker.reversedString }}&lt;/h3&gt;
{% endblock %} 3. MakeHelloSpryker (Undefined variable: General.Bundle/Module)Read from Database In Zed add a persistence layer and a schema XML file with a very basic table holding the string. Runvendor/bin/console propel:installto generate the table and classes. Also pass the new QueryContainer into the HelloSpryker class as a second constructor dependency. You can populate the database from the config, e.g. in the constructor of the HelloSpryker class. Read inside the Zed business logic from the QueryContainer now instead of config. Implementation Tips The snippet to store our test string could look like this: &lt;?php
protected function initDatabaseFromConfig(HelloSprykerConfig $helloSprykerConfig)
{ $helloSprykerEntity = $this-&gt;helloSprykerQueryContainer-&gt;queryHelloSpryker()-&gt;findOne(); if (!$helloSprykerEntity) { $helloSprykerEntity = new PyzHelloSpryker(); $helloSprykerEntity-&gt;setString($helloSprykerConfig-&gt;getString()); } else { $helloSprykerEntity-&gt;setString($helloSprykerConfig-&gt;getString()); } $helloSprykerEntity-&gt;save();
} It will always update the database according to your config. The/Pyz/Zed/HelloSpryker/Persistence/Propel/Schema/pyz_hello_spryker.schema.xmlcould look like this: &lt;?xml version="1.0"?&gt;
&lt;database xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="zed" xsi:noNamespaceSchemaLocation="http://static.spryker.com/schema-01.xsd" namespace="Orm\Zed\HelloSpryker\Persistence" namespaceAutoPackage="false" package="src.Orm.Zed.HelloSpryker.Persistence"&gt; &lt;table name="pyz_hello_spryker" idMethod="native"&gt; &lt;column name="id_hello_spryker" required="true" type="INTEGER" autoIncrement="true" primaryKey="true"/&gt; &lt;column name="string" required="true" size="128" type="VARCHAR"/&gt; &lt;unique name="pyz_hello_spryker-string"&gt; &lt;unique-column name="string"/&gt; &lt;/unique&gt; &lt;id-method-parameter value="pyz_hello_spryker_pk_seq"/&gt; &lt;/table&gt; &lt;/database&gt; 4.StringFormat (Undefined variable: General.Bundle/Module) Create theStringFormat (Undefined variable: General.bundle/module)in Zed. In the HelloSpryker(Undefined variable: General.bundle/module), create a dependency provider class and call itHelloSprykerDependencyProvider. Extract the functionality that formats the string and move it to the new(Undefined variable: General.bundle/module). CreateStringFormatFacadeclass. Provide the business layer dependency to theHelloSpryker (Undefined variable: General.bundle/module)and internally use this other facade now. Implementation Tips The HelloSpryker class will now have a third constructor argument, the provided facade. You can use the transfer object to pass the string between(Undefined variable: General.bundle/module)s. Try to add interfaces for your classes so that the constructor typehints are abstract instead of concrete. More Tips Runvendor/bin/console dev:ide:generate-auto-completionto also get IDE typehinting for the new(Undefined variable: General.bundle/module)for both Yves and Zed. Add@methodannotations to your classes to get complete IDE type-hinting and clickability: Click to expand the code sample &lt;?php
/** * @method \Pyz\Zed\HelloSpryker\Business\HelloSprykerFacade getFacade() */
class HelloSprykerController extends AbstractController
{
} /** * @method \Pyz\Zed\HelloSpryker\Business\HelloSprykerBusinessFactory getFactory() */
class HelloSprykerFacade extends AbstractFacade
{
} /** * @method \Pyz\Zed\HelloSpryker\HelloSprykerConfig getConfig() * @method \Pyz\Zed\HelloSpryker\Persistence\HelloSprykerQueryContainer getQueryContainer() */
class HelloSprykerBusinessFactory extends AbstractBusinessFactory
{
} /** * @method \Pyz\Client\HelloSpryker\HelloSprykerFactory getFactory() */
class HelloSprykerClient extends AbstractClient
{
} This is useful for all OS internal “locatable” classes. Reference Documentation Description Developing with Spryker Commerce OS Development Guide to start developing with Spryker URL Routing URL Routing in Yves How to Add a New(Undefined variable: General.bundle/module) Tutorial on creating a new(Undefined variable: General.bundle/module)in Zed How to Add Navigation in Zed Adding navigation in Zed Communication Between Yves and Zed Transfer Data from Yves to Zed</body>
</html>