<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>To extend the Spryker-Core functionality and to use the Spryker Engine to develop a project, it’s important to understand the folder structure used in Spryker. The project consists of two parts : Spryker-Core and project implementation. They both follow the same structure and the project implementation goes on top of the Spryker-Core functionalities. The project implementation goes on top of the Spryker Core implementation. The picture below shows how a request is being handled : Project Structure Overview The code is divided in two parts: src/folder contains the code of the current project vendor/spryker/folder contains the Spryker OS Both project and Spryker-Core parts follow a very similar directory structure and it reflects the namespaces for the contained classes : E.g. : ifCustomerFacadeis extended on the project side, it will have the following locations and namespaces : in Spryker Core : location :/vendor/Spryker/Spryker/Bundles/Customer/src/SprykerFeature/Zed/Customer/Business namespace :SprykerFeature/Zed/Customer/Business on the Project layer : location :src/Pyz/Zed/Customer/Business namespace :Pyz/Zed/Customer/Business As it can be observed from the example above, the location of the file reflects the namespace its under. Folder organization Depending on where and how the code is intended to be used, it can be placed in one of the following folders : Client - the code placed in here handles communication between Yves and Zed Shared - the code placed in here is used both by Yves and Zed ( to avoid code duplication) Zed - the code in here is meant only for the backend application Yves - frontent code Each(Undefined variable: General.bundle/module)contains one folder for each layer of the application : Business Communication Persistence Presentation Extending Spryker Core Functionality To extend the functionality of a class from Spryker Core, a new class with the same name must be added in the corresponding location on the project side. The example below illustrates how CategoryFacade can be extended on the project side: Spryker Core: &lt;?php
namespace Spryker\Zed\Category\Business; use Spryker\Zed\Kernel\Business\AbstractFacade; class CategoryFacade extends AbstractFacade
{
} Project: &lt;?php
namespace Pyz\Zed\Category\Business; use Spryker\Zed\Category\Business\CategoryFacade as SprykerCategoryFacade; class CategoryFacade extends SprykerCategoryFacade
{
}</body>
</html>