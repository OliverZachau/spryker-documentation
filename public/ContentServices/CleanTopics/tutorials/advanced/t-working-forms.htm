<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>Spryker uses Symfony forms; this tutorial will help you get started on working with forms. You will build a simple newsletter subscription form that contains a field for entering the email address and a submit button. Follow the steps described below to create the newsletter subscription form: Create the FormType Render the Form Post the Data Create the FormType The best practice is to create aFormTypeclass for each form you need to handle; here you will define the fields contained in the form and the rules of validation. In our case, we need to define the email field that has two constraints attached: it’s a required field it must be a valid email address Click to expand the code sample &lt;?php
namespace Pyz\Yves\Newsletter\Form; use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Email;
use Symfony\Component\Validator\Constraints\NotBlank; class SubscriptionFormType extends AbstractType
{ /** * @param \Symfony\Component\Form\FormBuilderInterface $builder * @param array $options * * @return void */ public function buildForm(FormBuilderInterface $builder, array $options) { $builder-&gt;add('email', 'email', [ 'label' =&gt; 'Email', 'constraints' =&gt; [ new NotBlank(), new Email(), ], ]); } } To instantiate your form, use Symfony’s FormBuilder in your(Undefined variable: General.bundle/module)’s factory, as in the example bellow: &lt;?php
namespace Pyz\Yves\Newsletter; use Pyz\Yves\Newsletter\Form\SubscriptionFormType;
use Spryker\Yves\Kernel\AbstractFactory; class NewsletterFactory extends AbstractFactory
{ /** * @return \Symfony\Component\Form\FormInterface */ public function createSubscriptionForm() { $subscriptionFormType = new SubscriptionFormType(); return $this-&gt;getFormFactory()-&gt;create($subscriptionFormType); } } Render the Form To render your form in a template, pass the form to the template through the controller action: get an instance of your form(using the factory method implemented above) pass the form to the template Click to expand the code sample &lt;?php
namespace Pyz\Yves\Newsletter\Controller; use Spryker\Yves\Kernel\Controller\AbstractController; /** * @method \Pyz\Yves\Newslette\NewsletterFactory getFactory() */
class SubscriptionController extends AbstractController
{ /** * @return array */ public function indexAction() { $subscriptionForm = $this -&gt;getFactory() -&gt;createSubscriptionForm(); return $this-&gt;viewResponse([ 'subscriptionForm' =&gt; $subscriptionForm-&gt;createView(), ]); } } Add the form in your template together with a submit button; make sure you use the same string as in the controller action(subscriptionForm). {{ form_start(subscriptionForm) }} {{ form_widget(subscriptionForm.email) }} {{ form_errors(subscriptionForm.email) }} &lt;input type="submit" value="Subscribe" /&gt;
{{ form_end(subscriptionForm) }} Post the Data To handle the posted data, we’ll need to extend the controller action to handle the request and check if the form is valid when it’s being submitted; in here you can setup the page to which you want the user to be redirected after the form is being succesfully submitted. Click to expand the code sample &lt;?php
namespace Pyz\Yves\Newsletter\Controller; use Spryker\Yves\Kernel\Controller\AbstractController; /** * @method \Pyz\Yves\Newslette\NewsletterFactory getFactory() */
class SubscriptionController extends AbstractController
{ /** * @param \Symfony\Component\HttpFoundation\Request $request * * @return array|\Symfony\Component\HttpFoundation\RedirectResponse */ public function indexAction(Request $request) { $subscriptionForm = $this -&gt;getFactory() -&gt;createSubscriptionForm() -&gt;handleRequest($request); if ($subscriptionForm-&gt;isValid()) { // Call the client for e.g. to save the subscriber. // Redirect to home page after successful subscription return $this-&gt;redirectResponseInternal('home'); } return $this-&gt;viewResponse([ 'subscriptionForm' =&gt; $subscriptionForm-&gt;createView(), ]); } }</body>
</html>