<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>To reduce boilerplate code and properly handle database transactions you can useSpryker\Zed\PropelOrm\Business\Transaction\DatabaseTransacti onHandlerTrait. Usage To use database transactions in theDatabaseTransactionHandlingExampleclass: Click to expand the code sample &lt;?php use Spryker\Zed\PropelOrm\Business\Transaction\DatabaseTransactionHandlerTrait; class DatabaseTransactionHandlingExample
{ use DatabaseTransactionHandlerTrait; /** * @param string $fooName * @param \Bar[] $barCollection * * @return \Foo */ public function createFoo($fooName, array $barCollection) { return $this-&gt;handleDatabaseTransaction(function () use ($fooName, $barCollection) { return $this-&gt;executeCreateFooTransaction($fooName, $barCollection); }); } /** * @param string $fooName * @param \Bar[] $barCollection * * @return \Foo */ protected function executeCreateFooTransaction($fooName, array $barCollection) { $fooEntity = new Foo(); $fooEntity-&gt;setFooName($fooName); $fooEntity-&gt;save(); foreach ($barCollection as $bar) { $bar-&gt;setFkFoo($fooEntity-&gt;getIdFoo()); $bar-&gt;save(); } return $fooEntity; } } Under the hood In case of any error, the transaction will be rolled back and an exception will be rethrown. The code only has one method. The$connectionparameter is optional and if not specifiedPropel::getConnection()will be used. Click to expand the code sample &lt;?php /** * @param \Closure $callback * @param \Propel\Runtime\Connection\ConnectionInterface|null $connection * * @throws \Exception * @throws \Throwable * * @return mixed */ protected function handleDatabaseTransaction(Closure $callback, ConnectionInterface $connection = null) { if (!$connection) { $connection = Propel::getConnection(); } $connection-&gt;beginTransaction(); try { $result = $callback(); $connection-&gt;commit(); return $result; } catch (\Exception $exception) { $connection-&gt;rollBack(); throw $exception; } catch (\Throwable $exception) { $connection-&gt;rollBack(); throw $exception; } }</body>
</html>