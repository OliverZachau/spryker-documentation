<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>As an example on how to implement a Twig extension, we’ll build a filter which can be used on displaying prices. Implement the filter Add the Twig extension Register the new Twig extension Test your Twig extension Implement the filter Add the logic in a dedicated class, in the(Undefined variable: General.bundle/module)you’re currently working on: Click to expand the code sample &lt;?php
namespace Pyz\Zed\ExampleBundle\Communication\Plugin\Twig\Filters; class PriceFilter
{ const DECIMALS = 2; const DIVIDER = 100; /** * @var int */ protected $price; /** * @param int $price */ public function __construct($price) { $this-&gt;price = $price; } /** * @return string */ protected function getCurrency() { // here can be more logic to get the used currency return '&amp;euro;'; } /** * @return string */ public function getConvertedPrice() { // here could be more logic to convert the price if it needs to be displayed in a different currency return sprintf( '%s %s', number_format($this-&gt;price / static::DIVIDER, static::DECIMALS), $this-&gt;getCurrency() ); }
} Add the Twig Extension Create a class that extends theTwig_Extensionclass and calls the logic implemented in the class mentioned above. Click to expand the code sample &lt;?php
namespace Pyz\Zed\ExampleBundle\Plugin\Twig; use Spryker\Zed\ExampleBundle\Communication\Plugin\Twig\Filters\PriceFilter; class ExampleTwigExtension extends \Twig_Extension
{ /** * @return array */ public function getFilters() { return [ new \Twig_SimpleFilter('myFilter', function ($value) { return strtoupper($value); }, [ 'is_safe' =&gt; ['html'], // use this to allow HTML code output without raw filter ]), ]; } /** * to add custom function you'll do the same as with filters * * @return array */ public function getFunctions() { return []; } /** * @return string */ public function getName() { return 'ExampleTwigExtension'; }
} Register the Twig Extension that You Created In order to be able to use it from the Twig templates, the extension must be registered in thegetTwigExtensions()method fromZedBootstrapclass. First, add a reference to the Twig extension inZedBootstrap.php: &lt;?php
use Pyz\Zed\ExampleBundle\Plugin\Twig\ExampleTwigExtension; // Instantiate the new Twig extension
protected function getTwigExtensions(Application $app)
{ return [ ... new ExampleTwigExtension(), ];
} Test the Twig Extension Now the Twig extension is ready to be used in the Twig templates. &lt;?php
use Pyz\Zed\ExampleBundle\Plugin\Twig\ExampleTwigExtension; // Instantiate the new Twig extension
protected function getTwigExtensions(Application $app)
{ return [ ... new ExampleTwigExtension(), ];
} An input of100will be outputted as1.00 &amp;euro.</body>
</html>