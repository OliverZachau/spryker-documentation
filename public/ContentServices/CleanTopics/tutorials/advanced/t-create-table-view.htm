<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>This tutorial explains how to retrieve data from the database and render it in a table. Prerequisites: You have created a new(Undefined variable: General.bundle/module)( Tutorial - Adding a New [[[Undefined variable General.bundle/module]]] ). Create a QueryContainer Create theQueryContainerclass in the HelloWorld(Undefined variable: General.bundle/module): mkdir -p src/Pyz/Zed/HelloWorld/Persistence/
touch src/Pyz/Zed/HelloWorld/Persistence/HelloWorldQueryContainer.php Add thequeryProductsoperation in the query container : &lt;?php
namespace Pyz\Zed\HelloWorld\Persistence; use Orm\Zed\Product\Persistence\SpyProductQuery;
use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer; interface HelloWorldQueryContainerInterface
{ public function queryProducts();
} &lt;?php
namespace Pyz\Zed\HelloWorld\Persistence; use Orm\Zed\Product\Persistence\SpyProductQuery;
use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer; class HelloWorldQueryContainer extends AbstractQueryContainer implements HelloWorldQueryContainerInterface
{ public function queryProducts() { return new SpyProductQuery(); }
} Create the Table Create theProductTableclass : mkdir -p src/Pyz/Zed/HelloWorld/Communication/Table
touch src/Pyz/Zed/HelloWorld/Communication/Table/ProductTable.php Add the configuration for the table: Click to expand the code sample &lt;?php
namespace Pyz\Zed\HelloWorld\Communication\Table; use Orm\Zed\Product\Persistence\Map\SpyProductTableMap;
use Orm\Zed\Product\Persistence\SpyProductQuery;
use Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainerInterface;
use Spryker\Zed\Gui\Communication\Table\AbstractTable;
use Spryker\Zed\Gui\Communication\Table\TableConfiguration; class ProductTable extends AbstractTable
{ /** * @var \Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainerInterface */ protected $queryContainer; /** * @param \Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainerInterface $queryContainer */ public function __construct(HelloWorldQueryContainerInterface $queryContainer) { $this-&gt;queryContainer = $queryContainer; } /** * @param TableConfiguration $config * * @return TableConfiguration */ protected function configure(TableConfiguration $config) { $config-&gt;setHeader([ SpyProductTableMap::COL_ID_PRODUCT =&gt; 'Product ID', SpyProductTableMap::COL_SKU =&gt; 'Product Sku', ]); return $config; } /** * @param TableConfiguration $config * * @return array */ protected function prepareData(TableConfiguration $config) { $queryResult = $this-&gt;runQuery($this-&gt;queryContainer-&gt;queryProducts(), $config); $results = []; foreach ($queryResult as $resultItem) { $results[] = [ SpyProductTableMap::COL_ID_PRODUCT =&gt; $resultItem[SpyProductTableMap::COL_ID_PRODUCT], SpyProductTableMap::COL_SKU =&gt; $resultItem[SpyProductTableMap::COL_SKU], ]; } return $results; }
} Create the Factory The factory should be placed in the communication layer and should contain a method that returns an instance of theProductTableclass. touch src/Pyz/Zed/HelloWorld/Communication/HelloWorldCommunicationFactory.php Add the method that constructs the instance ofProductTableclass : &lt;?php
namespace Pyz\Zed\HelloWorld\Communication; use Pyz\Zed\HelloWorld\Communication\Table\ProductTable;
use Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainer;
use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory; /** * @method HelloWorldQueryContainer getQueryContainer() */
class HelloWorldCommunicationFactory extends AbstractCommunicationFactory
{ /** * @return ProductTable */ public function createProductTable() { return new ProductTable($this-&gt;getQueryContainer()); } } Add a Controller Action That Renders the Table Click to expand the code sample &lt;?php
namespace Pyz\Zed\HelloWorld\Communication\Controller; use Pyz\Zed\HelloWorld\Communication\HelloWorldCommunicationFactory;
use Spryker\Zed\Kernel\Communication\Controller\AbstractController; /** * @method HelloWorldCommunicationFactory getFactory() */
class IndexController extends AbstractController
{ /** * @return array */ public function indexAction() { $table = $this-&gt;getFactory()-&gt;createProductTable(); return [ 'products' =&gt; $table-&gt;render() ]; } /** * @return \Symfony\Component\HttpFoundation\JsonResponse */ public function tableAction() { $table = $this-&gt;getFactory()-&gt;createProductTable(); return $this-&gt;jsonResponse( $table-&gt;fetchData() ); }
} The tableAction() will be called by a jQuery Plugin ( Datatables ) that renders the actual data as a table Create the Twig Template Add theproductsvariable toPyz/Zed/HelloWorld/Presentation/Index/index.twigin order to render the table containing the list of products. {% extends '@Gui/Layout/layout.twig' %} {% block content %} {% embed '@Gui/Partials/widget.twig' with { widget_title: 'Orders List' } %} {% block widget_content %} {{ products | raw }} {% endblock %} {% endembed %} {% endblock %} This is all! To see the table you created, go to http://zed.de.demoshop.local/hello-world . You will be able to see the products listed in the table.</body>
</html>