<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>This tutorial describes the steps you need to follow in order to extend theImporter (Undefined variable: General.bundle/module)functionality. In this example, we’ll import customer data; of course you can update the code in this tutorial to fit your need. Customer Data file In order to import customer data from a legacy system, the data needs to be exported to a CSV file in a format that fits the new database schema. In theImporter (Undefined variable: General.bundle/module), we’ll place thecustomers.csvfile under thesrc/Pyz/Zed/Importer/Business/Internal/data/folder. The first line in the CSV file must describe the structure of the data we need to import. The other lines must respect this given structure and one row corresponds to one entry. customer_reference,email,first_name,last_name
DE--1,test_customer1@mail.com,Test,Customer1
DE--2,test_customer2@mail.com,Test,Customer2 Implement Customer Installer The data installer has knowledge on where to get the data from and which data importers are able to process it. The data installer receives one or more data importers, that are executing the actual import. Create theCustomerInstallerclass under thesrc/Pyz/Zed/Importer/Business/Installer/Customer/folder. Place the following code in theCustomerInstallerclass: Click to expand the code sample &lt;?php namespace Pyz\Zed\Importer\Business\Installer\Customer; use Pyz\Zed\Importer\Business\Installer\AbstractInstaller;
use Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface; class CustomerInstaller extends AbstractInstaller
{ /** * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface */ protected function buildBatchIterator() { return $this-&gt;utilDataReaderService-&gt;getCsvBatchIterator($this-&gt;getCsvDataFilename()); } /** * @return string */ public function getTitle() { return 'Customers'; } private function getCsvDataFilename() { return $this-&gt;dataDirectory . '/customers.csv'; }
} InstallerFactory Next, in theInstallerFactorywe need to add a method that returns an instance of our new data installer. &lt;?php /** * @return \Pyz\Zed\Importer\Business\Installer\Customer\CustomerInstaller */ public function createCustomerInstaller() { $customerInstaller = new CustomerInstaller( $this-&gt;getImporterCustomerCollection(), $this-&gt;getConfig()-&gt;getImportDataDirectory() ); return $customerInstaller; } /** * @return \Pyz\Zed\Importer\Business\Importer\ImporterInterface[] */ public function getImporterCustomerCollection() { return [ ImporterConfig::RESOURCE_CUSTOMER =&gt; $this-&gt;createImporterFactory()-&gt;createCustomerImporter(), ]; } We’ll take care of the implementation of the customer importer further. Add the resource customer constant in theImporterConfig: &lt;?php
const RESOURCE_CUSTOMER = 'RESOURCE_CUSTOMER'; Implement Customer Importer The importer is the class responsible for processing and converting the data from a legacy format it can understand to the new format and then import it to the database. Also, it checks if the import was already executed. Create theCustomerImporterclass under thesrc/Pyz/Zed/Importer/Business/Importer/Customer/folder. Place the following code in theCustomerImporterclass: Click to expand the code sample &lt;?php namespace Pyz\Zed\Importer\Business\Importer\Customer; use Generated\Shared\Transfer\CustomerTransfer;
use Pyz\Zed\Importer\Business\Importer\AbstractImporter;
use Pyz\Zed\Customer\Business\CustomerFacadeInterface; class CustomerImporter extends AbstractImporter
{ /** * @var \Pyz\Zed\Customer\Business\CustomerFacadeInterface */ protected $customerFacade; /** * @param \Pyz\Zed\Customer\Business\CustomerFacadeInterface $customerFacade */ public function __construct( CustomerFacadeInterface $customerFacade ) { $this-&gt;customerFacade = $customerFacade; } /** * @param array $data * * @return void */ protected function importOne(array $data) { $customer = $this-&gt;format($data); $customerTransfer = new CustomerTransfer(); $customerTransfer-&gt;setCustomerReference($customer["customer_reference"]); $customerTransfer-&gt;setEmail($customer["email"]); $customerTransfer-&gt;setFirstName($customer["first_name"]); $customerTransfer-&gt;setLastName($customer["last_name"]); $this-&gt;customerFacade-&gt;createCustomer($customerTransfer); } /** * @return bool */ public function isImported() { return $this-&gt;customerFacade-&gt;customersAreImported(); } /** * @return string */ public function getTitle() { return `Customer Import`; }
} ImporterFactory Next, in theImporterFactorywe need to add a method that creates an instance of our new data importer. &lt;?php /** * @return \Pyz\Zed\Importer\Business\Importer\Customer\CustomerImporter */ public function createCustomerImporter() { $customerImporter = new CustomerImporter( $this-&gt;getCustomerFacade() ); return $customerImporter; } Add the dependency to theCustomer (Undefined variable: General.bundle/module) Since we need to use theCustomerFacade, we need to add this dependency. In theImporterDependencyProvideradd the dependency to theCustomerBundlein theprovideBusinessLayerDependencies(Container $container)method: &lt;?php const FACADE_CUSTOMER = 'FACADE_CUSTOMER'; /** * @param \Spryker\Zed\Kernel\Container $container * * @return \Spryker\Zed\Kernel\Container */ public function provideBusinessLayerDependencies(Container $container) { $container = parent::provideBusinessLayerDependencies($container); //.. $container[static::FACADE_CUSTOMER] = function (Container $container) { return $container-&gt;getLocator()-&gt;customer()-&gt;facade(); }; return $container; } Add a method that returns an instance of theCustomerFacadein theAbstractFactory: &lt;?php /** * @return \Pyz\Zed\Category\Business\CustomerFacadeInterface */ protected function getCustomerFacade() { return $this-&gt;getProvidedDependency(ImporterDependencyProvider::FACADE_CUSTOMER); } Extend Customer(Undefined variable: General.bundle/module) As you can see, the importer calls some methods from theCustomerFacadethat don’t exist yet. Next, we’ll need to extend theCustomerFacadeso that it implements and exposes those 2 methods that we need for our data import. Create theBusinesslayer in theCustomer (Undefined variable: General.bundle/module). Add aCustomerWriterclass, where we’ll implement the business logic for these 2 operations. Click to expand the code sample &lt;?php namespace Pyz\Zed\Customer\Business; use Generated\Shared\Transfer\CustomerTransfer;
use Spryker\Zed\Customer\Persistence\CustomerQueryContainerInterface;
use Orm\Zed\Customer\Persistence\SpyCustomer; class CustomerWriter
{ /** * @var \Spryker\Zed\Customer\Persistence\CustomerQueryContainerInterface */ protected $queryContainer; /** * @param \Spryker\Zed\Customer\Persistence\CustomerQueryContainerInterface $queryContainer */ public function __construct(CustomerQueryContainerInterface $queryContainer) { $this-&gt;queryContainer = $queryContainer; } /** * @return bool */ public function customersAreImported() { return $this-&gt;queryContainer-&gt;queryCustomers()-&gt;count() &gt; 0; } /** * @param \Generated\Shared\Transfer\CustomerTransfer $customerTransfer */ public function createCustomer(CustomerTransfer $customerTransfer) { $customerEntity = new SpyCustomer(); $customerEntity-&gt;fromArray($customerTransfer-&gt;toArray()); $customerEntity-&gt;save(); } } To be able to get an instance of theCustomerWriterin our facade, add aCustomerBusinessFactoryunder the business layer with a method that creates theCustomerWriter. &lt;?php namespace Pyz\Zed\Customer\Business; use Spryker\Zed\Customer\Business\CustomerBusinessFactory as SprykerCustomerBusinessFactory; /** * @method \Spryker\Zed\Customer\Persistence\CustomerQueryContainer getQueryContainer() */
class CustomerBusinessFactory extends SprykerCustomerBusinessFactory
{ /** * @return \Pyz\Zed\Customer\Business\CustomerWriter */ public function createCustomerWriter() { return new CustomerWriter($this-&gt;getQueryContainer()); } } Next, we’ll need to extend theCustomerFacadeso that it exposes the functionality we just added. First, add theCustomerFacadeInterfacethat extends the interface of the facade from the core level with 2 new operations. &lt;?php namespace Pyz\Zed\Customer\Business; use Spryker\Zed\Customer\Business\CustomerFacadeInterface as SprykerCustomerFacadeInterface;
use Generated\Shared\Transfer\CustomerTransfer; interface CustomerFacadeInterface extends SprykerCustomerFacadeInterface
{ /** * @return bool */ public function customersAreImported(); /** * @param \Generated\Shared\Transfer\CustomerTransfer $customerTransfer */ public function createCustomer(CustomerTransfer $customerTransfer);
} Next, add theCustomerFacadethat extends the facade defined on the core level: Click to expand the code sample &lt;?php namespace Pyz\Zed\Customer\Business; use Spryker\Zed\Customer\Business\CustomerFacade as SprykerCustomerFacade;
use Generated\Shared\Transfer\CustomerTransfer; /** * @method \Pyz\Zed\Customer\Business\CustomerBusinessFactory getFactory() */
class CustomerFacade extends SprykerCustomerFacade implements CustomerFacadeInterface
{ /** * @return bool */ public function customersAreImported() { return $this-&gt;getFactory()-&gt;createCustomerWriter()-&gt;customersAreImported(); } /** * @param \Generated\Shared\Transfer\CustomerTransfer $customerTransfer */ public function createCustomer(CustomerTransfer $customerTransfer) { $this-&gt;getFactory()-&gt;createCustomerWriter()-&gt;createCustomer($customerTransfer); } } Register the new data installer Now we’re almost ready to test the new data installer; we just need to register it in theImporterBusinessFactory: &lt;?php
/** * @return \Pyz\Zed\Importer\Business\Installer\InstallerInterface[] */ protected function getInstallerCollection() { return [ //.. ImporterConfig::RESOURCE_CUSTOMER =&gt; $this-&gt;createInstallerFactory()-&gt;createCustomerInstaller() ]; } For testing the customer data installer you just need to run the data import from the command line: vendor/bin/console import:demo-data</body>
</html>