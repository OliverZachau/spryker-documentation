<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head />
    <body>This tutorial explains how to add new calculation plugin to the calculator stack. Requirement : display the tax amount per item. Right now, you can get the tax amount fromgrandTotal. For this, you have to add a new calculator into the existing stack for the(Undefined variable: General.bundle/module). First, there are some data structure changes that you need to make. ModifyItemTransferobject by adding two new properties : unitTaxAmountfor single item sumTaxAmounttax amount for sum of items As this is Tax related ,you have to add this to project level in the Tax(Undefined variable: General.bundle/module). Modify the transfer objecttax.transfer.xmlto reflect the new data model. Add the following changes toPyz/Shared/Tax/Transfer/tax.transfer.xml file: &lt;transfer name="Item"&gt; &lt;property name="unitTaxAmount" type="int" /&gt; &lt;property name="sumTaxAmount" type="int" /&gt; &lt;/transfer&gt; run console command:vendor/bin/console transfer:generate After this step, you should have in theItemTransfertwo new properties. Next, create the new calculator plugin and register it to the calculator plugin stack. In thePyz/Zed/Taxnamespace, create a new(Undefined variable: General.bundle/module)if it does not exist. Create new plugin class underPyz/Zed/Tax/Communication/Plugin/ItemTaxAmountCalculatorPlugin, as you see in the example below: &lt;?php
namespace Pyz\Zed\Tax\Communication\Plugin; use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Calculation\Dependency\Plugin\CalculatorPluginInterface; /** * @method \Spryker\Zed\Tax\Business\TaxFacade getFacade() */
class ItemTaxAmountCalculatorPlugin extends AbstractPlugin implements CalculatorPluginInterface
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * * @return void */ public function recalculate(QuoteTransfer $quoteTransfer) { $this-&gt;getFacade()-&gt;calculateItemTax($quoteTransfer); }
} Add new plugin into calculator stackPyz\Zed\Calculation\CalculationDependencyProvider::getCalculatorStack(): &lt;?php protected function getCalculatorStack(Container $container) { return [ // ... other plugins add this to place where required amounts are already calculated, for example after ItemCalculator. new ItemTaxAmountCalculatorPlugin(), ]; } Add new facade method:Pyz\Zed\Tax\TaxFacade::calculateItemTax()and create TaxFacade class extending Spryker Core TaxFacade if not present. &lt;?php /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * * @return void */ public function calculateItemTax(QuoteTransfer $quoteTransfer) { $this-&gt;getFactory()-&gt;createItemTaxCalculator()-&gt;recalculate($quoteTransfer); } Create theItemTaxCalculatorthat implements the tax calculation business logic. Place this class under\Pyz\Zed\Calculation\Business\Model\ItemTaxCalculator. &lt;?php
namespace Pyz\Zed\Tax\Business\Model; use Generated\Shared\Transfer\QuoteTransfer; class ItemTaxCalculator
{ /** * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer * * @return void */ public function recalculate(QuoteTransfer $quoteTransfer) { //tax calculator business logic }
} Add a new factory method for the new calculator intoPyz\Zed\Tax\Business\TaxBusinessFactory. Create the factory class if does not exist, extending the Spryker Core factory. &lt;?php
/** * @return \Pyz\Zed\Tax\Business\Model\ItemTaxCalculator */ protected function createItemTaxCalculator() { return new ItemTaxCalculator(); }</body>
</html>