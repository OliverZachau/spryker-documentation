<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Tutorials|Tutorials|Introduction">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Tutorial - OMS State Machine</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/MadCapSearch.Google.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/mobile.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/prism.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.topic-ratings-button
{
	-pie-background: transparent url('../../../Skins/Default/Stylesheets/Images/star-full.png') no-repeat center center;
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.edit-user-profile-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/edit-profile.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../resources/stylesheets/mainstyles.css" rel="stylesheet" />
        <link href="../resources/tablestyles/patternedrows.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.Google.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="small" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form>
                                            <div id="lXx8h3Ni90KiWbMH4ljRuw" class="search-bar search-bar-container needs-pie">
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container" data-mc-content-body="True">
                                <script src="../../resources/prism.js">
                                </script>
                                <div class="search-container">
                                    <form>
                                        <div id="fqluUuwhBkq9bmVA__S-fQ" class="search-bar search-bar-container needs-pie _Skins_SearchTopics mc-component">
                                        </div>
                                    </form>
                                </div>
                                <div class="row collapse">
                                    <div class="top-bar">
                                        <div class="nocontent">
                                            <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="topic-layout">
                                        <div>
                                            <div class="side-menu">
                                                <div data-sticky-container="" id="Ga8YlYlV70CCydEhtbnhUQ">
                                                    <div class="sticky sticky-menu" style="width:100%" data-sticky="" data-top-anchor="Ga8YlYlV70CCydEhtbnhUQ:top" data-bottom-anchor="contentBody:bottom" data-sticky-on="small" data-scroll-container-on="small">
                                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/master.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="side-menu">
                                                <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                    <div class="button-group-container-left">
                                                        <div class="button-group star-buttons loading feedback-topic-required">
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                        </div>
                                                        <div class="button-separator feedback-topic-required">
                                                        </div>
                                                        <button class="button feedback-required login-button" id="normalLoginBtn" data-state1-class="login-button" data-state2-class="edit-user-profile-button" title="Login" data-state1-title="Login">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="login" />
                                                        </button>
                                                        <button class="button needs-pie print-button" title="Print">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                        </button>
                                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                        </button>
                                                    </div>
                                                </div>
                                                <h1>Tutorial - OMS State Machine</h1>
                                                <h2>Challenge Description</h2>
                                                <p>Create a simple state machine that demonstrates an order process. The simple order process has the following states: new, paid, shipped, closed, returned, and invalid. We use the invalid state in case a payment is unauthorized (could be used with some other cases as well). In order to build the state machine, only three main steps are needed.</p>
                                                <h2>1. Create the State Machine Graph</h2>
                                                <p>The first step is to create the graph that demonstrates the state machine and contains the states with their transitions, events, commands, and conditions. State machines in Spryker are built using easy and well structured XML files. Let’s get started and create the state machine.</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Create a new XML file in <var>\config\Zed\oms</var> and call it <var>Demo01.xml</var>.</li>
                                                    <li class="bullet_list" value="2">Add the <var>Demo01</var> state machine as an active process in <var>config_default.php</var> under <var>\config\Shared\</var> by adding it to the <var>$config[OmsConstants::ACTIVE_PROCESSES]</var> array.</li>
                                                    <li class="bullet_list" value="3">Now let’s go back to the XML file. To build the state machine main schema, use the <var>statemachine</var> and <var>process</var> elements and the Spryker OMS schema like following:</li>
                                                </ul><pre><code class="language-PHP line-numbers">    &lt;?xml version="1.0"?&gt;
    &lt;statemachine
        xmlns="spryker:oms-01"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="spryker:oms-01 http://static.spryker.com/oms-01.xsd"&gt;

        &lt;process name="Demo01" main="true"&gt;

        &lt;/process&gt;

    &lt;/statemachine&gt;</code></pre>
                                                <ul>
                                                    <li class="bullet_list" value="1">Now you are ready to add the states to the state machine. Add the first state new inside the process element using the state element like this:</li>
                                                </ul><pre><code class="language-PHP line-numbers">    &lt;states&gt;
        &lt;state name="new"/&gt;
    &lt;/states&gt;</code></pre>
                                                <ul>
                                                    <li class="bullet_list" value="1">To see the state machine graph while, and after, building it, go to <a href="http://zed.de.demoshop.local/oms" target="_blank">Zed UI -&gt; Maintenance -&gt; OMS</a> and then you will see your state machine <var>Demo01</var>. Click on it and you will see the graph that represents your XML file.</li>
                                                    <li class="bullet_list" value="2">Add the other states to you state machine and refresh the graph to see the new changes.</li>
                                                    <li class="bullet_list" value="3">After adding all the states, you can now start adding the <var>transition</var> and their events. To do so use the transitions element like this:</li>
                                                </ul><pre><code class="language-PHP line-numbers">    &lt;transition&gt;
        &lt;source&gt;new&lt;/source&gt;
        &lt;target&gt;paid&lt;/target&gt;
        &lt;event&gt;pay&lt;/event&gt;
    &lt;/transition&gt;</code></pre>
                                                <p>A transition defines the source state, the target state, and the event to trigger the transition.</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Now add the event like this:</li>
                                                </ul><pre><code class="language-PHP line-numbers">    &lt;events&gt;
        &lt;event name="pay" onEnter="true"/&gt;
    &lt;/events&gt;</code></pre>
                                                <p><var>onEnter</var> event means that this transition will be triggered automatically. You can also use <var>manual</var> or <var>timeout</var>. A <var>manual</var> event will add a button in the order page to allow triggering the event manually. A <var>timeout</var> one will be triggered after the specified time is out. A timeout could be defined using natural language e.g. <var>14days</var>.</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Add all the other needed transitions and events until you have a logically working graph. Refresh every time you add something new to see the changes live.</li>
                                                </ul>
                                                <h2>2. Add Commands and Conditions to the State Machine</h2>
                                                <p>In state machine real live scenarios, most probably you need to use PHP implementations for some specific logic like sending request to a payment provider or an ERP system. To do so, Spryker provides Commands and Conditions. Commands are triggered with events, therefore they are added to events, and conditions helps deciding to which state an item should move next, and therefore they are added to transitions.</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Add a command to the <var>pay</var> event like this:</li>
                                                </ul><pre><code class="language-PHP line-numbers">    &lt;events&gt;
        &lt;event name="pay" onEnter="true" command="Demo/Pay"/&gt;
    &lt;/events&gt;</code></pre>
                                                <ul>
                                                    <li class="bullet_list" value="1">Add the other commands to the other events.</li>
                                                    <li class="bullet_list" value="2">Now add conditions where needed in order to make decisions where to move next. This works well with payments. So let’s add a conditions to the <var>paid-&gt;shipped </var>transition like this:</li>
                                                </ul><pre><code class="language-PHP line-numbers">    &lt;transition condition="Demo/IsPaymentAuthorized"&gt;
        &lt;source&gt;paid&lt;/source&gt;
        &lt;target&gt;shipped&lt;/target&gt;
        &lt;event&gt;ship&lt;/event&gt;
    &lt;/transition&gt;</code></pre>
                                                <p>The state machine engine recognizes where to move next using the event name. In this case, the transitions <var>paid-&gt;shipped</var> and <var>paid-&gt;invalid</var> should use the same event name with a condition on one of the transitions. The machine then will examine the condition, if it returns <var>true</var> then go to <var>shipped</var> state, otherwise go to <var>invalid</var>. If you check the drafted state machine in Zed now, you can see that the conditions and commands are marked with red color (“not implemented”). So let’s implement them.</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">In order to implement the commands and conditions, we use Spryker Command and Condition interfaces <var>CommandByOrderInterface</var> and <var>ConditionInterface</var>.</li>
                                                    <li class="bullet_list" value="2">Go to <var>src/Pyz/Zed/Oms/Communication/Plugin/Oms/Command/</var> and create a new folder called <var>Demo</var>. Now create a new class and call it <var>PayCommand.php</var>. Then implement the command interface with the <var>run()</var> method like this:</li>
                                                </ul><pre><code class="language-PHP line-numbers">&lt;?php
    namespace Pyz\Zed\Oms\Communication\Plugin\Oms\Command\Demo;

    use Orm\Zed\Sales\Persistence\SpySalesOrder;
    use Spryker\Zed\Oms\Business\Util\ReadOnlyArrayObject;
    use Spryker\Zed\Oms\Communication\Plugin\Oms\Command\AbstractCommand;
    use Spryker\Zed\Oms\Dependency\Plugin\Command\CommandByOrderInterface;

    class PayCommand extends AbstractCommand implements CommandByOrderInterface
    {

        /**
         * @param array $orderItems
         * @param \Orm\Zed\Sales\Persistence\SpySalesOrder $orderEntity
         * @param \Spryker\Zed\Oms\Business\Util\ReadOnlyArrayObject $data
         *
         * @return array
         */
        public function run(array $orderItems, SpySalesOrder $orderEntity, ReadOnlyArrayObject $data)
        {
            return [];
        }

    }</code></pre>
                                                <p>You can add any implementation to the <var>PayCommand</var>, or just return an empty array for now.</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Do the same thing for the other commands.</li>
                                                    <li class="bullet_list" value="2">Follwing the same approach, add the condition to <var>src/Pyz/Zed/Oms/Communication/Plugin/Oms/Condition/</var> by creating a new <var>Demo</var> folder and a condition class in it called <var>IsPaymentAuthorizedCondition.php</var>. The condition can be implemented like this:</li>
                                                </ul><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Oms\Communication\Plugin\Oms\Condition\Demo;

use Orm\Zed\Sales\Persistence\SpySalesOrderItem;
use Spryker\Zed\Oms\Communication\Plugin\Oms\Condition\AbstractCondition;
use Spryker\Zed\Oms\Dependency\Plugin\Condition\ConditionInterface;

class IsPaymentAuthorizedCondition extends AbstractCondition implements ConditionInterface
{

    /**
     * @api
     *
     * @param \Orm\Zed\Sales\Persistence\SpySalesOrderItem $orderItem
     *
     * @return bool
     */
    public function check(SpySalesOrderItem $orderItem)
    {
        return true;
    }

}</code></pre>
                                                <ul>
                                                    <li class="bullet_list" value="1">After implementing the command and conditions, you need now to register them in the OMS <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span>. To do so, go to <var>OmsDependencyProvider</var> in <var>src/Pyz/Zed/Oms/</var> and extend the <var>getConditionPlugins()</var> and <var>getCommandPlugins()</var> methods:</li>
                                                </ul><pre><code class="language-PHP line-numbers">&lt;?php
    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Kernel\Container
     */
    public function provideBusinessLayerDependencies(Container $container)
    {
        $container = parent::provideBusinessLayerDependencies($container);
        $container-&gt;extend(self::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) {
            $commandCollection-&gt;add(new PayCommand(), 'Demo/Pay');

            return $commandCollection;
        });

        $container-&gt;extend(self::CONDITION_PLUGINS, function (ConditionCollectionInterface $conditionCollection) {
             $conditionCollection-&gt;add(new IsPaymentAuthorizedCondition(), 'Demo/IsPaymentAuthorized');

             return $conditionCollection;
        });

        return $container;
    }</code></pre>
                                                <ul>
                                                    <li class="bullet_list" value="1">Now, refresh the state machine graph, you should see everything correctly implmented and the red messages are gone.</li>
                                                </ul>
                                                <h2>3. Activate the State Machine</h2>
                                                <p>The final step is to activate and use the state machine by hooking it into the checkout. To do so:</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Open the configuration file: <var>config/Shared/config_default.php</var>.</li>
                                                    <li class="bullet_list" value="2">Change the invoice payment configuration to use the <var>Demo01</var> state machine instead of <var>DummyPayment01</var>.</li>
                                                </ul><pre><code class="language-PHP line-numbers">&lt;?php
$config[SalesConstants::PAYMENT_METHOD_STATEMACHINE_MAPPING] = [
    DummyPaymentConfig::PAYMENT_METHOD_INVOICE =&gt; 'Demo01',
    ...
];</code></pre>
                                                <p>Next time you checkout with “Invoice” payment, the new <var>Demo01</var> state machine will be used.</p>
                                                <h2>Testing the State Machine</h2>
                                                <p>That’s it! You have just built a new order process. To test it:</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Go to the <a href="http://www.de.demoshop.local/" target="_blank" title="demoshop" alt="demoshop">demoshop</a>, choose a product and add it to cart, checkout using <var>Invoice</var>, and complete the order.</li>
                                                    <li class="bullet_list" value="2">Open the <a href="http://zed.de.demoshop.local/sales" target="_blank" title="demoshop orders page" alt="demoshop orders page">orders page</a> in Zed UI and then open your order. This order is now applying the process you have defined in the state machine. All the <var>manual</var> events add buttons using the event names you defined, while the <var>onEnter</var> ones move automatically.</li>
                                                    <li class="bullet_list" value="3">You can click on the state machine name <var>Demo01</var> under the process column to see what the current state for a specific item is. The current state has a yellowish background color.</li>
                                                    <li class="bullet_list" value="4">Now click on <var>ship</var> to move the item into the next state.</li>
                                                    <li class="bullet_list" value="5">Click again on the state machine name <var>Demo01</var> and check the current state.</li>
                                                    <li class="bullet_list" value="6">You can keep moving the item until the order is closed.</li>
                                                </ul>
                                                <h2>Nice Addition</h2>
                                                <p>Along with the nice representation of the state machine as graph, Spryker provides a flag called <var>happy</var> to add green arrows in the graph in order to define the happy path of an order item. To add this flag, just write <var>happy = true</var> on the transitions that are part of the happy path like this for example:</p><pre><code class="language-PHP line-numbers">    &lt;transition condition="Demo/IsPaymentAuthorized" happy="true"&gt;
        &lt;source&gt;paid&lt;/source&gt;
        &lt;target&gt;shipped&lt;/target&gt;
        &lt;event&gt;ship&lt;/event&gt;
    &lt;/transition&gt;</code></pre>
                                                <h2>References</h2>
                                                <table class="TableStyle-PatternedRows" style="mc-table-style: url('../Resources/TableStyles/PatternedRows.css');" cellspacing="0">
                                                    <col class="TableStyle-PatternedRows-Column-Regular" />
                                                    <col class="TableStyle-PatternedRows-Column-Regular" />
                                                    <thead>
                                                        <tr class="TableStyle-PatternedRows-Head-Header1">
                                                            <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Documentation</th>
                                                            <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Description</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-PatternedRows-Body-LightRows">
                                                            <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                                                                <p>OMS - Cook Book</p>
                                                            </td>
                                                            <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                                                                <p>State Machines - The Cook Book</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                                                            <td class="TableStyle-PatternedRows-BodyB-Regular-DarkerRows">
                                                                <p><a href="../Developing with Spryker/Module Guide/Checkout Process/OMS/oms.htm">OMS -  Documentation</a>
                                                                </p>
                                                            </td>
                                                            <td class="TableStyle-PatternedRows-BodyA-Regular-DarkerRows">
                                                                <p>Order Management System Concepts</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>