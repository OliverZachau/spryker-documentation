<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-conditions="Spryker.ShopSuite,Spryker.B2C,Spryker.B2B" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Tutorials|Tutorials|Introduction">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Handling Data - Publish and Synchronization</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/MadCapSearch.Google.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/mobile.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/prism.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.topic-ratings-button
{
	-pie-background: transparent url('../../../Skins/Default/Stylesheets/Images/star-full.png') no-repeat center center;
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.edit-user-profile-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/edit-profile.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../resources/stylesheets/mainstyles.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.Google.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="small" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form>
                                            <div id="Fs7S5O8Hv0O4FBkreVASSA" class="search-bar search-bar-container needs-pie">
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container" data-mc-content-body="True">
                                <script src="../../resources/prism.js">
                                </script>
                                <div class="search-container">
                                    <form>
                                        <div id="1TYyttk3HkSoMqYHR42UgA" class="search-bar search-bar-container needs-pie _Skins_SearchTopics mc-component">
                                        </div>
                                    </form>
                                </div>
                                <div class="row collapse">
                                    <div class="top-bar">
                                        <div class="nocontent">
                                            <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="topic-layout">
                                        <div>
                                            <div class="side-menu">
                                                <div data-sticky-container="" id="iWF6HgE7AEmju41sdosvEA">
                                                    <div class="sticky sticky-menu" style="width:100%" data-sticky="" data-top-anchor="iWF6HgE7AEmju41sdosvEA:top" data-bottom-anchor="contentBody:bottom" data-sticky-on="small" data-scroll-container-on="small">
                                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/master.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="side-menu">
                                                <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                    <div class="button-group-container-left">
                                                        <div class="button-group star-buttons loading feedback-topic-required">
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                        </div>
                                                        <div class="button-separator feedback-topic-required">
                                                        </div>
                                                        <button class="button feedback-required login-button" id="normalLoginBtn" data-state1-class="login-button" data-state2-class="edit-user-profile-button" title="Login" data-state1-title="Login">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="login" />
                                                        </button>
                                                        <button class="button needs-pie print-button" title="Print">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                        </button>
                                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                        </button>
                                                    </div>
                                                </div>
                                                <h1>Tutorial - Handling Data - Publish and Synchronization</h1>
                                                <h2>Challenge Description</h2>
                                                <p>Publish and Synchronization (P&amp;S) allows exporting data from Spryker backend (<i>Zed</i>) to external endpoints (by default, <i>Redis</i> and <i>Elasticsearch</i>). The endpoints are usually consumed by frontend applications (including <i>Yves</i>).</p>
                                                <p>In this step-by-step tutorial, you will understand how P&amp;S works and learn how to export data on the example of a simple <b>Hello World</b> P&amp;S module. It will synchronize data stored in a <i>Zed</i> database table to <i>Redis</i>. In other words, once a record is created, updated or deleted in the table, the module will automatically make changes in <i>Redis</i>.</p>
                                                <h2>1. Creating Module</h2>
                                                <p>First, let us create a Module that will be responsible for exporting data to <i>Redis</i>. The module name will be <var>HelloWorldStorage</var>. Create a folder with the same name in <b>Zed</b>. It will host our module.</p>
                                                <p class="info"><b>Naming</b>
                                                    <br />The following naming conventions are applied: all P&amp;S modules should use the <var>Storage</var> suffix, if they are related to <i>Redis</i>, or the <var>Search</var> suffix, if they are related to <i>Elasticsearch</i>.
        </p>
                                                <p>Also, let us create a simple table inside the module. The contents of the table will be synchronized to <i>Redis</i>. The name will be <var>SpyHelloWorldMessage</var>.</p>
                                                <p>Place the following content in <var>HelloWorldStorage\Persistence\Propel\Schema\spy_hello_world.schema.xml</var>:</p><pre><code class="language-XML line-numbers">&lt;table name="spy_hello_world_message" idMethod="native" allowPkInsert="true"&gt;
    &lt;column name="id_hello_world_message" type="INTEGER" autoIncrement="true" primaryKey="true"/&gt;
    &lt;column name="name" required="true" type="VARCHAR" /&gt;
    &lt;column name="message" required="false" type="LONGVARCHAR" /&gt;
    &lt;id-method-parameter value="spy_hello_world_message_pk_seq"/&gt;
&lt;/table&gt;</code></pre>
                                                <p>After creating the schema file, run <var>console propel:install</var> to actually create the table.</p>
                                                <h2>2. Data Structure</h2>
                                                <p>Usually, data is stored in <i>Yves</i> differently than in <i>Zed</i>, as the data model used in <i>Redis</i> and <i>Elasticsearch </i>is more optimized for use by the frontend. So, we need to transform it before sending. In P&amp;S, data is always designed with the help of <b>Transfer Objects</b> as a dual contract between <i>Zed</i> and <i>Yves</i>.</p>
                                                <p>Let us start with a simple transfer object. Create <var>hello_wrold.transfer.xml</var> in <var>Shared\HelloWorld\Transfer</var>. It will be easier to display data on the frontend, if we store information in <i>Redis</i> as name-message pairs. For this reason, we will create a Transfer Object that holds a <var>name</var> and a <var>message</var>.</p><pre><code class="language-XML line-numbers">&lt;transfer name="HelloWorldStorage"&gt;
    &lt;property name="name" type="string"/&gt;
    &lt;property name="message" type="string"/&gt;
&lt;/transfer&gt;</code></pre>
                                                <p>Save the file and run <var>console transfer:generate</var> to create the object.</p>
                                                <h2>3. Events</h2>
                                                <p>Now we need to enable events for the table we want to synchronize, and then react to them. For this purpose, we need to activate Event Propel Behavior for the <var>SpyHelloWorldMessage</var> table. Let us open <var>spy_hello_world.schema.xml</var> we created on step <b>1</b> and make the following changes:</p><pre><code class="language-XML line-numbers">&lt;table name="spy_hello_world_message" idMethod="native" allowPkInsert="true"&gt;
    ...
    ...
    &lt;behavior name="event"&gt;
        &lt;parameter name="spy_hello_world_message_all" column="*"/&gt;
    &lt;/behavior&gt;
&lt;/table&gt;</code></pre>
                                                <p class="info">In our example, we will track changes in <b>all</b> columns. For this reason, we use the asterisk ('<b>*</b>') for the <b>column</b> attribute. If you want to track changes only in certain columns, insert their name in the attribute value instead of the asterisk.</p>
                                                <p>When done, save the file and run <var>console propel:install</var> to update the database schema.</p>
                                                <p>The <var>SpyHelloWorldMessage</var> entity model now has <b>3</b> events for creating, updating and deleting a record. Let us map them to some constants for use in our code later. For this purpose, we will create a new interface, <span><var>HelloWorldEvents</var>, in the <var>Dependency</var> folder:</span></p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Zed\HelloWorld\Dependency;

interface HelloWorldEvents
{
    const ENTITY_SPY_HELLO_WORLD_MESSAGE_CREATE = "Entity.spy_hello_world_message.create";
    const ENTITY_SPY_HELLO_WORLD_MESSAGE_UPDATE = "Entity.spy_hello_world_message.update";
    const ENTITY_SPY_HELLO_WORLD_MESSAGE_DELETE = "Entity.spy_hello_world_message.delete";
}</code></pre>
                                                <p>Now, we have enabled events for the <var>SpyHelloWorldMessage</var> entity.</p>
                                                <h1 id="HandlingData-PublishandSynchronization-4.Listeners">4. Listeners</h1>
                                                <p>Events only are not enough for Publish &amp; Synchronize to work. We also need listeners to catch the events and run the appropriate code. Let us create <var>HelloWorldMessageStorageListener.php</var> in the <var>Communication\Plugin\Event\Listener</var> folder:</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Spryker\Zed\HelloWorld\Communication\Plugin\Event\Listener;

use Spryker\Zed\Event\Dependency\Plugin\EventBulkHandlerInterface;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;

class HelloWorldMessageStorageListener extends AbstractPlugin implements EventBulkHandlerInterface
{
    public function handleBulk(array $eventTransfers, $eventName)
    {
        echo "Hello World!";
    }
}</code></pre>
                                                <p>We also need to subscribe the listener to the events we created. Create <var>HelloWorldEventSubscriber.php</var> in  <var>Communication\Plugin\Event\Subscriber</var> and add the listener to each of the events:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Zed\HelloWorld\Communication\Plugin\Event\Subscriber;

use Spryker\Zed\HelloWorld\Communication\Plugin\Event\Listener\HelloWorldMessageStorageListener;
use Spryker\Zed\HelloWorld\Dependency\HelloWorldEvents;
use Spryker\Zed\Event\Dependency\EventCollectionInterface;
use Spryker\Zed\Event\Dependency\Plugin\EventSubscriberInterface;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;

class HelloWorldEventSubscriber extends AbstractPlugin implements EventSubscriberInterface
{
    public function getSubscribedEvents(EventCollectionInterface $eventCollection)
    {
        $eventCollection-&gt;addListenerQueued(HelloWorldEvents::ENTITY_SPY_HELLO_WORLD_MESSAGE_CREATE, new HelloWorldMessageStorageListener());
        $eventCollection-&gt;addListenerQueued(HelloWorldEvents::ENTITY_SPY_HELLO_WORLD_MESSAGE_UPDATE, new HelloWorldMessageStorageListener());
        $eventCollection-&gt;addListenerQueued(HelloWorldEvents::ENTITY_SPY_HELLO_WORLD_MESSAGE_DELETE, new HelloWorldMessageStorageListener());

        return $eventCollection;
    }
}</code></pre>
                                                <p>We also need to add the subscriber to <var>EventDependencyProvider.php</var>:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Event;

use Spryker\Zed\HelloWorld\Communication\Plugin\Event\Subscriber\HelloWorldEventSubscriber;
use Spryker\Zed\Event\EventDependencyProvider as SprykerEventDependencyProvider;

class EventDependencyProvider extends SprykerEventDependencyProvider
{
	...
    public function getEventSubscriberCollection()
    {
        $eventSubscriberCollection = parent::getEventSubscriberCollection();
        $eventSubscriberCollection-&gt;add(new HelloWorldEventSubscriber());

        return $eventSubscriberCollection;
    }
	...
}

</code></pre>
                                                <p>That's it. Now we can test the events and the listeners. To do so:</p>
                                                <ol>
                                                    <li value="1">Stop all Cron jobs or disable Jenkins using the following command: <var>console setup:jenkins:disable</var>.</li>
                                                    <li value="2">Create <var>IndexController.php</var> as follows and run it:</li>
                                                </ol><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Zed\HelloWorld\Communication\Controller;

use Orm\Zed\HelloWorld\Persistence\SpyHelloWorldMessage;
use Spryker\Zed\Kernel\Communication\Controller\AbstractController;

class IndexController extends AbstractController
{
    public function indexAction()
    {
        $helloWorldMessage = new SpyHelloWorldMessage();
        $helloWorldMessage-&gt;setName("John");
        $helloWorldMessage-&gt;setMessage("Hello World!");
        $helloWorldMessage-&gt;save();

        return $this-&gt;jsonResponse([
            "status" =&gt; "success"
        ]);
    }
}
</code></pre>
                                                <p>After running the code, open the web interface of Spryker queue adapter, RabbitMQ (<a href="http://zed.de.suite.local:15672/#/queues" class="_blank">http://zed.de.suite.local:15672/#/queues</a>). You should be able to see one event in the <b>Event</b> Queue:</p>
                                                <p>
                                                    <img src="../../resources/images/publish-and-synchronize/sync-queue-event.png" />
                                                </p>
                                                <p>If you open the message in the <i>Event Queue</i>, you should see something like this:</p>
                                                <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />EventMessage</a></span>
                                                    <div class="MCDropDownBody dropDownBody"><pre><code class="language-JSON line-numbers">{
  "listenerClassName":"Spryker\\Zed\\HelloWorld\\Communication\\Plugin\\Event\\Listener\\HelloWorldMessageStorageListener",
  "transferClassName":"Generated\\Shared\\Transfer\\EventEntityTransfer",
  "transferData":{
    "event":"Entity.spy_hello_world_message.create",
    "name":"spy_hello_world_message",
    "id":1,
    "foreign_keys":[
    ],
    "modified_columns":[
      "spy_hello_world_message.name",
      "spy_hello_world_message.message"
    ]
  },
  "eventName":"Entity.spy_hello_world_message.create"
}
</code></pre>
                                                    </div>
                                                </div>
                                                <p>The data inside the message has all information required for the listener to process it. Now, it's time to run the listener and catch the event. To execute listeners, we need to run a queue command: <var>console queue:task:start event</var>.</p><pre><code class="language-Bash line-numbers">{vagrant@spryker-vagrant ➜  current git:(master) ✗  console queue:task:start event
Store: DE | Environment: development
Hello World!
</code></pre>
                                                <p>We can see a message from our listener in the console, and the <i>Event Queue</i> should be empty:</p>
                                                <p>
                                                    <img src="../../resources/images/publish-and-synchronize/event-queue-no-events.png" />
                                                </p>
                                                <p class="tip">You can use the <var>-k</var> option when running the command to keep messages in the queue for debugging purposes: <var>queue:task:start event -k</var>.</p>
                                                <p>The next step is to publish the data in <i>Redis</i>.</p>
                                                <h2>5. Storage Table</h2>
                                                <p>To publish data, we need an intermediate table where data will be stored before sending it to <i>Redis</i>. This table has data already structured in a format suitable for <i>Redis</i>, however it is stored in <i>Zed</i>. Let us create a schema file for the table (<var>spy_hello_world.schema.xml</var>):</p><pre xml:space="preserve"><code class="language-XML line-numbers">&lt;table name="spy_hello_world_message_storage" idMethod="native" allowPkInsert="true"&gt;
    &lt;column name="id_hello_world_message_storage" type="BIGINT" autoIncrement="true" primaryKey="true"/&gt;
    &lt;column name="fk_hello_world_message" type="INTEGER" required="true"/&gt;
    &lt;index name="spy_hello_world_message_storage-fk_hello_world_message"&gt;
        &lt;index-column name="fk_hello_world_message"/&gt;
    &lt;/index&gt;
    &lt;behavior name="synchronization"&gt;
        &lt;parameter name="resource" value="message"/&gt;
        &lt;parameter name="key_suffix_column" value="fk_hello_world_message"/&gt;
        &lt;parameter name="queue_group" value="sync.storage.hello"/&gt;
    &lt;/behavior&gt;
    &lt;behavior name="timestampable"/&gt;
        &lt;id-method-parameter value="spy_hello_world_message_storage_pk_seq"/&gt;
    &lt;/behavior&gt;
&lt;/table&gt;</code></pre>
                                                <p> Save the file and run <var>console propel:install</var> to create the table. Let us look at the schema file in more detail. It defines the table as follows:</p>
                                                <ul>
                                                    <li value="1"><b>ID - </b>the primary key of the table (in our case, <var>id_hello_world_message_storage</var>);</li>
                                                    <li value="2"><b>ForeignKey</b> - foreign key to the main resource that we want to export (<var>fk_hello_world_message</var> for <var>spy_hello_world_message</var>);</li>
                                                    <li value="3"><b>SynchronizationBehaviour </b>will modify the table as follows:<ul><li value="1">Add <var>Data</var> column to the table. It will store the data formatted in such a way that it can be sent directly to <i>Redis</i>. Data type: <var>TEXT</var>;</li><li value="2">Add <var>Key</var> column to the table. It will store the <b>Redis Key</b>. Data type: <var>VARCHAR</var>;</li><li value="3">Define<b> Resource </b>name for key generation;</li><li value="4">Define <b>Key Suffix Column</b> value for key generation;</li><li value="5">Define a <b>queue_group</b> where to send a copy of the <b>data</b> column;</li></ul></li>
                                                    <li value="4"><b>Timestamp</b> Behavior will be added for keeping timestamps and using incremental synchronization strategy.</li>
                                                </ul>
                                                <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Key Generation Strategy</a></span>
                                                    <div class="MCDropDownBody dropDownBody">
                                                        <p>Redis Keys will be generated automatically based on the column and Synchronization Behavior parameters. The generation algorithm is as follows:<br /><div class="u-is-scrollable"><table><thead><tr><th>Resource</th><th>Store</th><th>Locale</th><th>Key Suffix Column</th><th>Redis Key</th></tr></thead><tbody><tr><td>message</td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/error.png" /></td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/error.png" /></td><td>-</td><td>message</td></tr><tr><td>message</td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/check.png" /></td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/check.png" /></td><td>-</td><td>message.de.de_de</td></tr><tr><td>message</td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/error.png" /></td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/error.png" /></td><td>fk_hello_world_message</td><td>message.1, message.2, ...</td></tr><tr><td>message</td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/check.png" /></td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/error.png" /></td><td>fk_hello_world_message</td><td>message.de.1, message.de.2, ...</td></tr><tr><td>message</td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/check.png" /></td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/check.png" /></td><td>fk_hello_world_message</td><td>message.de.de_de.1, message.de.de_de.2, ..</td></tr><tr><td>message</td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/error.png" /></td><td style="text-align: center;"><img src="../../resources/images/publish-and-synchronize/check.png" /></td><td>fk_hello_world_message</td><td>message.de_de.1, message.de_de.2, message.de_de.1</td></tr></tbody></table></div></p>
                                                    </div>
                                                </div>
                                                <h2>6. Models and Facade</h2>
                                                <p>Now, we are ready to complete the publishing part of our tutorial. First, we need follow the standard conventions and let listeners delegate the execution process through the Facade to the Models behind. For this reason, we will create facade and model classes to handle the logic for the publish part.</p>
                                                <p>Our facade methods are:</p>
                                                <ul>
                                                    <li value="1"><var>publish($messageIds)</var>
                                                    </li>
                                                    <li value="2"><var>unpublish($messageIds)</var>
                                                    </li>
                                                </ul>
                                                <p>Create the <var>MessageStorageWriter</var> Model and implement the following two methods. Then, bind facade methods to them.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Zed\HelloWorld\Business\Message;

use Generated\Shared\Transfer\HelloWorldStorageTransfer;
use Orm\Zed\HelloWorld\Persistence\SpyHelloWorldMessageQuery;
use Orm\Zed\HelloWorld\Persistence\SpyHelloWorldMessageStorage;
use Orm\Zed\HelloWorld\Persistence\SpyHelloWorldMessageStorageQuery;

class MessageStorageWriter
{
    public function publish(array $messageIds)
    {
        $messages = SpyHelloWorldMessageQuery::create()
            -&gt;filterByIdHelloWorldMessage_In($messageIds)
            -&gt;find();

        foreach ($messages as $message) {
            $messageStorageTransfer = new HelloWorldStorageTransfer();
            $messageStorageTransfer-&gt;fromArray($message-&gt;toArray(), true);
            $this-&gt;store($message-&gt;getIdHelloWorldMessage(), $messageStorageTransfer);
        }
    }

    public function unpublish(array $messageIds)
    {
        $messages = SpyHelloWorldMessageStorageQuery::create()
            -&gt;filterByFkHelloWorldMessage_In($messageIds)
            -&gt;find();

        foreach ($messages as $message) {
            $message-&gt;delete();
        }
    }


    protected function store($idMessage, HelloWorldStorageTransfer $messageStorageTransfer)
    {
        $storageEntity = new SpyHelloWorldMessageStorage();
        $storageEntity-&gt;setFkHelloWorldMessage($idMessage);
        $storageEntity-&gt;setData($messageStorageTransfer-&gt;modifiedToArray());
        $storageEntity-&gt;save();
    }
}
</code></pre>
                                                <p>Then, create two facade methods in <var>HelloWorldFacade.php</var> to expose the model:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Zed\HelloWorld\Business;

use Spryker\Zed\Kernel\Business\AbstractFacade;

class HelloWorldFacade extends AbstractFacade implements HelloWorldFacadeInterface
{

    public function publish(array $messageIds)
    {
        $this-&gt;getFactory()
            -&gt;createMessageStorageWriter()-&gt;publish($messageIds);
    }

    public function unpublish(array $messageIds)
    {
        $this-&gt;getFactory()
            -&gt;createMessageStorageWriter()-&gt;unpublish($messageIds);
    }
}
</code></pre>
                                                <p>Now, we need to refactor the listener class in <var>HelloWorldFacade.php</var> and call the facade methods:</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Spryker\Zed\HelloWorld\Communication\Plugin\Event\Listener;

use Spryker\Zed\Event\Dependency\Plugin\EventBulkHandlerInterface;
use Spryker\Zed\EventBehavior\Business\EventBehaviorFacade;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;

class HelloWorldMessageStorageListener extends AbstractPlugin implements EventBulkHandlerInterface
{
    public function handleBulk(array $eventTransfers, $eventName)
    {
        $messageIds = $this-&gt;getFactory()-&gt;getEvenBehaviourFacade()-&gt;getEventTransferIds($eventTransfers);

        if ($eventName === HelloWorldEvents::ENTITY_SPY_HELLO_WORLD_MESSAGE_CREATE) {
            $this-&gt;getFacade()-&gt;publish($messageIds);
        } else if ($eventName === HelloWorldEvents::ENTITY_SPY_HELLO_WORLD_MESSAGE_DELETE) {
            $this-&gt;getFacade()-&gt;unpublish($messageIds);
        }
    }
}
</code></pre>
                                                <p>Everything is ready and in place. Now, we only need to create a queue to synchronize data to <i>Redis</i>.</p>
                                                <h2>7. Queue</h2>
                                                <p>The last step we need to perform is create a sync queue called <var>sync.storage.hello</var> as follows:</p>
                                                <p>1. Add queue configuration to RabbitMq client (<var>RabbitMqConfig.php</var>):</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Client\RabbitMq;
..

class RabbitMqConfig extends SprykerRabbitMqConfig
{
    /**
     * @return \ArrayObject
     */
    protected function getQueueOptions()
    {
        $queueOptionCollection = new ArrayObject();
		$queueOptionCollection-&gt;append($this-&gt;createQueueOption("sync.storage.hello", "sync.storage.hello.error"));

        return $queueOptionCollection;
    }
	...
}

</code></pre>
                                                <p>2.Add <var>MessageProcessor</var> to <var>QueueDependencyProvider</var> for our queue:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Queue;
...
class QueueDependencyProvider extends SprykerDependencyProvider
{
    protected function getProcessorMessagePlugins(Container $container)
    {
        return [
            ...
            "sync.storage.hello" =&gt; new SynchronizationStorageQueueMessageProcessorPlugin(),
        ];
    }
}

</code></pre>
                                                <p>When done, run the <var>IndexController</var> class we created on step <b>4</b> again to update the table and cause a new event to appear in the <i>Event Queue</i>. Then, run the queue:</p><pre><code class="language-Bash line-numbers">{vagrant@spryker-vagrant ➜  current git:(master) ✗  console queue:task:start event
Store: DE | Environment: development
</code></pre>
                                                <p>After that, let us check if we managed to store a record in the storage table. Open table <var>spy_hello_world_message_storage</var> and check the table. You should see one record per message:</p>
                                                <div class="u-is-scrollable">
                                                    <table>
                                                        <thead>
                                                            <tr>
                                                                <th>id_hello_world_message_storage</th>
                                                                <th>fk_hello_world_message</th>
                                                                <th>data</th>
                                                                <th>key</th>
                                                                <th>created_at</th>
                                                                <th>updated_at</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                <td>1</td>
                                                                <td>2</td>
                                                                <td>{"name":"John","message":"Hello World!"} </td>
                                                                <td>message:2</td>
                                                                <td>2018-06-04 14:59:33.063645</td>
                                                                <td>2018-06-04 14:59:33.063645</td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                                <p>Now, the publish part is done. Let us also check whether the data has been exported to a secondary queue for the Synchronize part. The <var>sync.storage.hello</var> queue should now have at least one message:</p>
                                                <p>
                                                    <img src="../../resources/images/publish-and-synchronize/sync-queue-event.png" />
                                                </p>
                                                <p>The very last step is to send the data to <i>Redis</i>. This can be done by running the following command:  <var>console queue:task:start sync.storage.hello</var>. When it completes, the sync queue should be empty.</p>
                                                <p class="tip">To run all queues at once, you can run the following command: <var>console queue:worker:start -vvv</var>.</p>
                                                <h2>8. Redis</h2>
                                                <p>Let us check <i>Redis</i> and see whether the data has really been exported and has a good structure:</p>
                                                <p>
                                                    <img src="../../resources/images/publish-and-synchronize/storage-redis.png" />
                                                    <br />
                                                </p>
                                                <p class="tip">To explore <i>Redis</i> storage, connect Redis Desktop Manager to <a href="http://zed.de.suite.local:10009" class="_blank">http://zed.de.suite.local:10009</a>.</p>
                                                <h2>9. Client</h2>
                                                <p>Finally, we can read the data from Redis. For this purpose, we will create a Client layer and create the <var>MessageStorageReader</var> class in <var>the Client\Storage</var> folder:</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Spryker\Client\HelloWorld\Storage;

use Generated\Shared\Transfer\SynchronizationDataTransfer;
use Spryker\Client\Storage\StorageClient;
use Spryker\Client\Storage\StorageClientInterface;
use Spryker\Service\Synchronization\SynchronizationService;
use Spryker\Service\Synchronization\SynchronizationServiceInterface;

class MessageStorageReader
{
	...
    public function getMessageById($idMessage)
    {
        $synchronizationDataTransfer = new SynchronizationDataTransfer();
        $synchronizationDataTransfer
            -&gt;setReference($idMessage);

        $key = $this-&gt;synchronizationService
            -&gt;getStorageKeyBuilder("message")
            -&gt;generateKey($synchronizationDataTransfer);

        $data = $this-&gt;storageClient-&gt;get($key);
        
        $messageStorageTransfer = new HelloWorldStorageTransfer();
        $messageStorageTransfer-&gt;fromArray($data, true);
        
        return $messageStorageTransfer;
    }
}
</code></pre>
                                                <h3>References:</h3>
                                                <ul>
                                                    <li value="1">General information on Publish &amp; Synchronize: <a href="../../about_spryker/understanding_spryker/architecture_concepts/publish-and-synchronization.htm">Publish and Synchronization</a></li>
                                                    <li value="2"><a href="../../about_spryker/resources_and_developer_tools/publish-and-synchronization-reference.htm">Publish and Synchronization Reference</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>