<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Tutorials|Tutorials|Introduction">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Tutorial - Architectural Walkthrough</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/Stylesheets/MadCapSearch.Google.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/mobile.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/prism.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.topic-ratings-button
{
	-pie-background: transparent url('../../../Skins/Default/Stylesheets/Images/star-full.png') no-repeat center center;
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.edit-user-profile-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/edit-profile.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../resources/stylesheets/mainstyles.css" rel="stylesheet" />
        <link href="../resources/tablestyles/patternedrows.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapSearch.Google.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="small" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form>
                                            <div id="lXx8h3Ni90KiWbMH4ljRuw" class="search-bar search-bar-container needs-pie">
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container" data-mc-content-body="True">
                                <script src="../../resources/prism.js">
                                </script>
                                <div class="search-container">
                                    <form>
                                        <div id="TazoampY6k-Oa8JiYrqeFQ" class="search-bar search-bar-container needs-pie _Skins_SearchTopics mc-component">
                                        </div>
                                    </form>
                                </div>
                                <div class="row collapse">
                                    <div class="top-bar">
                                        <div class="nocontent">
                                            <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="topic-layout">
                                        <div>
                                            <div class="side-menu">
                                                <div data-sticky-container="" id="RwVUxGJoVEWfCsq1zAp3ww">
                                                    <div class="sticky sticky-menu" style="width:100%" data-sticky="" data-top-anchor="RwVUxGJoVEWfCsq1zAp3ww:top" data-bottom-anchor="contentBody:bottom" data-sticky-on="small" data-scroll-container-on="small">
                                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/master.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="side-menu">
                                                <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                    <div class="button-group-container-left">
                                                        <div class="button-group star-buttons loading feedback-topic-required">
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                        </div>
                                                        <div class="button-separator feedback-topic-required">
                                                        </div>
                                                        <button class="button feedback-required login-button" id="normalLoginBtn" data-state1-class="login-button" data-state2-class="edit-user-profile-button" title="Login" data-state1-title="Login">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="login" />
                                                        </button>
                                                        <button class="button needs-pie print-button" title="Print">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                        </button>
                                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                        </button>
                                                    </div>
                                                </div>
                                                <h1>Tutorial - Architectural Walkthrough</h1>
                                                <p>This is an architecture walkthrough as a coding exercise.</p>
                                                <h2>Challenge Description</h2>
                                                <ol>
                                                    <li value="1">Build a <strong>HelloSpryker</strong> <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> in Zed that will render the <var>Hello Spryker!</var> string, in reverse order, on the screen. The string must be retrieved from the config.</li>
                                                    <li value="2">Build a <strong>HelloSpryker</strong> <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> in Yves that will render the <var>Hello Spryker!</var> string, in reverse order, on the screen. Yves must communicate with Zed in order to retrieve the string.</li>
                                                    <li value="3">Add Zed persistence layer in <strong>HelloSpryker</strong> <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span>.</li>
                                                    <li value="4">Move the functionality that returns a string in reverse order to a new <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> (<strong>StringFormat</strong>). Use this functionality from the <strong>HelloSpryker</strong> <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span>.</li>
                                                </ol>
                                                <h2>Challenge Solving Highlights</h2>
                                                <h3>1. Building the HelloSpryker <span class="GeneralBundle/Module">(Undefined variable: General.Bundle/Module)</span> in Zed</h3>
                                                <ul>
                                                    <li class="bullet_list" value="1">Add the <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> folder in Zed.</li>
                                                    <li class="bullet_list" value="2">Add the config class with a method <var>getString</var> holding the default string <var>'Hello Spryker!'</var>.</li>
                                                    <li class="bullet_list" value="3">Add the logic for returning the string reversed under the business layer in <var>/Model</var> sub-folder.</li>
                                                    <li class="bullet_list" value="4">Create a business factory under the business layer to create this class.</li>
                                                    <li class="bullet_list" value="5">Create a <var>HelloSprykerFacade</var> under the business layer and call the business class here.</li>
                                                    <li class="bullet_list" value="6">Create a controller with an <var>indexAction()</var> method that will use the facade.</li>
                                                    <li class="bullet_list" value="7">Create the Twig template <var>index.twig</var> under the presentation layer inside a <var>HelloSpryker</var> subfolder.</li>
                                                    <li class="bullet_list" value="8">Display the string on the screen, navigate to the URL <var>/hello-spryker/hello-spryker</var> for this.</li>
                                                    <li class="bullet_list" value="9">Add the controller in your navigation on the left by providing a <var>navigation.xml</var> file in the Communication folder (see references at the bottom).</li>
                                                    <li class="bullet_list" value="10">Run <var>vendor/bin/console application:build-navigation-cache</var> to generate the new navigation tree.</li>
                                                </ul>
                                                <h4>Implementation Tips</h4>
                                                <p>Make sure you facade only delegates and the factory itself creates the HelloSpryker business class including the necessary constructor arguments:</p><pre><code class="language-PHP line-numbers">&lt;?php
return new HelloSpryker($this-&gt;getConfig());</code></pre>
                                                <p>The facade method should then just call</p><pre><code class="language-PHP line-numbers">&lt;?php
return $this-&gt;getFactory()-&gt;createHelloSpryker()-&gt;getReversedString();</code></pre>
                                                <p>Make the Config class configurable in a way that you can provide any string via <var>config_default.php</var>. You would use a <var>HelloSprykerConstants</var> class and inside the <var>getString()</var> method you would use <var>$this-&gt;get(HelloSprykerConstants::STRING, 'Hello Spryker!')</var>. The second argument is the default string in case no config has yet been provided. Constants classes are put into the <var>Pyz\Shared\</var> namespace.</p>
                                                <p>To test if you can use any string via config now, add this to <var>config_default.php</var>, for example:</p><pre><code class="language-PHP line-numbers">&lt;?php
$config[HelloSprykerConstants::STRING] = 'Foo Bar';</code></pre>
                                                <p>Your <var>index.twig</var> template ideally extends from the Gui layout to have the complete layout included:</p><pre><code class="language-PHP line-numbers">{% extends '@Gui/Layout/layout.twig' %}

{% block content %}
&lt;div class="row"&gt;
    &lt;div class="col-sm-12"&gt;
        {{ reversedString }}
    &lt;/div&gt;
&lt;/div&gt;
{% endblock %}</code></pre>
                                                <h3>2. Building a <strong>HelloSpryker</strong> <span class="GeneralBundle/Module">(Undefined variable: General.Bundle/Module)</span> in Yves</h3>
                                                <p>Add Yves layer:</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Add the <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> folder in Yves.</li>
                                                    <li class="bullet_list" value="2">Add controller + action.</li>
                                                    <li class="bullet_list" value="3">Create the Twig template under the presentation layer (<var>/HelloSpryker/Theme/default/hello-spryker/index.twig</var>).</li>
                                                    <li class="bullet_list" value="4">Add route in the controller provider (for URL <var>/hello-spryker</var>).</li>
                                                    <li class="bullet_list" value="5">Register the controller provider in YvesBootstrap.</li>
                                                </ul>
                                                <p>Communicate with Zed:</p>
                                                <ul>
                                                    <li class="bullet_list" value="1">Create a <var>hello_spryker.transfer.xml</var> file in <var>Shared/HelloSpryker/Transfer</var> building a <var>HelloSprykerTransfer</var> object which contains a <var>reversedString</var> property.</li>
                                                    <li class="bullet_list" value="2">Run <var>vendor/bin/console transfer:generate</var> to generate the class.</li>
                                                    <li class="bullet_list" value="3">Create client directory for Zed (<var>/Pyz/Client/HelloSpryker/Zed</var>).</li>
                                                    <li class="bullet_list" value="4">Add client and stub (see references at the bottom).</li>
                                                    <li class="bullet_list" value="5">Add a <var>HelloSprykerDependencyProvider</var> for Client layer.</li>
                                                    <li class="bullet_list" value="6">Add a gateway call in client/stub with an empty transfer object</li>
                                                    <li class="bullet_list" value="7">Add a <var>GatewayController</var> with a <var>getReversedStringAction()</var> method in Zed which calls the facade and returns the filled transfer object.</li>
                                                </ul>
                                                <h4>Implementation Tips</h4>
                                                <p>The Yves route you need to set up, can look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
$this-&gt;createController('/hello-spryker', 'hello-spryker', 'HelloSpryker', 'HelloSpryker', 'index');</code></pre>
                                                <p>The <var>HelloSprykerStub</var> class must have a constructor argument and property for <var>zedStub</var> which will be passed in from the Client layer factory. The gateway call could look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
$helloSprykerTransfer = new HelloSprykerTransfer();

return $this-&gt;zedStub-&gt;call(
    '/hello-spryker/gateway/get-reversed-string',
    $helloSprykerTransfer
);</code></pre>
                                                <p>The dependency provider needs to provide the client to the factory:</p><pre><code class="language-PHP line-numbers">&lt;?php
$container['HelloSpryker client'] = function (Container $container) {
    return $container-&gt;getLocator()-&gt;helloSpryker()-&gt;client();
};</code></pre>
                                                <p>The GatewayController just populates the passed in transfer object and returns this again:</p><pre><code class="language-PHP line-numbers">&lt;?php
public function getReversedStringAction(HelloSprykerTransfer $helloSprykerTransfer)
{
	$reversedString = $this-&gt;getFacade()-&gt;getReversedString();
	$helloSprykerTransfer-&gt;setReversedString($reversedString);

	return $helloSprykerTransfer;
}</code></pre>
                                                <p>The Twig template here should extend the main layout:</p><pre><code class="language-PHP line-numbers">{% extends "@application/layout/layout.twig" %}

{% block title %}
    &lt;h3&gt;{{ helloSpryker.reversedString }}&lt;/h3&gt;
{% endblock %}</code></pre>
                                                <h3>3. Make <strong>HelloSpryker</strong> <span class="GeneralBundle/Module">(Undefined variable: General.Bundle/Module)</span> Read from Database</h3>
                                                <ul>
                                                    <li class="bullet_list" value="1">In Zed add a persistence layer and a schema XML file with a very basic table holding the string.</li>
                                                    <li class="bullet_list" value="2">Run <var>vendor/bin/console propel:install</var> to generate the table and classes.</li>
                                                    <li class="bullet_list" value="3">Also pass the new QueryContainer into the HelloSpryker class as a second constructor dependency.</li>
                                                    <li class="bullet_list" value="4">You can populate the database from the config, e.g. in the constructor of the HelloSpryker class.</li>
                                                    <li class="bullet_list" value="5">Read inside the Zed business logic from the QueryContainer now instead of config.</li>
                                                </ul>
                                                <h4>Implementation Tips</h4>
                                                <p>The snippet to store our test string could look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
protected function initDatabaseFromConfig(HelloSprykerConfig $helloSprykerConfig)
{
    $helloSprykerEntity = $this-&gt;helloSprykerQueryContainer-&gt;queryHelloSpryker()-&gt;findOne();
    if (!$helloSprykerEntity) {
        $helloSprykerEntity = new PyzHelloSpryker();
        $helloSprykerEntity-&gt;setString($helloSprykerConfig-&gt;getString());
    } else {
        $helloSprykerEntity-&gt;setString($helloSprykerConfig-&gt;getString());
    }
    $helloSprykerEntity-&gt;save();
}</code></pre>
                                                <p>It will always update the database according to your config.</p>
                                                <p>The <var>/Pyz/Zed/HelloSpryker/Persistence/Propel/Schema/pyz_hello_spryker.schema.xml</var> could look like this:</p><pre><code class="language-PHP line-numbers">&lt;?xml version="1.0"?&gt;
&lt;database xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="zed" xsi:noNamespaceSchemaLocation="http://static.spryker.com/schema-01.xsd"
    namespace="Orm\Zed\HelloSpryker\Persistence"
    namespaceAutoPackage="false"
    package="src.Orm.Zed.HelloSpryker.Persistence"&gt;

    &lt;table name="pyz_hello_spryker" idMethod="native"&gt;
        &lt;column name="id_hello_spryker" required="true" type="INTEGER" autoIncrement="true" primaryKey="true"/&gt;
        &lt;column name="string" required="true" size="128" type="VARCHAR"/&gt;

        &lt;unique name="pyz_hello_spryker-string"&gt;
            &lt;unique-column name="string"/&gt;
        &lt;/unique&gt;
        &lt;id-method-parameter value="pyz_hello_spryker_pk_seq"/&gt;
    &lt;/table&gt;

&lt;/database&gt;</code></pre>
                                                <h3>4. <strong>StringFormat</strong> <span class="GeneralBundle/Module">(Undefined variable: General.Bundle/Module)</span></h3>
                                                <ul>
                                                    <li class="bullet_list" value="1">Create the <strong>StringFormat</strong> <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> in Zed.</li>
                                                    <li class="bullet_list" value="2">In the HelloSpryker <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span>, create a dependency provider class and call it <var>HelloSprykerDependencyProvider</var>.</li>
                                                    <li class="bullet_list" value="3">Extract the functionality that formats the string and move it to the new <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span>.</li>
                                                    <li class="bullet_list" value="4">Create <var>StringFormatFacade</var> class.</li>
                                                    <li class="bullet_list" value="5">Provide the business layer dependency to the <strong>HelloSpryker</strong> <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> and internally use this other facade now.</li>
                                                </ul>
                                                <h4>Implementation Tips</h4>
                                                <ul>
                                                    <li class="bullet_list" value="1">The HelloSpryker class will now have a third constructor argument, the provided facade.</li>
                                                    <li class="bullet_list" value="2">You can use the transfer object to pass the string between <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span>s.</li>
                                                    <li class="bullet_list" value="3">Try to add interfaces for your classes so that the constructor typehints are abstract instead of concrete.</li>
                                                </ul>
                                                <h2>More Tips</h2>
                                                <p>Run <var>vendor/bin/console dev:ide:generate-auto-completion </var>to also get IDE typehinting for the new <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> for both Yves and Zed.</p>
                                                <p>Add <var>@method</var> annotations to your classes to get complete IDE type-hinting and clickability:</p>
                                                <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Click to expand the code sample</a></span>
                                                    <div class="MCDropDownBody dropDownBody"><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @method \Pyz\Zed\HelloSpryker\Business\HelloSprykerFacade getFacade()
 */
class HelloSprykerController extends AbstractController
{
}

/**
 * @method \Pyz\Zed\HelloSpryker\Business\HelloSprykerBusinessFactory getFactory()
 */
class HelloSprykerFacade extends AbstractFacade
{
}

/**
 * @method \Pyz\Zed\HelloSpryker\HelloSprykerConfig getConfig()
 * @method \Pyz\Zed\HelloSpryker\Persistence\HelloSprykerQueryContainer getQueryContainer()
 */
class HelloSprykerBusinessFactory extends AbstractBusinessFactory
{
}

/**
 * @method \Pyz\Client\HelloSpryker\HelloSprykerFactory getFactory()
 */
class HelloSprykerClient extends AbstractClient
{
}</code></pre>
                                                    </div>
                                                </div>
                                                <p>This is useful for all OS internal “locatable” classes.</p>
                                                <h2>Reference</h2>
                                                <table class="TableStyle-PatternedRows" style="mc-table-style: url('../Resources/TableStyles/PatternedRows.css');" cellspacing="0">
                                                    <col class="TableStyle-PatternedRows-Column-Regular" />
                                                    <col class="TableStyle-PatternedRows-Column-Regular" />
                                                    <thead>
                                                        <tr class="TableStyle-PatternedRows-Head-Header1">
                                                            <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Documentation</th>
                                                            <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Description</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr class="TableStyle-PatternedRows-Body-LightRows">
                                                            <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                                                                <p><a href="../Developing with Spryker/develping_with_spryker.htm" class="MCXref xref">Developing with Spryker Commerce OS</a>
                                                                </p>
                                                            </td>
                                                            <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                                                                <p>Development Guide to start developing with Spryker</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                                                            <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                                                                <p>URL Routing</p>
                                                            </td>
                                                            <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                                                                <p>URL Routing in Yves</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-PatternedRows-Body-LightRows">
                                                            <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                                                                <p><a href="../Tutorials and HowTos/More Information/Advanced Tutorials/t_add_new_bundle.htm" target="_blank">How to Add a New <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span></a>
                                                                </p>
                                                            </td>
                                                            <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                                                                <p>Tutorial on creating a new <span class="Generalbundle/module">(Undefined variable: General.bundle/module)</span> in Zed</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                                                            <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                                                                <p><a href="../Tutorials and HowTos/More Information/Advanced Tutorials/t_add_navigation_zed.htm" target="_blank">How to Add Navigation in Zed	</a>
                                                                </p>
                                                            </td>
                                                            <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                                                                <p>Adding navigation in Zed</p>
                                                            </td>
                                                        </tr>
                                                        <tr class="TableStyle-PatternedRows-Body-LightRows">
                                                            <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">
                                                                <p><a href="../Tutorials and HowTos/More Information/Advanced Tutorials/t_transfer_data_yves_zed.htm" target="_blank">Communication Between Yves and Zed</a>
                                                                </p>
                                                            </td>
                                                            <td class="TableStyle-PatternedRows-BodyA-Regular-LightRows">
                                                                <p>Transfer Data from Yves to Zed</p>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>