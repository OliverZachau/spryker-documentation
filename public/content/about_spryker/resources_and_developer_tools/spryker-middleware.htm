<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="About Spryker|Developer Tools">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Spryker Middleware</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/mobile.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/prism.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.topic-ratings-button
{
	-pie-background: transparent url('../../../Skins/Default/Stylesheets/Images/star-full.png') no-repeat center center;
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.edit-user-profile-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/edit-profile.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../resources/stylesheets/mainstyles.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="small" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" placeholder="Search the Academy" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container" data-mc-content-body="True">
                                <script src="../../resources/prism.js">
                                </script>
                                <div class="search-container">
                                    <form class="search" action="#">
                                        <div class="search-bar search-bar-container needs-pie _Skins_SearchTopics mc-component">
                                            <input class="search-field needs-pie" type="search" placeholder="Search" />
                                            <div class="search-filter-wrapper">
                                                <div class="search-filter">
                                                    <div class="search-filter-content">
                                                        <ul>
                                                            <li>All Files</li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="search-submit-wrapper" dir="ltr">
                                                <div class="search-submit" title="Search">
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="row collapse">
                                    <div class="top-bar">
                                        <div class="nocontent">
                                            <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="topic-layout">
                                        <div>
                                            <div class="side-menu">
                                                <div data-sticky-container="" id="5W3gLzMSHkypiN01AzCl9w">
                                                    <div class="sticky sticky-menu" style="width:100%" data-sticky="" data-top-anchor="5W3gLzMSHkypiN01AzCl9w:top" data-bottom-anchor="contentBody:bottom" data-sticky-on="small" data-scroll-container-on="small">
                                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/master.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="side-menu">
                                                <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                    <div class="button-group-container-left">
                                                        <div class="button-group star-buttons loading feedback-topic-required">
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                            <div class="button star-button topic-ratings-empty-button" data-state1-class="topic-ratings-empty-button" data-state2-class="topic-ratings-button" title="Click a star to rate this topic" data-state1-title="Click a star to rate this topic" data-state2-title="Click a star to rate this topic">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="topic rating" />
                                                            </div>
                                                        </div>
                                                        <div class="button-separator feedback-topic-required">
                                                        </div>
                                                        <button class="button feedback-required login-button" id="normalLoginBtn" data-state1-class="login-button" data-state2-class="edit-user-profile-button" title="Login" data-state1-title="Login">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="login" />
                                                        </button>
                                                        <button class="button needs-pie print-button" title="Print">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                        </button>
                                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                            <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                        </button>
                                                    </div>
                                                </div>
                                                <h1>Spryker Middleware</h1>
                                                <h2>Overview</h2>
                                                <p>Spryker Middleware is a constructor that allows you to set up a linear data processing flow, also referred to as pipeline, for import/export of data from some system to shop, or from shop to some system. For example, it can be used for importing products to a shop, or exporting orders from a shop.</p>
                                                <h3>Pipeline Structure</h3>
                                                <p>The Middleware applies the pipeline pattern allowing to connect different stages of data processing together and inverting dependencies between them. The imported/exported items are processed one by one and go through a set of specific steps called “stages”.</p>
                                                <p>The pipeline contains 5 stages: reader, validator, mapper, translator, writer.</p>
                                                <p>First of all, a source item is <b>read</b>. Then it is <b>validated</b> to make sure that all attributes etc. are correct and all the necessary data is available. Having passed the validation, the item is <b>mapped</b>, i.e. keys of the source system are mapped onto the target system. This being done, the items go through a <b>translator</b> which processes the values and translates them into a respective format (for example, the price value is a decimal value, but should be init - it’s translator’s responsibility to change it to the required value). After that, the item is <b>written</b> to the target system (to the database, in case of import, to a file, if it’s export etc.).</p>
                                                <p>
                                                    <img src="../../resources/images/middleware/stages.png" />
                                                </p>
                                                <p>Each stage can be abstracted as having:</p>
                                                <ol>
                                                    <li value="1">Input – item is received from the previous stage, exception might be a reader, which receives nothing.</li>
                                                    <li value="2">Output – item is provided for the next stage, exception might be a writer, which persists data and sends back nothing.</li>
                                                    <li value="3">Configuration – configuration of the stage, e.g. validation rules for the validator.</li>
                                                    <li value="4">Logging – used by any stage to leave some artefacts of processing data.</li>
                                                </ol>
                                                <p>
                                                    <img src="../../resources/images/middleware/input-output.png" />
                                                </p>
                                                <p>The incoming data are taken from the stream - the Middleware does not care about the source of the data, whether they come from a file, from an API etc. The middleware provides its own interface, so the source of the data does not really matter.</p>
                                                <h3>How the Middleware Works</h3>
                                                <p>The Middleware provides a console interface to allow job triggering and Jenkins integration. It is evoked by running the command <var>middleware:process: run</var>. The main parameter of the command is <i>-p</i> (process name) which defines the process to be started.</p>
                                                <p>The default implementation of the middleware constructor includes the interface, reading/writing from/to JSON, .csv, .xml formats, business logic of mapping, translation and validation (you can add your own translators and validators).</p>
                                                <p>There are two main plugin interfaces, which should be implemented to configure Middleware Process: <var>ConfigurationProfilePluginInterface</var> and <var>ProccessConfigurationPluginInterface</var>.</p>
                                                <p>The <var>ConfigurationProfilePluginInterface</var> registers the processes (like import/export) and the list of custom translators/validators (if any) implemented at the project level. The interface can be implemented in any module under <var>\Spryker\Zed\[MODULE]\Communication\Plugin\Configuration</var>.</p>
                                                <p>This plugin implements the interface as follows:</p>
                                                <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Click here to expand the code sample</a></span>
                                                    <div class="MCDropDownBody dropDownBody"><pre><code class="language-PHP line-numbers">
class AkeneoPimConfigurationProfilePlugin extends AbstractPlugin implements ConfigurationProfilePluginInterface
{
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Configuration\ProcessConfigurationPluginInterface[]
     */
    public function getProcessConfigurationPlugins(): array
    {
        return $this-&gt;getFactory()
            -&gt;getAkeneoPimProcesses();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\TranslatorFunction\TranslatorFunctionPluginInterface[]
     */
    public function getTranslatorFunctionPlugins(): array
    {
        return $this-&gt;getFactory()
            -&gt;getAkeneoPimTranslatorFunctions();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Validator\ValidatorPluginInterface[]
     */
    public function getValidatorPlugins(): array
    {
        return [];
    }
}
				</code></pre>
                                                    </div>
                                                </div>
                                                <p>		Each process is a separate plugin that consists of the following methods (ProcessConfigurationPluginInterface):
</p>
                                                <p><b>getProcessName</b> - returns the process name which is used to find necessary process with the parameter (transferred with -p option).</p>
                                                <p><b>getInputStreamPlugin</b> - configures the source from where the data is read.</p>
                                                <p><b>getOutputStreamPlugin</b> - configures the target where the data is written.</p>
                                                <p><b>getIteratorPlugin</b> - either does nothing and releases the input stream for processing as is, or alters the data for further processing. For example, if the input stream is just a file, the iterator does nothing and lets the data be processed further. If the input stream is, for example, a file catalog, <var>getInputStreamPlugin</var> returns the file name, the iterator goes through all the files, and if, say each file is in JSON format, the iterator returns each JSON file of the catalog for processing to pipeline.</p>
                                                <p>You can use one of two iterators that are provided out of the box (NullIterator, JsonDirectoryIterator) or implement your own iterator.</p>
                                                <p><b>getStagePlugin</b> - contains a list of all stages the items go through (reader, validator, mapper, translator, writer) and makes sure each item passes each stage one by one.</p>
                                                <p><b>getLoggerPlugin</b> - defines the way logging happens. The default Middleware logger logs to the PHP standard error stream (php://stderr) (this can be changed as needed). Detalization of the logging is fully customizable, which means you can configure it as you wish.</p>
                                                <p><b>getPreProcessHookPlugins</b> and <b>getPostProcessHookPlugins</b> - define what should be done prior to or after a process. For example, it might be necessary to download a file with the categories prior to the categories import: this would be specified in <var>getPreProcessHookPlugins</var>.</p>
                                                <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Click here to expand the code sample</a></span>
                                                    <div class="MCDropDownBody dropDownBody"><pre><code class="language-PHP line-numbers">
		class CategoryImportConfigurationPlugin extends AbstractPlugin implements ProcessConfigurationPluginInterface
{
    const PROCESS_NAME = 'CATEGORY_IMPORT_PROCESS';
 
    /**
     * @return string
     */
    public function getProcessName(): string
    {
        return static::PROCESS_NAME;
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Stream\InputStreamPluginInterface
     */
    public function getInputStreamPlugin(): InputStreamPluginInterface
    {
        return $this-&gt;getFactory()
            -&gt;getCategoryImportInputStreamPlugin();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Stream\OutputStreamPluginInterface
     */
    public function getOutputStreamPlugin(): OutputStreamPluginInterface
    {
        return $this-&gt;getFactory()
            -&gt;getCategoryImportOutputStreamPlugin();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Iterator\ProcessIteratorPluginInterface
     */
    public function getIteratorPlugin(): ProcessIteratorPluginInterface
    {
        return $this-&gt;getFactory()
            -&gt;getCategoryImportIteratorPlugin();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\StagePluginInterface[]
     */
    public function getStagePlugins(): array
    {
        return $this-&gt;getFactory()
            -&gt;getCategoryImportStagePluginsStack();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Log\MiddlewareLoggerConfigPluginInterface
     */
    public function getLoggerPlugin(): MiddlewareLoggerConfigPluginInterface
    {
        return $this-&gt;getFactory()
            -&gt;getAkeneoPimLoggerConfigPlugin();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Hook\PreProcessorHookPluginInterface[]
     */
    public function getPreProcessorHookPlugins(): array
    {
        return $this-&gt;getFactory()
            -&gt;getCategoryImportPreProcessorPluginsStack();
    }
 
    /**
     * @return \SprykerMiddleware\Zed\Process\Dependency\Plugin\Hook\PostProcessorHookPluginInterface[]
     */
    public function getPostProcessorHookPlugins(): array
    {
        return $this-&gt;getFactory()
            -&gt;getCategoryImportPostProcessorPluginsStack();
    }
}
</code></pre>
                                                    </div>
                                                </div>
                                                <h3>
		Code Organization</h3>
                                                <p>The Middleware is a set of modules in the Middleware namespace allowing to group common functionalities together. The middleware cannot provide readers and writers for all systems, these should be implemented in scope of respective modules and namespaces.</p>
                                                <p>Here is an example of code organization for a project:</p>
                                                <p>
                                                    <img src="../../resources/images/middleware/code_organization.png" />
                                                </p>
                                                <h3>Middleware Integration</h3>
                                                <p>The core of the Spryker Middleware is implemented in the Process module. This module collects all process plugins and creates processes out of them.</p>
                                                <p>To install Process module add the Process repository to your repositories in composer.json, do the following:</p><pre><code class="language-PHP line-numbers">
repositories": [
 
  ...
  {
    "type": "git",
    "url": "https://github.com/spryker-middleware/process.git"
  }
],   </code></pre>
	Then run this command in console:
	<pre><code class="language-PHP line-numbers">
composer require spryker-middleware/process    </code></pre>
	Add <var>SprykerMiddleware</var> namespace to your project’s core namespaces:
	<pre><code class="language-PHP line-numbers">
$config[KernelConstants::CORE_NAMESPACES] = [
   'SprykerShop',
   'SprykerMiddleware',
   'SprykerEco',
   'Spryker',
];    </code></pre>
	Add Middleware Process console command to <var>ConsoleDependencyProvider</var> in your project:
	<pre><code class="language-PHP line-numbers">
	…
use SprykerMiddleware\Zed\Process\Communication\Console\ProcessConsole;
…
protected function getConsoleCommands(Container $container)
{
   $commands = [
       … 
       new ProcessConsole(),
   ];
   …
   return $commands;
}    </code></pre>
	Add Process module on project level and specify configuration profiles in <var>ProcessDependencyProvider</var>:
	<pre><code class="language-PHP line-numbers">
	class ProcessDependencyProvider extends SprykerMiddlewareProcessDependencyProvider
{
    …
   protected function getConfigurationProfilePluginsStack(): array
   {
       $profileStack = parent::getConfigurationProfilePluginsStack();
       $profileStack[] = new PimConfigurationProfilePlugin();
       $profileStack[] = new DefaultConfigurationProfilePlugin();
 
       return $profileStack;
   }
}    </code></pre><p>
		See <a href="https://github.com/spryker-eco/akeneo-pim-middleware-connector/blob/feature/ECO-1205-update-module-according-to-middleware-changes/src/SprykerEco/Zed/AkeneoPimMiddlewareConnector/Communication/Plugin/Configuration/DefaultProductImportConfigurationPlugin.php">this example</a> on how to implement a process.
</p><h2>Middleware Reports</h2><p>You can view the results of the Spryker Middleware processes in Middleware <i>Reports</i> section under <i>Maintenance</i> menu of the Administration interface. This <i>Middleware Reports</i> section provides an overview of all the processes run with Middleware, overview of the process results (start time, duration, item count and status of each process) as well as the detailed information on each process. The detailed information includes:</p><p><b>Process details:</b></p><p>-process name</p><p>-process start/end times</p><p>-process duration</p><p>-items count</p><p>-processed items</p><p>-skipped items</p><p>-status</p><p>-duration</p><p><b>Configuration details:</b></p><p>-iterator plugin</p><p>-input stream plugin</p><p>-output stream plugin</p><p>-logger plugin</p><p>-stage plugins</p><p>-pre process hook plugins</p><p>-post process hook plugins</p><p>-paths (if applicable)</p><p><b>Process stage results:</b></p><p>-stage name</p><p>-input item count</p><p>-output item count</p><p>-total execution time</p><p>-average item execution time</p><h3>Reports Integration</h3><p>To install Report module, add the Report repository to your repositories in composer.json:</p><pre><code class="language-PHP line-numbers">
repositories": [
 
  ...
  {
    "type": "git",
    "url": "https://github.com/spryker-middleware/report.git"
  }
],
</code></pre>
Then run this command in console:
<pre><code class="language-PHP line-numbers">
composer require spryker-middleware/report
</code></pre>
To add reporting functionality to your Middleware process, add the following plugin to the list of post hook plugins in your Process configuration:
<pre><code class="language-PHP line-numbers">
use SprykerMiddleware\Zed\Report\Communication\Plugin\Hook\ReportPostProcessorHookPlugin;
...
public function getPostProcessorHookPlugins(): array
{
   return [
      ...
      new ReportPostProcessorHookPlugin(),
   ];
}
...
</code></pre>
After that you will be able to see the result of your process runs in the Admin UI (Maintenance\ Middleware Reports).

<h3>OmsMiddlewareConnector Module</h3>
The <var>OmsMiddlewareConnector</var> module provides <var>TriggerOrderExportProcessCommand</var> which enables triggering of a Middleware process from OMS. Also this module provides <var>OrderReadStreamPlugin</var> that provides input stream for reading orders and pass them to next stages of Middleware process.

To install <var>OmsMiddlewareConnector</var> module add the <var>OmsMiddlewareConnector</var> repository to your repositories in composer.json, do the following:
<pre><code class="language-PHP line-numbers">
repositories": [
 
  ...
  {
    "type": "git",
    "url": "https://github.com/spryker-middleware/oms-middleware-connector.git"
  }
],
</code></pre>

Then run this command in console:
<pre><code class="language-PHP line-numbers">
composer require spryker-middleware/oms-middleware-connector
</code></pre>
Please refer to config/Shared/config.dist.php for example of module configuration.

To set up the order export process which should be triggered from OMS command, add configuration of its name to your project’s config:
<pre><code class="language-PHP line-numbers">
$config[OmsMiddlewareConnectorConstants::ORDER_EXPORT_PROCESS_NAME] = OrderExportProcessConfigurationPlugin::PROCESS_NAME;
</code></pre>
Now <var>TriggerOrderExportProcessCommand</var> is available and can be registered in OmsDependencyProvider as well as used in your Oms configuration:
<pre><code class="language-PHP line-numbers">
...
/**
* @param \Spryker\Zed\Kernel\Container $container
*
* @return \Spryker\Zed\Kernel\Container
*/
public function provideBusinessLayerDependencies(Container $container)
{
   $container = parent::provideBusinessLayerDependencies($container);
   $container-&gt;extend(self::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) {
       $commandCollection-&gt;add(new TriggerOrderExportProcessCommand(), ‘Order/Export);
        
       return $commandCollection;
   });
 
   return $container;
}
...
</code></pre><p>&#160;</p><p><![CDATA[
	]]><i>Last	review date: April, 25th, 2018</i></p></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>